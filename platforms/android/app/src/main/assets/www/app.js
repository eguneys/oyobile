(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.Okeyground=e()}}(function(){var e;return function(){function e(t,n,r){function a(o,u){if(!n[o]){if(!t[o]){var l="function"==typeof require&&require;if(!u&&l)return l(o,!0);if(i)return i(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var s=n[o]={exports:{}};t[o][0].call(s.exports,function(e){var n=t[o][1][e];return a(n||e)},s,s.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)a(r[o]);return a}return e}()({1:[function(e,t,n){!function(e){function n(e,t){if("object"!==a(e))return t;for(var r in t)"object"===a(e[r])&&"object"===a(t[r])?e[r]=n(e[r],t[r]):e[r]=t[r];return e}function r(e,t,r){var o=r[0],u=r.length;(e||"object"!==a(o))&&(o={});for(var l=0;l<u;++l){var d=r[l],s=a(d);if("object"===s)for(var c in d)if("__proto__"!==c){var f=e?i.clone(d[c]):d[c];t?o[c]=n(o[c],f):o[c]=f}}return o}function a(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}var i=function(e){return r(e===!0,!1,arguments)},o="merge";i.recursive=function(e){return r(e===!0,!0,arguments)},i.clone=function(e){var t,n,r=e,o=a(e);if("array"===o)for(r=[],n=e.length,t=0;t<n;++t)r[t]=i.clone(e[t]);else if("object"===o){r={};for(t in e)r[t]=i.clone(e[t])}return r},e?t.exports=i:window[o]=i}("object"==typeof t&&t&&"object"==typeof t.exports&&t.exports)},{}],2:[function(t,n,r){!function(t,r){"use strict";var a=r(t);"undefined"==typeof window&&a.deps({document:"undefined"!=typeof document?document:{},location:"undefined"!=typeof location?location:{},clearTimeout:clearTimeout,setTimeout:setTimeout}),"object"==typeof n&&null!=n&&n.exports?n.exports=a:"function"==typeof e&&e.amd?e(function(){return a}):t.m=a}("undefined"!=typeof window?window:this,function a(e,t){"use strict";function n(e){return"function"==typeof e}function r(e){return"[object Object]"===Ke.call(e)}function i(e){return"[object String]"===Ke.call(e)}function o(){}function u(e){xe=e.document,Se=e.location,Me=e.cancelAnimationFrame||e.clearTimeout,Ee=e.requestAnimationFrame||e.setTimeout}function l(e,t){for(var n,r=[],a=/(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;n=a.exec(t);)if(""===n[1]&&n[2])e.tag=n[2];else if("#"===n[1])e.attrs.id=n[2];else if("."===n[1])r.push(n[2]);else if("["===n[3].charAt(0)){var i=n[6];i&&(i=i.replace(/\\(["'])/g,"$1")),"class"===n[4]?r.push(i):e.attrs[n[4]]=i||!0}return r}function d(e,t){var n=t?e.slice(1):e;return 1===n.length&&Te(n[0])?n[0]:n}function s(e,t,n){var r="class"in t?"class":"className";for(var a in t)Ce.call(t,a)&&(a===r&&null!=t[a]&&""!==t[a]?(n.push(t[a]),e[a]=""):e[a]=t[a]);n.length&&(e[r]=n.join(" "))}function c(e,t){for(var a=[],o=1,u=arguments.length;o<u;o++)a[o-1]=arguments[o];if(e&&n(e.view))return ae(e,a);if(!i(e))throw new Error("selector in m(selector, attrs, children) should be a string");var c=null!=t&&r(t)&&!("tag"in t||"view"in t||"subtree"in t),f=c?t:{},p={tag:"div",attrs:{},children:d(a,c)};return s(p.attrs,f,l(p,e)),p}function f(e,t){for(var n=0;n<e.length&&!t(e[n],n++););}function p(e,t){f(e,function(e,n){return(e=e&&e.attrs)&&null!=e.key&&t(e,n)})}function v(e){try{if("boolean"!=typeof e&&null!=e&&null!=e.toString())return e}catch(t){}return""}function m(e,t,n,r){try{h(e,t,n),t.nodeValue=r}catch(a){}}function g(e){for(var t=0;t<e.length;t++)Te(e[t])&&(e=e.concat.apply([],e),t--);return e}function h(e,t,n){e.insertBefore(t,e.childNodes[n]||null)}function y(e,t,n,r){p(e,function(e,r){t[e=e.key]=t[e]?{action:je,index:r,from:t[e].index,element:n.nodes[t[e].index]||xe.createElement("div")}:{action:Be,index:r}});var a=[];for(var i in t)Ce.call(t,i)&&a.push(t[i]);var o=a.sort(q),u=new Array(n.length);return u.nodes=n.nodes.slice(),f(o,function(t){var a=t.index;if(t.action===De&&(V(n[a].nodes,n[a]),u.splice(a,1)),t.action===Be){var i=xe.createElement("div");i.key=e[a].attrs.key,h(r,i,a),u.splice(a,0,{attrs:{key:e[a].attrs.key},nodes:[i]}),u.nodes[a]=i}if(t.action===je){var o=t.element,l=r.childNodes[a];l!==o&&null!==o&&r.insertBefore(o,l||null),u[a]=n[t.from],u.nodes[a]=o}}),u}function w(e,t,n,r){var a=e.length!==t.length;return a||p(e,function(e,n){var r=t[n];return a=r&&r.attrs&&r.attrs.key!==e.key}),a?y(e,n,t,r):t}function b(e,t,n){f(e,function(e,r){null!=t[r]&&n.push.apply(n,t[r].nodes)}),f(t.nodes,function(e,r){null!=e.parentNode&&n.indexOf(e)<0&&V([e],[t[r]])}),e.length<t.length&&(t.length=e.length),t.nodes=n}function P(e){var t=0;p(e,function(){return f(e,function(e){(e=e&&e.attrs)&&null==e.key&&(e.key="__mithril__"+t++)}),1})}function k(e,t,n){return e.tag!==t.tag||(n.sort().join()!==Object.keys(t.attrs).sort().join()||(e.attrs.id!==t.attrs.id||(e.attrs.key!==t.attrs.key||("all"===c.redraw.strategy()?!t.configContext||t.configContext.retain!==!0:"diff"===c.redraw.strategy()&&(t.configContext&&t.configContext.retain===!1)))))}function O(e,t,r){k(e,t,r)&&(t.nodes.length&&V(t.nodes),t.configContext&&n(t.configContext.onunload)&&t.configContext.onunload(),t.controllers&&f(t.controllers,function(e){e.onunload&&e.onunload({preventDefault:o})}))}function x(e,t){return e.attrs.xmlns?e.attrs.xmlns:"svg"===e.tag?"http://www.w3.org/2000/svg":"math"===e.tag?"http://www.w3.org/1998/Math/MathML":t}function S(e,t,n){n.length&&(e.views=t,e.controllers=n,f(n,function(e){if(e.onunload&&e.onunload.$old&&(e.onunload=e.onunload.$old),Re&&e.onunload){var t=e.onunload;e.onunload=function(){},e.onunload.$old=t}}))}function E(e,t,r,a,i){if(n(t.attrs.config)){var o=i.configContext=i.configContext||{};e.push(function(){return t.attrs.config.call(t,r,!a,o,i)})}}function M(e,n,r,a,i,o,u,l){var d=e.nodes[0];return a&&J(d,n.tag,n.attrs,e.attrs,i),e.children=U(d,n.tag,t,t,n.children,e.children,!1,0,n.attrs.contenteditable?d:r,i,u),e.nodes.intact=!0,l.length&&(e.views=o,e.controllers=l),d}function C(e,t,n){var r;e.$trusted?r=ee(t,n,e):(r=[xe.createTextNode(e)],t.nodeName in Ae||h(t,r[0],n));var a;return a="string"==typeof e||"number"==typeof e||"boolean"==typeof e?new e.constructor(e):e,a.nodes=r,a}function K(e,t,n,r,a,i){var o=t.nodes;return r&&r===xe.activeElement&&e===t||(e.$trusted?(V(o,t),o=ee(n,a,e)):"textarea"===i?n.value=e:r?(r.innerHTML=e,o=[].slice.call(r.childNodes)):((1===o[0].nodeType||o.length>1||o[0].nodeValue.trim&&!o[0].nodeValue.trim())&&(V(t.nodes,t),o=[xe.createTextNode(e)]),m(n,o[0],a,e))),t=new e.constructor(e),t.nodes=o,t.$trusted=e.$trusted,t}function T(e,t,n,r,a,i,o){return e.nodes.length?e.valueOf()!==t.valueOf()||a?K(t,e,r,i,n,o):(e.nodes.intact=!0,e):C(t,r,n)}function A(e){return e.$trusted?e.nodes.length:Te(e)?e.length:1}function D(e,n,r,a,i,o,u,l,d){e=g(e);var s=[],c=n.length===e.length,f=0,v={},m=!1;p(n,function(e,t){m=!0,v[n[t].attrs.key]={action:De,index:t}}),P(e),m&&(n=w(e,n,v,r));for(var h=0,y=0,k=e.length;y<k;y++){var O=U(r,i,n,a,e[y],n[h],o,a+f||f,u,l,d);O!==t&&(c=c&&O.nodes.intact,f+=A(O),n[h++]=O)}return c||b(e,n,s),n}function B(e,t,n,r,a){if(null!=t){if(Ke.call(t)===Ke.call(e))return t;if(a&&a.nodes){var i=n-r,o=i+(Te(e)?e:t.nodes).length;V(a.nodes.slice(i,o),a.slice(i,o))}else t.nodes&&V(t.nodes,t)}return t=new e.constructor,t.tag&&(t={}),t.nodes=[],t}function j(e,t){return e.attrs.is?null==t?xe.createElement(e.tag,e.attrs.is):xe.createElementNS(t,e.tag,e.attrs.is):null==t?xe.createElement(e.tag):xe.createElementNS(t,e.tag)}function R(e,t,n,r){return r?J(t,e.tag,e.attrs,{},n):e.attrs}function L(e,n,r,a,i,o){return null!=e.children&&e.children.length>0?U(n,e.tag,t,t,e.children,r.children,!0,0,e.attrs.contenteditable?n:a,i,o):e.children}function G(e,t,n,r,a,i,o){var u={tag:e.tag,attrs:t,children:n,nodes:[r]};return S(u,i,o),u.children&&!u.children.nodes&&(u.children.nodes=[]),u}function F(e,t,r,a){var i;return i="diff"===c.redraw.strategy()&&e?e.indexOf(t):-1,i>-1?r[i]:n(a)?new a:{}}function N(e,t,n,r){null!=r.onunload&&Ge.map(function(e){return e.handler}).indexOf(r.onunload)<0&&Ge.push({controller:r,handler:r.onunload}),e.push(n),t.push(r)}function _(e,t,n,r,a,i){var o=F(n.views,t,r,e.controller),u=e&&e.attrs&&e.attrs.key;return e=0===Re||Fe||r&&r.indexOf(o)>-1?e.view(o):{tag:"placeholder"},"retain"===e.subtree?e:(e.attrs=e.attrs||{},e.attrs.key=u,N(i,a,t,o),e)}function I(e,t,n,r){for(var a=t&&t.controllers;null!=e.view;)e=_(e,e.view.$original||e.view,t,a,r,n);return e}function H(e,t,n,r,a,o,u,l){var d=[],s=[];if(e=I(e,t,d,s),"retain"===e.subtree)return t;if(!e.tag&&s.length)throw new Error("Component template must return a virtual element, not an array, string, etc.");e.attrs=e.attrs||{},t.attrs=t.attrs||{};var c=Object.keys(e.attrs),f=c.length>("key"in e.attrs?1:0);if(O(e,t,c),i(e.tag)){var p=0===t.nodes.length;u=x(e,u);var v;if(p){v=j(e,u);var m=R(e,v,u,f);h(r,v,a);var g=L(e,v,t,n,u,l);t=G(e,m,g,v,u,d,s)}else v=M(t,e,n,f,u,d,l,s);return"select"===e.tag&&"value"in e.attrs&&J(v,e.tag,{value:e.attrs.value},{},u),p||o!==!0||null==v||h(r,v,a),E(l,e,v,p,t),t}}function U(e,t,a,i,o,u,l,d,s,c,f){return o=v(o),"retain"===o.subtree?u:(u=B(o,u,d,i,a),Te(o)?D(o,u,e,d,t,l,s,c,f):null!=o&&r(o)?H(o,u,s,e,d,l,c,f):n(o)?u:T(u,o,d,e,l,s,t))}function q(e,t){return e.action-t.action||e.index-t.index}function X(e,t,n){n===t&&(e.style="",n={});for(var r in t)Ce.call(t,r)&&(null!=n&&n[r]===t[r]||(e.style[r]=t[r]));for(r in n)Ce.call(n,r)&&(Ce.call(t,r)||(e.style[r]=""))}function z(e,t,a,i,o,u){if("config"===t||"key"===t)return!0;if(n(a)&&"on"===t.slice(0,2))e[t]=te(a,e);else if("style"===t&&null!=a&&r(a))X(e,a,i);else if(null!=u)"href"===t?e.setAttributeNS("http://www.w3.org/1999/xlink","href",a):e.setAttribute("className"===t?"class":t,a);else if(t in e&&!Ne[t])try{("input"!==o&&!e.isContentEditable||e[t]!=a)&&(e[t]=a)}catch(l){e.setAttribute(t,a)}else try{e.setAttribute(t,a)}catch(l){}}function $(e,t,n,r,a,i,o){if(t in a&&r===n&&"object"!=typeof n&&xe.activeElement!==e)"value"===t&&"input"===i&&e.value!=n&&(e.value=n);else{a[t]=n;try{return z(e,t,n,r,i,o)}catch(u){if(u.message.indexOf("Invalid argument")<0)throw u}}}function J(e,t,n,r,a){for(var i in n)!Ce.call(n,i)||!$(e,i,n[i],r[i],r,t,a);return r}function V(e,t){for(var n=e.length-1;n>-1;n--)if(e[n]&&e[n].parentNode){try{e[n].parentNode.removeChild(e[n])}catch(r){}t=[].concat(t),t[n]&&Y(t[n])}e.length&&(e.length=0)}function Y(e){e.configContext&&n(e.configContext.onunload)&&(e.configContext.onunload(),e.configContext.onunload=null),e.controllers&&f(e.controllers,function(e){n(e.onunload)&&e.onunload({preventDefault:o})}),e.children&&(Te(e.children)?f(e.children,Y):e.children.tag&&Y(e.children))}function Q(e,t){try{e.appendChild(xe.createRange().createContextualFragment(t))}catch(n){e.insertAdjacentHTML("beforeend",t),W(e)}}function W(e){if("SCRIPT"===e.tagName)e.parentNode.replaceChild(Z(e),e);else{var t=e.childNodes;if(t&&t.length)for(var n=0;n<t.length;n++)W(t[n])}return e}function Z(e){for(var t=document.createElement("script"),n=e.attributes,r=0;r<n.length;r++)t.setAttribute(n[r].name,n[r].value);return t.text=e.innerHTML,t}function ee(e,t,n){var r=e.childNodes[t];if(r){var a=1!==r.nodeType,i=xe.createElement("span");a?(e.insertBefore(i,r||null),i.insertAdjacentHTML("beforebegin",n),e.removeChild(i)):r.insertAdjacentHTML("beforebegin",n)}else Q(e,n);for(var o=[];e.childNodes[t]!==r;)o.push(e.childNodes[t]),t++;return o}function te(e,t){return function(n){n=n||event,c.redraw.strategy("diff"),c.startComputation();try{return e.call(t,n)}finally{le()}}}function ne(e){var t=Ie.indexOf(e);return t<0?Ie.push(e)-1:t}function re(e){function t(){return arguments.length&&(e=arguments[0]),e}return t.toJSON=function(){return e&&n(e.toJSON)?e.toJSON():e},t}function ae(e,t){function n(){return(e.controller||o).apply(this,t)||this}function r(n){for(var r=[n].concat(t),a=1;a<arguments.length;a++)r.push(arguments[a]);return e.view.apply(e,r)}e.controller&&(n.prototype=e.controller.prototype),r.$original=e.view;var a={controller:n,view:r};return t[0]&&null!=t[0].key&&(a.attrs={key:t[0].key}),a}function ie(e,t,n,r){if(!r){c.redraw.strategy("all"),c.startComputation(),qe[n]=t;var a;a=Ue=e?e:e={controller:o};var i=new(e.controller||o);return a===Ue&&(ze[n]=i,Xe[n]=e),le(),null===e&&oe(t,n),ze[n]}null==e&&oe(t,n),Ze&&(We=Ze)}function oe(e,t){qe.splice(t,1),ze.splice(t,1),Xe.splice(t,1),me(e),Ie.splice(ne(e),1),Ge=[]}function ue(){Ve&&(Ve(),Ve=null),f(qe,function(e,t){var n=Xe[t];if(ze[t]){var r=[ze[t]];c.render(e,n.view?n.view(ze[t],r):"")}}),Ye&&(Ye(),Ye=null),$e=null,Je=new Date,c.redraw.strategy("diff")}function le(){"none"===c.redraw.strategy()?(Re--,c.redraw.strategy("diff")):c.endComputation()}function de(e){return e.slice(nt[c.route.mode].length)}function se(e,t,n){tt={};var r=n.indexOf("?");r!==-1&&(tt=ve(n.substr(r+1,n.length)),n=n.substr(0,r));var a=Object.keys(t),i=a.indexOf(n);if(i!==-1)return c.mount(e,t[a[i]]),!0;for(var o in t)if(Ce.call(t,o)){if(o===n)return c.mount(e,t[o]),!0;var u=new RegExp("^"+o.replace(/:[^\/]+?\.{3}/g,"(.*?)").replace(/:[^\/]+/g,"([^\\/]+)")+"/?$");if(u.test(n))return n.replace(u,function(){var n=o.match(/:[^\/]+/g)||[],r=[].slice.call(arguments,1,-2);f(n,function(e,t){tt[e.replace(/:|\./g,"")]=decodeURIComponent(r[t])}),c.mount(e,t[o])}),!0}}function ce(e){if(e=e||event,!(e.ctrlKey||e.metaKey||e.shiftKey||2===e.which)){e.preventDefault?e.preventDefault():e.returnValue=!1;var t,n=e.currentTarget||e.srcElement;for(t="pathname"===c.route.mode&&n.search?ve(n.search.slice(1)):{};n&&!/a/i.test(n.nodeName);)n=n.parentNode;Re=0,c.route(n[c.route.mode].slice(nt[c.route.mode].length),t)}}function fe(){"hash"!==c.route.mode&&Se.hash?Se.hash=Se.hash:e.scrollTo(0,0)}function pe(e,n){var a={},i=[];for(var o in e)if(Ce.call(e,o)){var u=n?n+"["+o+"]":o,l=e[o];if(null===l)i.push(encodeURIComponent(u));else if(r(l))i.push(pe(l,u));else if(Te(l)){var d=[];a[u]=a[u]||{},f(l,function(e){a[u][e]||(a[u][e]=!0,d.push(encodeURIComponent(u)+"="+encodeURIComponent(e)))}),i.push(d.join("&"))}else l!==t&&i.push(encodeURIComponent(u)+"="+encodeURIComponent(l))}return i.join("&")}function ve(e){if(""===e||null==e)return{};"?"===e.charAt(0)&&(e=e.slice(1));var t=e.split("&"),n={};return f(t,function(e){var t=e.split("="),r=decodeURIComponent(t[0]),a=2===t.length?decodeURIComponent(t[1]):null;null!=n[r]?(Te(n[r])||(n[r]=[n[r]]),n[r].push(a)):n[r]=a}),n}function me(e){var n=ne(e);V(e.childNodes,He[n]),He[n]=t}function ge(e,t){var n=c.prop(t);return e.then(n),n.then=function(n,r){return ge(e.then(n,r),t)},n["catch"]=n.then.bind(null,null),n}function he(e,t){function a(e){l=e||lt,s.map(function(e){l===ut?e.resolve(d):e.reject(d)})}function i(e,t,a,i){if((null!=d&&r(d)||n(d))&&n(e))try{var o=0;e.call(d,function(e){o++||(d=e,t())},function(e){o++||(d=e,a())})}catch(u){c.deferred.onerror(u),d=u,a()}else i()}function o(){var r;try{r=d&&d.then}catch(s){return c.deferred.onerror(s),d=s,l=ot,o()}l===ot&&c.deferred.onerror(d),i(r,function(){l=it,o()},function(){l=ot,o()},function(){try{l===it&&n(e)?d=e(d):l===ot&&n(t)&&(d=t(d),l=it)}catch(o){return c.deferred.onerror(o),d=o,a()}d===u?(d=TypeError(),a()):i(r,function(){a(ut)},a,function(){a(l===it&&ut)})})}var u=this,l=0,d=0,s=[];u.promise={},u.resolve=function(e){return l||(d=e,l=it,o()),u},u.reject=function(e){return l||(d=e,l=ot,o()),u},u.promise.then=function(e,t){var n=new he(e,t);return l===ut?n.resolve(d):l===lt?n.reject(d):s.push(n),n.promise}}function ye(e){return e}function we(n){var r=n.callbackName||"mithril_callback_"+(new Date).getTime()+"_"+Math.round(1e16*Math.random()).toString(36),a=xe.createElement("script");e[r]=function(i){a.parentNode.removeChild(a),n.onload({type:"load",target:{responseText:i}}),e[r]=t},a.onerror=function(){return a.parentNode.removeChild(a),n.onerror({type:"error",target:{status:500,responseText:JSON.stringify({error:"Error making jsonp request"})}}),e[r]=t,!1},a.onload=function(){return!1},a.src=n.url+(n.url.indexOf("?")>0?"&":"?")+(n.callbackKey?n.callbackKey:"callback")+"="+r+"&"+pe(n.data||{}),xe.body.appendChild(a)}function be(t){var a=new e.XMLHttpRequest;if(a.open(t.method,t.url,!0,t.user,t.password),a.onreadystatechange=function(){4===a.readyState&&(a.status>=200&&a.status<300?t.onload({type:"load",target:a}):t.onerror({type:"error",target:a}))},t.serialize===JSON.stringify&&t.data&&"GET"!==t.method&&a.setRequestHeader("Content-Type","application/json; charset=utf-8"),t.deserialize===JSON.parse&&a.setRequestHeader("Accept","application/json, text/*"),r(t.headers))for(var o in t.headers)Ce.call(t.headers,o)&&a.setRequestHeader(o,t.headers[o]);if(n(t.config)){var u=t.config(a,t);null!=u&&(a=u)}var l="GET"!==t.method&&t.data?t.data:"";if(l&&!i(l)&&l.constructor!==e.FormData)throw new Error("Request data should be either be a string or FormData. Check the `serialize` option in `m.request`");return a.send(l),a}function Pe(e){return e.dataType&&"jsonp"===e.dataType.toLowerCase()?we(e):be(e)}function ke(e,t,n){if("GET"===e.method&&"jsonp"!==e.dataType){var r=e.url.indexOf("?")<0?"?":"&",a=pe(t);e.url+=a?r+a:""}else e.data=n(t)}function Oe(e,t){return t&&(e=e.replace(/:[a-z]\w+/gi,function(e){var n=e.slice(1),r=t[n]||e;return delete t[n],r})),e}c.version=function(){return"v0.2.8"};var xe,Se,Ee,Me,Ce={}.hasOwnProperty,Ke={}.toString,Te=Array.isArray||function(e){return"[object Array]"===Ke.call(e)},Ae={AREA:1,BASE:1,BR:1,COL:1,COMMAND:1,EMBED:1,HR:1,IMG:1,INPUT:1,KEYGEN:1,LINK:1,META:1,PARAM:1,SOURCE:1,TRACK:1,WBR:1};c.deps=function(t){return u(e=t||window),e},c.deps.factory=c.factory=a,c.deps(e);var De=1,Be=2,je=3,Re=0;c.startComputation=function(){Re++},c.endComputation=function(){Re>1?Re--:(Re=0,c.redraw())};var Le,Ge=[],Fe=!1,Ne={list:1,style:1,form:1,type:1,width:1,height:1},_e={appendChild:function(e){Le===t&&(Le=xe.createElement("html")),xe.documentElement&&xe.documentElement!==e?xe.replaceChild(e,xe.documentElement):xe.appendChild(e),this.childNodes=xe.childNodes},insertBefore:function(e){this.appendChild(e)},childNodes:[]},Ie=[],He={};c.render=function(e,n,r){if(!e)throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.");var a,i=[],o=ne(e),u=e===xe;a=u||e===xe.documentElement?_e:e,u&&"html"!==n.tag&&(n={tag:"html",attrs:{},children:n}),He[o]===t&&V(a.childNodes),r===!0&&me(e),He[o]=U(a,null,t,t,n,He[o],!1,0,null,t,i),f(i,function(e){e()})},c.trust=function(e){return e=new String(e),e.$trusted=!0,e},c.prop=function(e){return(null!=e&&(r(e)||n(e))||"undefined"!=typeof Promise&&e instanceof Promise)&&n(e.then)?ge(e):re(e)};var Ue,qe=[],Xe=[],ze=[],$e=null,Je=0,Ve=null,Ye=null,Qe=16;c.component=function(e){for(var t=new Array(arguments.length-1),n=1;n<arguments.length;n++)t[n-1]=arguments[n];return ae(e,t)};var We,Ze;c.mount=c.module=function(e,t){if(!e)throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.");var r=qe.indexOf(e);r<0&&(r=qe.length);var a=!1,i={preventDefault:function(){a=!0,Ve=Ye=null}};return f(Ge,function(e){e.handler.call(e.controller,i),e.controller.onunload=null}),a?f(Ge,function(e){e.controller.onunload=e.handler}):Ge=[],ze[r]&&n(ze[r].onunload)&&ze[r].onunload(i),ie(t,e,r,a)};var et=!1;c.redraw=function(t){if(!et){et=!0,t&&(Fe=!0);try{$e&&!t?(Ee===e.requestAnimationFrame||new Date-Je>Qe)&&($e>0&&Me($e),$e=Ee(ue,Qe)):(ue(),$e=Ee(function(){$e=null},Qe))}finally{et=Fe=!1}}},c.redraw.strategy=c.prop(),c.withAttr=function(e,t,n){return function(r){r=r||window.event;var a=r.currentTarget||this,i=n||this,o=e in a?a[e]:a.getAttribute(e);t.call(i,o)}};var tt,nt={pathname:"",hash:"#",search:"?"},rt=o,at=!1;c.route=function(t,n,r,a){if(0===arguments.length)return We;if(3===arguments.length&&i(n)){rt=function(e){var a=We=de(e);if(!se(t,r,a)){if(at)throw new Error("Ensure the default route matches one of the routes defined in m.route");at=!0,c.route(n,!0),at=!1}};var o="hash"===c.route.mode?"onhashchange":"onpopstate";return e[o]=function(){var e=Se[c.route.mode];"pathname"===c.route.mode&&(e+=Se.search),We!==de(e)&&rt(e)},Ve=fe,void e[o]()}if(t.addEventListener||t.attachEvent){var u="pathname"!==c.route.mode?Se.pathname:"";return t.href=u+nt[c.route.mode]+a.attrs.href,void(t.addEventListener?(t.removeEventListener("click",ce),t.addEventListener("click",ce)):(t.detachEvent("onclick",ce),t.attachEvent("onclick",ce)))}if(i(t)){Ze=We,We=t;var l,d=n||{},s=We.indexOf("?");l=s>-1?ve(We.slice(s+1)):{};for(var f in d)Ce.call(d,f)&&(l[f]=d[f]);var p,v=pe(l);p=s>-1?We.slice(0,s):We,v&&(We=p+(p.indexOf("?")===-1?"?":"&")+v);var m=(3===arguments.length?r:n)===!0||Ze===We;if(e.history.pushState){var g=m?"replaceState":"pushState";Ve=fe,Ye=function(){try{e.history[g](null,xe.title,nt[c.route.mode]+We)}catch(t){Se[c.route.mode]=We}},rt(nt[c.route.mode]+We)}else Se[c.route.mode]=We,rt(nt[c.route.mode]+We);Ze=null}},c.route.param=function(e){if(!tt)throw new Error("You must call m.route(element, defaultRoute, routes) before calling m.route.param()");return e?tt[e]:tt},c.route.mode="search",c.route.buildQueryString=pe,c.route.parseQueryString=ve,c.deferred=function(){var e=new he;return e.promise=ge(e.promise),e};var it=1,ot=2,ut=3,lt=4;return c.deferred.onerror=function(e){if("[object Error]"===Ke.call(e)&&!/ Error/.test(e.constructor.toString()))throw Re=0,e},c.sync=function(e){function t(e,t){return function(o){return a[e]=o,t||(i="reject"),0===--r&&(n.promise(a),n[i](a)),o}}var n=c.deferred(),r=e.length,a=[],i="resolve";return e.length>0?f(e,function(e,n){e.then(t(n,!0),t(n,!1))}):n.resolve([]),n.promise},c.request=function(e){e.background!==!0&&c.startComputation();var t,n,r,a=new he,i=e.dataType&&"jsonp"===e.dataType.toLowerCase();return i?(t=e.serialize=n=e.deserialize=ye,r=function(e){return e.responseText}):(t=e.serialize=e.serialize||JSON.stringify,n=e.deserialize=e.deserialize||JSON.parse,r=e.extract||function(e){return e.responseText.length||n!==JSON.parse?e.responseText:null}),e.method=(e.method||"GET").toUpperCase(),e.url=Oe(e.url,e.data),ke(e,e.data,t),e.onload=e.onerror=function(t){try{t=t||event;var i=n(r(t.target,e));"load"===t.type?(e.unwrapSuccess&&(i=e.unwrapSuccess(i,t.target)),Te(i)&&e.type?f(i,function(t,n){i[n]=new e.type(t)}):e.type&&(i=new e.type(i)),a.resolve(i)):(e.unwrapError&&(i=e.unwrapError(i,t.target)),a.reject(i))}catch(o){a.reject(o),c.deferred.onerror(o)}finally{e.background!==!0&&c.endComputation()}},Pe(e),a.promise=ge(a.promise,e.initialValue),a.promise},c})},{}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){var n=.7*e.width,r=.7*e.height,a=p["default"].miniKey2pos(t),i=[a[0]*(n/p["default"].miniColumns),a[1]*(r/p["default"].miniRows)];return i}function i(e,t,n){var r=p["default"].key2pos(n),a=[r[0]*(e.width/p["default"].columns),r[1]*e.height*.5],i=[e.left-t.left,e.top-t.top];return[i[0]+a[0],i[1]+a[1]]}function o(e,t){return[e[0]-t[0],e[1]-t[1]]}function u(e,t){return t[0]}function l(e,t,n){return{key:e,distance:n,color:t.color,number:t.number}}function d(e,t){var n,r,d,s,c=t.animation.current,f=p["default"].findPov(t.povSide,t.turnSide),m=p["default"].vectorByPov(f),g=(t.bounds(),t.topBounds()),h=t.boardBounds(),y=h.width,w=(h.height,g.width),b=g.height,P=.0625*w,k=.14*b,O=.0625*y,x={},S=[],E={},M={},C=p["default"].discardByPov(f),K=p["default"].drawByPov(f),T=p["default"].topKey2pos(K),A=p["default"].topKey2pos(C),D=[w*m[0],b*m[1]+("up"===f?-k:"left"===f?-k/2:0)],B=[12*P,b-k],j=[P*A[0],k*A[1]],R=[P*T[0],k*T[1]],L=[1*P,1*k],G=[],F=[],N=[],_=[];for(n=0;n<p["default"].allAllowedBoardKeys.length;n++){r=p["default"].allAllowedBoardKeys[n],d=t.pieces[r],s=e.pieces[r];var I=i(h,g,r);!d&&s?G.push(l(r,s,I)):d&&!s&&F.push(l(r,d,I))}for(n=0;n<p["default"].miniAllKeys.length;n++){r=p["default"].miniAllKeys[n],d=t.opens.layout?t.opens.layout.layout[r]:null,s=e.opens.layout?e.opens.layout.layout[r]:null;var H=a(g,r);d&&!s?_.push(l(r,d,H)):!d&&s&&N.push(l(r,s,H))}var U,q,X;return"down"!==f||t.spectator?c.hint===v["default"].drawMiddle?(U=[12*P,b],q=D,X=[q[0]-U[0],q[1]-U[1]],x[p["default"].middleCount]=[X,X,!0]):c.hint===v["default"].discard?(U=[P*A[0],k*A[1]],q=D,X=[q[0]-U[0],q[1]-U[1]],x[C]=[X,X]):c.hint===v["default"].drawLeft?(U=[P*T[0],k*T[1]],q=D,X=[q[0]-U[0],q[1]-U[1]],x[v["default"].drawLeft+K]=[X,X,!0],M.piece=e.discards[K]):c.hint===v["default"].leaveTaken?(U=[P*T[0],k*T[1]],q=D,X=[q[0]-U[0],q[1]-U[1]],x[K]=[X,X]):c.hint===v["default"].openSeries?_.forEach(function(e,t){q=D,q=o(q,L),q=o(q,e.distance),U=[0,0],X=[q[0]-U[0],q[1]-U[1]],x[e.key]=[X,X],E[e.key]=[1.75,1.75]}):c.hint===v["default"].collectOpen&&N.forEach(function(e,t){q=D,q=o(q,L),q=o(q,e.distance),U=[0,0],X=[q[0]-U[0],q[1]-U[1]],x[e.key]=[X,X,!0],M[e.key]=e}):c.hint===v["default"].drawMiddle&&F[0]?(r=F[0].key,U=F[0].distance,U=o(U,B),q=[0,0],X=[q[0]-U[0],q[1]-U[1]],x[r]=[X,X]):c.hint===v["default"].discard&&G[0]?(q=G[0].distance,q=o(q,j),U=[0,0],X=[q[0]-U[0],q[1]-U[1]],x[C]=[X,X]):c.hint===v["default"].leaveTaken?G[0]?(q=G[0].distance,q=o(q,R),U=[0,0],X=[q[0]-U[0],q[1]-U[1]],x[K]=[X,X]):(U=[P*T[0],k*T[1]],q=D,X=[q[0]-U[0],q[1]-U[1]],x[K]=[X,X]):c.hint===v["default"].openSeries&&_.forEach(function(e,t){var n=u(e,G.filter(p["default"].partial(p["default"].pieceEqual,e)));G.splice(G.indexOf(n),1),n&&(q=n.distance,q=o(n.distance,[O,0]),q=o(q,L),q=o(q,e.distance),U=[0,0],X=[q[0]-U[0],q[1]-U[1]],x[e.key]=[X,X],E[e.key]=[1.75,1.75])}),{anims:x,fadings:S,scales:E,extra:M}}function s(e,t){return Math.round(e*t)/t}function c(e){if(e.animation.current.start){var t=1-((new Date).getTime()-e.animation.current.start)/e.animation.current.duration;if(t<=0)e.animation.current={},e.render();else{var n,r=m.easeInOutCubic(t);for(var a in e.animation.current.anims)n=e.animation.current.anims[a],n[1]=[s(n[0][0]*r,10),s(n[0][1]*r,10)],n[2]&&(n[1]=[n[0][0]-n[1][0],n[0][1]-n[1][1]]);var i;for(i in e.animation.current.fadings)e.animations.current.fadings[i].opacity=s(r,100);for(i in e.animation.current.scales)n=e.animation.current.scales[i],n[0]=1+s(.7*r,10),n[1]=1+s(.7*r,10);e.render(),p["default"].requestAnimationFrame(function(){c(e)})}}}function f(e,t){var n,r={pieces:{},opens:{},middles:{},discards:{}};for(n in t.pieces)t.pieces[n]&&(r.pieces[n]={color:t.pieces[n].color,number:t.pieces[n].number});for(n in t.discards)t.discards[n]&&t.discards[n][0]&&(r.discards[n]={color:t.discards[n][0].color,number:t.discards[n][0].number});if(t.opens.layout){var a;r.opens.layout={layout:{}};for(n in t.opens.layout.layout)a=t.opens.layout.layout[n],r.opens.layout.layout[n]={color:a.color,number:a.number}}var i=e(),o=d(r,t);if(Object.keys(o.anims).length>0||o.fadings.length>0){var u=t.animation.current.start;t.animation.current={start:(new Date).getTime(),duration:t.animation.duration,anims:o.anims,fadings:o.fadings,scales:o.scales,extra:o.extra},u||c(t)}else t.renderRAF();return i}var p=r(e("./util")),v=r(e("./move")),m={easeInOutCubic:function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1}};t.exports=function(e,t){return function(){var n=[t].concat(Array.prototype.slice.call(arguments,0));if(t.animation.enabled)return f(p["default"].partialApply(e,n),t);var r=e.apply(null,n);return t.renderRAF(),r}}},{"./move":12,"./util":17}],4:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var a=r(e("mithril")),i=r(e("./view")),o=r(e("./board"));t.exports=function(e){return{set:e.set,getPieceGroups:function(){return o["default"].getPieceGroups(e.data)},attach:function(t){a["default"].render(t,(0,i["default"])(e),!0)},detach:function(){},sortPairs:e.sortPairs,sortSeries:e.sortSeries,apiMove:e.apiMove,apiDrawMiddleEnd:e.apiDrawMiddleEnd,playOpenSeries:e.playOpenSeries,playOpenPairs:e.playOpenPairs,playLeaveTaken:e.playLeaveTaken,canOpenSeries:e.canOpenSeries,canOpenPairs:e.canOpenPairs,canCollectOpen:e.canCollectOpen,canLeaveTaken:e.canLeaveTaken,stop:e.stop,getPieceGroupSeries:e.getPieceGroupSeries,getPieceGroupPairs:e.getPieceGroupPairs,getFen:e.getFen}}},{"./board":5,"./view":18,mithril:2}],5:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return l(e)||u(e,t)||o()}function o(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function u(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(l){a=!0,i=l}finally{try{r||null==u["return"]||u["return"]()}finally{if(a)throw i}}return n}function l(e){if(Array.isArray(e))return e}function d(e){if(F(e)){var t=e.middles[ne["default"].gosterge],n=ee(e);if(n=n.filter(function(n){return ie["default"].series(n.map(function(t){return e.pieces[t]}),t)}),n.length>0){var r=Y(n.map(function(t){return t.map(function(t){return e.pieces[t]})}));return m(e,n),ue(ne["default"].partial(e.movable.events.after,re["default"].openSeries,oe(r))),e.animation.current.hint=re["default"].openSeries,!0}}return!1}function s(e){if(N(e)){var t=e.middles[ne["default"].gosterge],n=ee(e);if(n=n.filter(function(n){return ie["default"].pairs(n.map(function(t){return e.pieces[t]}),t)}),n.length>0){var r=Y(n.map(function(t){return t.map(function(t){return e.pieces[t]})}));return v(e,n),ue(ne["default"].partial(e.movable.events.after,re["default"].openPairs,oe(r))),e.animation.current.hint=re["default"].openSeries,!0}}return!1}function c(e,t){return t=ae["default"].readPiece(t).piece,!(!_(e)||!O(e,t))&&(ue(ne["default"].partial(e.movable.events.after,re["default"].leaveTaken)),e.animation.current.hint=re["default"].leaveTaken,!0)}function f(e,t){var n=ne["default"].middleCount;w(e,n),p(e,t)}function p(e,t){"string"==typeof t&&(t=ae["default"].readPiece(t).piece),e.middleHolder.piece=t,g(e)}function v(e,t){var n=t.map(function(t){return t.map(function(t){return e.pieces[t]})}),r=Y(n);ue(ne["default"].partial(e.events.move,re["default"].openPairs,oe(r))),t.forEach(function(t){return t.map(function(t){return delete e.pieces[t]})});var a=e.opens.pairs.concat(n);e.opens.pairs=a,e.opens.relayout(e)}function m(e,t){var n=t.map(function(t){return t.map(function(t){return e.pieces[t]})}),r=Y(n);ue(ne["default"].partial(e.events.move,re["default"].openSeries,oe(r))),t.forEach(function(t){return t.map(function(t){return delete e.pieces[t]})});var a=e.opens.series.concat(n);e.opens.series=a,e.opens.relayout(e)}function g(e){var t=e.middleHolder.key,n=e.middleHolder.piece;t&&n&&(e.pieces[t]=n,e.lastMove=[ne["default"].middleCount],e.middleHolder.current=!1,e.middleHolder.key=null,e.middleHolder.piece=null)}function h(e,t,n){var r=X(e,t);if(r.length>0){var a=r[0].map(function(t,a){var i=r[0].length-a-1,o=ne["default"].decBoardKey(n,2*i);return[t,o,e.pieces[t]]}),o=a.every(function(t){var n=i(t,3),r=(n[0],n[1]);n[2];return ne["default"].isAllAllowedBoardKey(r)&&[r,ne["default"].decBoardKey(r,-1)].every(function(t){return!e.pieces[t]||a.filter(function(e){var n=i(e,3),r=n[0];n[1],n[2];return r===t}).length>0})});return!!o&&(a.map(function(t){var n=i(t,3),r=n[0],a=n[1],o=n[2];return delete e.pieces[r],[r,a,o]}).map(function(t){var n=i(t,3),r=(n[0],n[1]),a=n[2];e.pieces[r]=a}),!0)}return!1}function y(e,t,n){if(t===n||!e.pieces[t])return!1;var r=e.pieces[n];return e.pieces[n]=e.pieces[t],e.pieces[t]=r,!0}function w(e,t){e.middles[ne["default"].middleCount]--,e.middleHolder.current=!0;var n=z(e);return e.middleHolder.key=n,!0}function b(e,t,n){if(!n||e.pieces[n]){var r=z(e);n=r}return ue(ne["default"].partial(e.events.move,re["default"].drawMiddleEnd)),e.middleHolder.key=n,g(e),!0}function P(e,t){return ue(ne["default"].partial(e.events.move,re["default"].drawMiddle)),e.middles[ne["default"].middleCount]--,e.middleHolder.current=!0,!0}function k(e,t,n){return!e.pieces[n]&&(ue(ne["default"].partial(e.events.move,re["default"].drawLeft)),e.pieces[n]=e.discards[ne["default"].discards[1]][0],e.discards[ne["default"].discards[1]].shift(),
!0)}function O(e,t){var n=$(e,t);if(!n)return!1;ue(ne["default"].partial(e.events.move,re["default"].leaveTaken));var r=ne["default"].findPov(e.povSide,e.turnSide);return delete e.pieces[n],e.discards[ne["default"].drawByPov(r)].unshift(t),!0}function x(e,t,n){if(n&&ne["default"].isBoardKey(t)&&ne["default"].isBoardKey(n)&&B(e,t,n)){if(h(e,t,n))return!0;if(y(e,t,n))return!0}}function S(e,t){if(ne["default"].isMiddleKey(t)&&R(e,t))return P(e,t),!0}function E(e,t,n){if(ne["default"].isMiddleKey(t)&&L(e,t))return b(e,t,n),!0}function M(e,t,n){if(n&&ne["default"].isBoardKey(n)&&ne["default"].isDrawLeftKey(t)&&G(e,t,n)&&k(e,t,n))return ue(ne["default"].partial(e.movable.events.after,re["default"].drawLeft)),!0}function C(e,t,n){n||(ne["default"].isMiddleKey(t)?S(e,t)&&T(e,t):ne["default"].isDrawLeftKey(t)&&G(e)&&T(e,t))}function K(e,t){e.selected?(t?e.selected!==t&&(x(e,e.selected,t)||M(e,e.selected,t)||E(e,e.selected,t)):E(e,e.selected,t),T(e,null)):D(e,t)&&T(e,t)}function T(e,t){if(e.selected=t,t&&ne["default"].isBoardKey(t))if(q(e,t)){var n=e.middles[ne["default"].gosterge];e.openable.dests=ie["default"].compute(e.opens,e.pieces[t],n)}else e.openable.dests=[];else e.openable.dests=[]}function A(e){return e.povSide===e.turnSide}function D(e,t){var n=e.pieces[t];return n&&e.movable.board}function B(e,t,n){return t!=n&&D(e,t)}function j(e){return A(e)}function R(e,t){return j(e)&&!e.middleHolder.current&&ne["default"].containsX(e.movable.dests,re["default"].drawMiddle)}function L(e){return e.middleHolder.current}function G(e,t,n){return j(e)&&!L(e)&&ne["default"].containsX(e.movable.dests,re["default"].drawLeft)}function F(e){return A(e)&&ne["default"].containsX(e.movable.dests,re["default"].openSeries)}function N(e){return A(e)&&ne["default"].containsX(e.movable.dests,re["default"].openPairs)}function _(e){return A(e)&&ne["default"].containsX(e.movable.dests,re["default"].leaveTaken)}function I(e){return A(e)&&ne["default"].containsX(e.movable.dests,re["default"].collectOpen)}function H(e){K(e,null)}function U(e){e.movable.side=null,e.movable.dests=[],e.openable.dests=[],e.movable.board=!1,H(e)}function q(e,t){var n=e.pieces[t];return!(!n||e.povSide!==e.turnSide)}function X(e,t){var n=e.middles[ne["default"].gosterge],r=ee(e);return r=r.filter(function(e){return e[e.length-1]===t}),r=r.filter(function(t){return ie["default"].series(t.map(function(t){return e.pieces[t]}),n)||ie["default"].pairs(t.map(function(t){return e.pieces[t]}),n)})}function z(e){var t=ne["default"].allAllowedBoardKeys.slice(1),n=ne["default"].allAllowedBoardKeys.slice(2),r=ne["default"].allAllowedBoardKeys.map(function(e,r){return[e,t[r],n[r]]}).filter(function(t){var n=i(t,3),r=n[0],a=n[1],o=n[2];return r&&a&&o&&!e.pieces[r]&&!e.pieces[a]&&!e.pieces[o]});return r[r.length-1][1]}function $(e,t){return ne["default"].allAllowedBoardKeys.filter(function(n){return e.pieces[n]&&ne["default"].pieceEqual(e.pieces[n],t)})[0]}function J(e,t,n,r){var a=V(e,t,n);if(!a)return a;var i=ne["default"].decBoardKey(a);return i!==r&&e.pieces[i]&&(a=i),ne["default"].notAllowedBoardKeys.indexOf(a)!==-1?null:a}function V(e,t,n){if(n||e.bounds){n=n||e.bounds();var r=Math.floor(ne["default"].columns*((t[0]-n.left)/n.width)),a=Math.floor(ne["default"].rows*((t[1]-n.top)/n.height));return a>=0&&a<ne["default"].rows&&r>=0&&r<ne["default"].columns?ne["default"].pos2key([r,a]):void 0}}function Y(e){return e.map(function(e){return e.map(function(e){return e.key}).join("")}).join(" ")}function Q(e){var t=e.middles[ne["default"].gosterge],n=e.withTore,r=Z(e).filter(function(e){return ie["default"].series(e,t,n)});return Y(r)}function W(e){var t=e.middles[ne["default"].gosterge],n=Z(e).filter(function(e){return ie["default"].pairs(e,t)});return Y(n)}function Z(e){return ee(e).map(function(t){return t.map(function(t){return e.pieces[t]})})}function ee(e){var t=ne["default"].pos2key([ne["default"].columns-1,0]),n=ne["default"].allKeys.slice(1),r=ne["default"].allKeys.map(function(e,t){return[e,n[t]]}).reduce(function(n,r){var a=i(n,2),o=a[0],u=a[1],l=i(r,2),d=l[0],s=l[1];return e.pieces[d]&&o.push(d),(d&&!e.pieces[d]&&s&&!e.pieces[s]||d===t)&&0!==o.length&&(u.push(o),o=[]),[o,u]},[[],[]]),a=i(r,2),o=a[0],u=a[1];return 0!==o.length&&u.push(o),u}var te,ne=r(e("./util")),re=r(e("./move")),ae=r(e("./pieces")),ie=r(e("./open")),oe=ne["default"].wrapGroup,ue=ne["default"].callUserFunction;t.exports=(te={playOpenSeries:d,playOpenPairs:s,playLeaveTaken:c,apiDrawMiddleEnd:p},a(te,"apiDrawMiddleEnd",p),a(te,"apiForceDrawMiddleEnd",f),a(te,"apiForceDrawMiddleEnd",f),a(te,"userMove",x),a(te,"userDrawLeft",M),a(te,"userBeginDrawMiddle",S),a(te,"userEndDrawMiddle",E),a(te,"selectSquare",K),a(te,"selectTop",C),a(te,"setSelected",T),a(te,"canOpenSeries",F),a(te,"canOpenPairs",N),a(te,"canLeaveTaken",_),a(te,"canCollectOpen",I),a(te,"stop",U),a(te,"cancelMove",H),a(te,"isDroppableOpens",q),a(te,"findBoardDragGroup",X),a(te,"getKeyAtDomPos",V),a(te,"getKeyAtDomPosOnPiece",J),a(te,"getPieceGroups",Z),a(te,"getPieceGroupSeries",Q),a(te,"getPieceGroupPairs",W),te)},{"./move":12,"./open":13,"./pieces":14,"./util":17}],6:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var a=r(e("merge")),i=r(e("./pieces"));t.exports=function(e,t){if(t)if(a["default"].recursive(e,t),e.fen){e.spectator&&(e.fen=e.povSide[0]+e.fen.slice(1)),e.animationHint?(e.animation.current.hint=e.animationHint,delete e.animationHint):e.animation.current.hint="";var n=i["default"].read(e.fen);e.pieces=n.pieces,e.discards=n.discards,e.opens=n.opens,e.middles=n.middles,delete e.fen}else e.animation.current.hint=""}},{"./pieces":14,merge:1}],7:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var a=r(e("./table")),i=r(e("./board")),o=r(e("./sorter")),u=r(e("./data")),l=r(e("./configure")),d=r(e("./util")),s=r(e("./anim")),c=r(e("./drag")),f=r(e("./pieces"));t.exports=function(e){var t=this;this.data=(0,u["default"])(e),this.data.flipPiece=function(e,t){var n=this;t&&!this.flippable.current.orig&&(this.flippable.current={orig:e},this.renderRAF(),setTimeout(function(){n.flippable.current.flip=!0,n.renderRAF(),setTimeout(function(){t.flip=!t.flip,n.flippable.current={},n.renderRAF()},600)},10))}.bind(this.data),this.getFen=function(){return f["default"].write(t.data.pieces)},this.getPieceGroupSeries=function(){return i["default"].getPieceGroupSeries(t.data)},this.getPieceGroupPairs=function(){return i["default"].getPieceGroupPairs(t.data)},this.set=(0,s["default"])(l["default"],this.data),this.apiMove=(0,s["default"])(a["default"].apiMove,this.data),this.apiDrawMiddleEnd=(0,s["default"])(i["default"].apiDrawMiddleEnd,this.data),this.playOpenSeries=(0,s["default"])(i["default"].playOpenSeries,this.data),this.playOpenPairs=(0,s["default"])(i["default"].playOpenPairs,this.data),this.playLeaveTaken=(0,s["default"])(i["default"].playLeaveTaken,this.data),this.sortPairs=(0,s["default"])(o["default"].sortPairs,this.data),this.sortSeries=(0,s["default"])(o["default"].sortSeries,this.data),this.canLeaveTaken=d["default"].partial(i["default"].canLeaveTaken,this.data),this.canCollectOpen=d["default"].partial(i["default"].canCollectOpen,this.data),this.canOpenSeries=d["default"].partial(i["default"].canOpenSeries,this.data),this.canOpenPairs=d["default"].partial(i["default"].canOpenPairs,this.data),this.stop=(0,s["default"])(function(e){i["default"].stop(e),c["default"].cancel(e)},this.data),this.onunload=function(){}}},{"./anim":3,"./board":5,"./configure":6,"./data":8,"./drag":9,"./pieces":14,"./sorter":15,"./table":16,"./util":17}],8:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var a=(r(e("merge")),r(e("./pieces"))),i=r(e("./configure"));t.exports=function(e){var t={povSide:"east",turnSide:"east",lastMove:null,withTore:!1,pieces:a["default"].readBoard(a["default"].mixed),discards:a["default"].readDiscards(a["default"].initialDiscards,"east"),opens:a["default"].readOpenGroups(a["default"].initialOpenGroups),middles:a["default"].readMiddles(a["default"].initialMiddles),selected:null,middleHolder:{current:!1,key:null,piece:null},viewOnly:!1,animation:{enabled:!0,duration:500,current:{}},draggable:{enabled:!0,distance:3,current:{}},movable:{board:!0,free:!0,events:{after:function(e,t){}}},flippable:{enabled:!0,current:{}},openable:{dests:[]},events:{move:function(e,t){}}};return(0,i["default"])(t,e||{}),t}},{"./configure":6,"./pieces":14,merge:1}],9:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:p["default"].rows,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:p["default"].columns;return{left:t.left+t.width*n[0]/a,top:t.top+t.height*n[1]/r,width:t.width/a,height:t.height/r}}function i(e,t){if((void 0===t.button||0===t.button)&&(t.stopPropagation(),t.preventDefault(),!e.viewOnly)){s=t.target;var n=e.selected,r=p["default"].eventPosition(t),i=e.boardBounds(),u=e.opensBounds(),l=e.topBounds(),d=c["default"].getKeyAtDomPosOnPiece(e,r,i);c["default"].selectSquare(e,d),d||(d=f["default"].getDrawKeyAtDomPos(e,r,l))&&c["default"].selectTop(e,d,n),!d&&n&&((d=f["default"].getOpensKeyAtDomPos(e,r,u))?f["default"].dropOpens(e,n,d):(d=f["default"].getDiscardKeyAtDomPos(e,r,l))&&f["default"].dropTop(e,n,d));var v=e.selected===d;if(v&&f["default"].isDraggable(e,d)){var m=p["default"].isBoardKey(d)?a(e,i,p["default"].key2pos(d)):a(e,l,p["default"].topKey2pos(d),p["default"].topRows,p["default"].topColumns),g=c["default"].findBoardDragGroup(e,d)[0];e.draggable.current={dragGroup:g,orig:d,rel:r,epos:r,pos:[0,0],dec:[r[0]-(m.left+m.width/2),r[1]-(m.top+m.height/2)],boardBounds:i,opensBounds:u,topBounds:l,started:!1}}o(e)}}function o(e){p["default"].requestAnimationFrame(function(){var t=e.draggable.current;t.orig&&(!t.started&&p["default"].distance(t.epos,t.rel)>=e.draggable.distance&&(t.started=!0),t.started&&(t.pos=[t.epos[0]-t.rel[0],t.epos[1]-t.rel[1]],t.over=c["default"].getKeyAtDomPosOnPiece(e,t.epos,t.boardBounds,t.orig),!t.over&&p["default"].isBoardKey(t.orig)&&(t.over=f["default"].getOpensKeyAtDomPos(e,t.epos,t.opensBounds)||f["default"].getDiscardKeyAtDomPos(e,t.epos,t.topBounds)))),e.render(),t.orig&&o(e)})}function u(e,t){e.draggable.current.orig&&(e.draggable.current.epos=p["default"].eventPosition(t))}function l(e,t){var n=e.draggable,r=n.current?n.current.orig:null;if(r){var a=n.current.over;n.current.started&&(c["default"].setSelected(e,null),c["default"].userMove(e,r,a)||f["default"].dropOpens(e,r,a)||f["default"].dropTop(e,r,a)||c["default"].userDrawLeft(e,r,a)||c["default"].userEndDrawMiddle(e,r,a)),n.current={}}}function d(e){e.draggable.current.orig&&(e.draggable.current={},c["default"].selectSquare(e,null))}var s,c=r(e("./board")),f=r(e("./table")),p=r(e("./util"));t.exports={start:i,move:u,end:l,cancel:d}},{"./board":5,"./table":16,"./util":17}],10:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){t.stopPropagation(),t.preventDefault(),u["default"].cancelMove(e);var n=l["default"].eventPosition(t),r=e.boardBounds(),a=u["default"].getKeyAtDomPosOnPiece(e,n,r),i=e.pieces[a];e.flipPiece(a,i)}function i(e,t){}function o(e,t){}var u=r(e("./board")),l=r(e("./util"));t.exports={start:a,move:i,end:o}},{"./board":5,"./util":17}],11:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e){var t=new i["default"](e);return(0,l["default"])(t)}var i=r(e("./ctrl")),o=r(e("./util")),u=r(e("./move")),l=r(e("./api")),d=r(e("./anim")),s=r(e("./drag"));t.exports=a,t.exports.controller=i["default"],t.exports.util=o["default"],t.exports.move=u["default"],t.exports.anim=d["default"],t.exports.drag=s["default"]},{"./anim":3,"./api":4,"./ctrl":7,"./drag":9,"./move":12,"./util":17}],12:[function(e,t,n){"use strict";var r="dm",a="dl",i="dd",o="lt",u="ss",l="os",d="op",s="co",c="dos",f="dop",p="dds",v="ddp",m="l",g="r",h="p";t.exports={drawMiddle:r,drawLeft:a,discard:i,leaveTaken:o,sign:u,openSeries:l,openPairs:d,collectOpen:s,dropOpenSeries:c,dropOpenPairs:f,dropLeft:m,dropRight:g,dropReplace:h,discardEndSeries:p,discardEndPairs:v}},{}],13:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){return u(e)||o(e,t)||i()}function i(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function o(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(l){a=!0,i=l}finally{try{r||null==u["return"]||u["return"]()}finally{if(a)throw i}}return n}function u(e){if(Array.isArray(e))return e}function l(e,t){return e.length===t.length&&e.every(function(e,n){return e===t[n]})}function d(e,t){return t.every(function(t,n){return t.color===e[n]})}function s(e,t){if(e.length<3)return!1;var n=e.length,r=e[0].color,a=e.map(function(e){return e.key}),i=a.slice(0).reverse(),o=w["default"].seriesByColor(r);t&&(o=o.slice(0),o.push(o[0]));for(var u=0;u<=o.length-n;u++){var d=o.slice(u,u+n);if(l(d,a)|l(d,i))return!0}return!1}function c(e){var t=e.length,n=e[0].number;return!!(3===t|4===t)&&(!!e.every(function(e){return e.number===n})&&b.some(function(t){return d(t.slice(0,e.length),e)}))}function f(e,t){var n=w["default"].makePiece(t.c,t.n);return n.isFake=!0,w["default"].pieceFake(e)?n:e}function p(e,t){return!e.isFake&&e.key===t.key}function v(e,t){function n(e,t){return e.filter(function(e){return t.indexOf(e)<0})}function r(e,t){return e.key===t.key}function i(e,t){var r=["r","g","b","l"],a=e.filter(function(e){return!p(e,t)}),i=n(r,a.map(function(e){return e.c}));if(i.length<1)return e;if(a.length<1)return e;if(!(a.length<e.length))return e;var o=i[0],u=a[0].n,l=w["default"].makePiece(o,u);return a.push(l),a}function o(e,t){var n;if(0===e.length)return e;if(e.length<3)return e;var i=a(e,3),u=i[0],l=i[1],d=i[2],s=[u,l,d];if(n=e.slice(3,e.length),p(u,t))r(w["default"].pieceUp(l),d)?s=[w["default"].pieceDown(l),l,d]:r(w["default"].pieceDown(l),d)&&(s=[w["default"].pieceUp(l),l,d]);else if(p(l,t))r(w["default"].pieceUp(w["default"].pieceUp(u)),d)?s=[u,w["default"].pieceUp(u),d]:r(w["default"].pieceDown(w["default"].pieceDown(u)),d)&&(s=[u,w["default"].pieceDown(u),d]);else{if(!p(d,t))return n=o(e.slice(1,e.length),t),n.unshift(e[0]),n;r(w["default"].pieceUp(u),l)?s=[u,l,w["default"].pieceUp(l)]:r(w["default"].pieceDown(u),l)&&(s=[u,l,w["default"].pieceDown(l)])}return s.concat(n)}function u(e,t){if(2!=e.length)return e;var n=a(e,2),r=n[0],i=n[1];return p(r,t)?[i,i]:p(i,t)?[r,r]:e}if(e.filter(function(e){return p(e,t)}).length>1)return e;if(e.length<3)return u(e,t);var l=e.filter(function(e){return!p(e,t)});return l.every(function(e){return e.n===l[0].n})?i(e,t):l.every(function(e){return e.c===l[0].c})?o(e,t):e}function m(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=w["default"].pieceUp(t),a=e.map(function(e){return f(e,r)}),i=v(a,r);return s(i,n)|c(i)}function g(e,t){if(2!==e.length)return!1;var n=w["default"].pieceUp(t),r=e.map(function(e){return f(e,n)}),i=v(r,n),o=a(i,2),u=o[0],l=o[1];return u.key===l.key}function h(e,t,n){var r=[],a=w["default"].pieceUp(n);return t=f(t,a),e.series.forEach(function(i,o){var u=i.slice(0),l=i.slice(0);u.splice(0,0,t),l.splice(i.length,0,t),m(u,n)&&r.push(w["default"].getOpenSerieKeyFromGroupIndex(e,o,0)),m(l,n)&&r.push(w["default"].getOpenSerieKeyFromGroupIndex(e,o,i.length+1));var d=i.map(function(e){return p(e,a)?t:e});if(m(d,n)){var s;i.forEach(function(e,t){p(e,a)&&(s=t)}),r.push(w["default"].getOpenSerieKeyFromGroupIndex(e,o,s+1))}}),e.pairs.forEach(function(i,o){var u=i.map(function(e){return p(e,a)?t:e});if(g(u,n)){var l=y(i,a);r.push(w["default"].getOpenPairKeyFromGroupIndex(e,o,l))}}),r}function y(e,t){var n;return e.forEach(function(e,r){p(e,t)&&(n=r)}),n}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=void 0;var w=r(e("./pieces")),b=function(){var e=w["default"].colors,t=[];for(var n in e)for(var r in e)for(var a in e)for(var i in e)n!==r&&n!==a&&n!==i&&r!==a&&r!==i&&a!==i&&t.push([e[n],e[r],e[a],e[i]]);return t}(),P={compute:h,series:m,pairs:g,findOkeyIndex:y};n["default"]=P},{"./pieces":14}],14:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){return u(e)||o(e,t)||i()}function i(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function o(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(l){a=!0,i=l}finally{try{r||null==u["return"]||u["return"]()}finally{if(a)throw i}}return n}function u(e){if(Array.isArray(e))return e}function l(e){var t=[];for(var n in B)t.push(E(e,n).key);return t}function d(e){var t={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9},n=t[e[0]],r=t[e[1]];return void 0===r?void 0===n?{left:e.slice(1)}:{number:n,left:e.slice(1)}:{number:10*n+r,left:e.slice(2)}}function s(e){var t=/([l|r|p])(\d\d?)/,n=e.match(t),r=n[1],a=parseInt(n[2]);return{type:r,groupIndex:a}}function c(e){var t=e[0],n=e[1],r=e[2],a=2;return D[t]?(B[n+r]&&(n+=r,a=3),{piece:E(t,n),left:e.slice(a)}):{left:e.slice(1)}}function f(e){var t=[],n=[];for(e+="\n";e.length>0;){var r=c(e);r.piece?n.push(r.piece):(n.length>0&&t.push(n),n=[]),e=r.left}return t}function p(e){for(var t=[],n=0;e.length>0;){var r=c(e);r.piece&&(t[n]=r.piece),n++,e=r.left}return t}function v(e){var t={};e=p(e);for(var n=0,r=0;r<e.length;r++){if(e[r]){for(;n<100&&!A["default"].isAllowedBoardKey(A["default"].encodeKey(n,"b"));)n++;t[A["default"].encodeKey(n,"b")]=e[r],n++}n++}return t}function m(e,t){e=e.split(" ");var n={};return A["default"].allSides.map(function(e){return A["default"].findPov(t,e)}).forEach(function(t,r){var a=p(e[r]||"");n[A["default"].discardByPov(t)]=a}),n}function g(e){var t=e.split("/"),n=a(t,2),r=n[0],i=n[1];r=f(r),i=f(i);var o=h(r,i);return{series:r,pairs:i,layout:o,relayout:function(e){e.opens.layout=h(e.opens.series,e.opens.pairs)}}}function h(e,t){var n,r,a,i,o,u={},l={series:{},pairs:{}},d=[],s=0;for(n=0;n<e.length;n++){var c=e[n];i=(d[s]||1)-1,o=s,l.series[A["default"].miniPos2key([i,o])]=n;for(var f=0;f<c.length;f++)a=d[s]||1,r=A["default"].miniPos2key([a,s]),u[r]=c[f],d[s]=a+1;d[s]+=2,s++,s>=A["default"].miniRows&&(s=0)}for(d=[],n=0,f=0,r=0,a=0,s=0,n=0;n<t.length;n++){var p=t[n];for(i=(d[s]||A["default"].miniColumns-1)-1,o=s,l.pairs[A["default"].miniPos2key([i,o])]=n,f=p.length-1;f>=0;f--)a=d[s]||A["default"].miniColumns-1,r=A["default"].miniPos2key([a,s]),u[r]=p[f],d[s]=a-1;d[s]-=1,s++,s>=A["default"].miniRows&&(s=0)}return{layout:u,groupMap:l}}function y(e,t,n){for(var r in e)if(e[r]===t){var i=A["default"].miniKey2pos(r),o=a(i,2),u=o[0],l=o[1],d=[u+n,l];return A["default"].miniPos2key(d)}}function w(e,t,n){var r=e.layout.groupMap.pairs;return y(r,t,n)}function b(e,t,n){var r=e.layout.groupMap.series;return y(r,t,n)}function P(e,t){var n=e.opens,r=n.series,i=n.layout.groupMap,o=a(t,2),u=o[0],l=o[1];for(var d in i.series){var s=i.series[d],c=r[s],f=A["default"].miniKey2pos(d),p=a(f,2),v=p[0],m=p[1],g=u-v;if(!(g<0||g>c.length+1||l!=m))return[s,g]}}function k(e,t){var n=e.opens,r=n.pairs,i=n.layout.groupMap,o=a(t,2),u=o[0],l=o[1];for(var d in i.pairs){var s=i.pairs[d],c=(r[s],A["default"].miniKey2pos(d)),f=a(c,2),p=f[0],v=f[1],m=u-p;if(!(m<0||m>1||l!=v))return[s,m]}}function O(e){var t={},n=d(e);return t[A["default"].middleCount]=n.number,n=c(n.left),t[A["default"].gosterge]=n.piece,t}function x(e){e=e.split("/");var t=2,n=3,r=4,a=1,i=0,o={e:"east",w:"west",n:"north",s:"south"}[e[i]];return{pieces:v(e[t]),discards:m(e[n],o),opens:g([e[r],e[r+1]].join("/")),middles:O(e[a])}}function S(e){var t=A["default"].allKeys.map(function(t){return e[t]}).map(function(e){return e&&e.key||" "}).join("");return t.replace(/([^\s])\s/g,"$1")}function E(e,t){return{color:D[e],number:B[t],c:e,n:parseInt(t),key:e+t}}function M(e){var t=e.c,n=e.n%13+1;return E(t,n)}function C(e){var t=e.c,n=(e.n+11)%13+1;return E(t,n)}function K(e){return"fake"===e.color}function T(e){return e.length>0&&14===e.match(j).length}var A=r(e("./util")),D={b:"blue",r:"red",g:"green",l:"black",f:"fake"},B={1:"one",2:"two",3:"three",4:"four",5:"five",6:"six",7:"seven",8:"eight",9:"nine",10:"ten",11:"eleven",12:"twelve",13:"thirteen"},j=/[f|r|l|b|g]\d\d?/g,R=function(){var e={};for(var t in D)e[D[t]]=l(t);return e}(),L=function(e){return R[e]},G="g7r7b7l7 g8r8b8l8 g13r13b13l13 l12 r6r5r4r12r13 g9g8g13 g6 l8l7l12",F="r1g1l1b1 r2g2l2b2 r3g3l3b3 r4g4l4b4 r13g13l13b13 r1g1l1b1",N="r1r2 r3r4r5r6r7r8r9r10r11r12r13l1l2l3l4l5l6l7   g1g2  l3",_="20l3",I="b1  r1r2 g1",H="r8l8b8\nb1b2b3\nb9b10b11b12\nl13r13b13\nr12b12g12\nr7r8r9r10\ng10g11g12\nl6b6r6\nl9l10l11\nb7l7r7g7\nr13l13b13g13\nl10r10b10g10\nl6r6g6\nl1b1g1\n/r1r1\ng1g1\ng2g2\ng3g3\ng4g4\ng5g5\ng6g6\ng7g7\ng8g8\ng9g9\ng10g10\ng11g11\ng12g12\n\n";t.exports={validDuzOkeyGroupFen:T,initial:N,rainbow:F,mixed:G,write:S,read:x,readDropPos:s,readPiece:c,readBoard:v,initialMiddles:_,initialDiscards:I,initialOpenGroups:H,readMiddles:O,readDiscards:m,readPieceGroup:f,readOpenGroups:g,layoutOpens:h,seriesByColor:L,makePiece:E,pieceUp:M,pieceDown:C,pieceFake:K,colors:D,getOpenSerieKeyFromGroupIndex:b,getOpenPairKeyFromGroupIndex:w,getOpenSerieFromPos:P,getOpenPairFromPos:k}},{"./util":17}],15:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e){return u(e)||o(e)||i()}function i(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function o(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function u(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e){function t(e,n,r){for(var i in r){var o=r[i];if(i!==n&&o.c===e.c){if(1===o.n&&2===e.n)return[l({},i,o)];if(13===o.n&&1===e.n||o.n===e.n-1)return[l({},i,o)].concat(a(t(o,i,r)))}}return[]}function n(e,t,r){for(var i in r){var o=r[i];if(i!==t&&o.c===e.c){if(1===o.n&&13===e.n)return[l({},i,o)];if(o.n===e.n+1)return[l({},i,o)].concat(a(n(o,i,r)))}}return[]}function r(e,t,n){var r={};for(var a in n){var i=n[a];a!==t&&i.n===e.n&&i.c!==e.c&&(r[i.c]=l({},a,i))}return Object.values(r)}function i(e){var a={};for(var i in e){var o=e[i];o&&(a[i]={downs:t(o,i,e),ups:n(o,i,e),same:r(o,i,e)})}var u={type:null,key:null,value:0};for(var d in a){var s=a[d];["downs","ups","same"].map(function(e){s[e].length>=u.value&&(u.type=e,u.key=d,u.value=s[e].length)})}var c=a[u.key][u.type];return"downs"===u.type?c.unshift(l({},u.key,e[u.key])):c.unshift(l({},u.key,e[u.key])),c}for(var o in e.pieces)e.pieces[o]||delete e.pieces[o];var u=Object.assign({},e.pieces);for(o in e.pieces)e.pieces[o]=void 0,delete e.pieces[o];for(var d=1;Object.keys(u).length>0;){var s=i(u),c=s.length;d=f["default"].nextIteratorForGroup(d,c),s.forEach(function(t,n){for(var r in t){var a=t[r];e.pieces[f["default"].iterator2Key(d+2*n)]=a,u[r]=void 0,delete u[r]}}),d+=2*c+1}console.log(e.pieces)}function s(e){var t={};for(var n in e.pieces){var r=e.pieces[n];r&&(t[r.key]?t[r.key]++:t[r.key]=1,delete e.pieces[n])}var a=1;for(var i in t){var o=t[i];a=f["default"].nextIteratorForGroup(a,o);for(var u=0;u<o;u++)e.pieces[f["default"].iterator2Key(a+2*u)]=c["default"].readPiece(i).piece;a+=2*o+1}}var c=r(e("./pieces")),f=r(e("./util"));t.exports={sortPairs:s,sortSeries:d}},{"./pieces":14,"./util":17}],16:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){return u(e)||o(e,t)||i()}function i(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function o(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(l){a=!0,i=l}finally{try{r||null==u["return"]||u["return"]()}finally{if(a)throw i}}return n}function u(e){if(Array.isArray(e))return e}function l(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.piece,a=n.group,i=n.pos,o=R["default"].findPov(e.povSide,e.turnSide);if(e.turnSide!==e.povSide||e.spectator)switch(t){case L["default"].drawMiddle:v(e),e.animation.current.hint=L["default"].drawMiddle;break;case L["default"].drawLeft:m(e,R["default"].drawByPov(o)),e.animation.current.hint=L["default"].drawLeft;break;case L["default"].discard:r=G["default"].readPiece(r).piece,p(e,R["default"].discardByPov(o),r),e.animation.current.hint=L["default"].discard;break;case L["default"].leaveTaken:r=G["default"].readPiece(r).piece,g(e,R["default"].drawByPov(o),r),e.animation.current.hint=L["default"].leaveTaken;break;case L["default"].openSeries:a=G["default"].readPieceGroup(a),c(e,a),e.animation.current.hint=L["default"].openSeries;break;case L["default"].openPairs:a=G["default"].readPieceGroup(a),f(e,a),e.animation.current.hint=L["default"].openSeries;break;case L["default"].dropOpenSeries:r=G["default"].readPiece(r).piece,i=G["default"].readDropPos(i),d(e,r,i);break;case L["default"].dropOpenPairs:r=G["default"].readPiece(r).piece,i=G["default"].readDropPos(i),s(e,r,i);break;default:console.error("unknown move")}else if(e.spectator)t===L["default"].leaveTaken&&(r=G["default"].readPiece(r).piece,g(e,R["default"].drawByPov(o),r),e.animation.current.hint=L["default"].leaveTaken);else switch(t){case L["default"].discard:r=G["default"].readPiece(r).piece,w(e,r,R["default"].discards[2]),e.animation.current.hint=L["default"].discard;break;case L["default"].drawMiddle:r=G["default"].readPiece(r).piece,e.middleHolder.current?N["default"].apiDrawMiddleEnd(e,r):N["default"].apiForceDrawMiddleEnd(e,r),e.animation.current.hint=L["default"].drawMiddle;break;case L["default"].leaveTaken:N["default"].playLeaveTaken(e,r)}}function d(e,t,n){var r=n.type,a=n.groupIndex,i=e.opens.series[a],o=r!==L["default"].dropReplace?0:1,u=0;if(r===L["default"].dropLeft)u=0;else if(r===L["default"].dropRight)u=i.length+1;else{var l=G["default"].pieceUp(e.middles[R["default"].gosterge]);u=F["default"].findOkeyIndex(i,l)+1}i.splice(u-o,o,t),e.opens.relayout(e)}function s(e,t,n){var r=n.groupIndex,a=e.opens.pairs[r],i=G["default"].pieceUp(e.middles[R["default"].gosterge]),o=F["default"].findOkeyIndex(a,i);a.splice(o,1,t),e.opens.relayout(e)}function c(e,t){var n=t,r=e.opens.series.concat(n);e.opens.series=r,e.opens.relayout(e)}function f(e,t){var n=t,r=e.opens.pairs.concat(n);e.opens.pairs=r,e.opens.relayout(e)}function p(e,t,n){return e.discards[t].unshift(n),e.lastMove=[t],!0}function v(e){return e.middles[R["default"].middleCount]--,e.lastMove=[R["default"].middleCount],!0}function m(e,t){return e.discards[t].shift(),!0}function g(e,t,n){return e.discards[t].unshift(n),!0}function h(e,t,n,r){if(!e.pieces[t]||!r)return!1;var i=e.pieces[t];U(R["default"].partial(e.events.move,L["default"].dropOpenSeries,I(i.key)));var o=a(r,2),u=o[0],l=o[1],d=e.opens.series[u],s=O(d,l),c=s!==L["default"].dropReplace?0:1;if(d.splice(l-c,c,i),e.opens.relayout(e),delete e.pieces[t],s===L["default"].dropReplace){var f=G["default"].pieceUp(e.middles[R["default"].gosterge]);e.pieces[t]=f}return!0}function y(e,t,n,r){if(!e.pieces[t]||!r)return!1;var i=e.pieces[t];U(R["default"].partial(e.events.move,L["default"].dropOpenPairs,I(i.key)));var o=a(r,2),u=o[0],l=o[1],d=e.opens.pairs[u];d.splice(l,1,i),e.opens.relayout(e),delete e.pieces[t];var s=G["default"].pieceUp(e.middles[R["default"].gosterge]);return e.pieces[t]=s,!0}function w(e,t,n){for(var r in e.pieces){var a=e.pieces[r];if(a&&R["default"].pieceEqual(t,a))return b(e,r,n),!0}return!1}function b(e,t,n){var r=e.pieces[t];return!!r&&(U(R["default"].partial(e.events.move,L["default"].discard,I(r.key))),e.discards[n].unshift(e.pieces[t]),delete e.pieces[t],e.lastMove=[n],!0)}function P(e,t){var n=e.pieces[t];return!!n&&(!!R["default"].pieceEqual(n,e.middles[R["default"].gosterge])&&(U(R["default"].partial(e.events.move,L["default"].sign,I(n.key))),!0))}function k(e,t){var n=e.pieces[t];if(!n)return!1;delete e.pieces[t];var r=(G["default"].write(e.pieces),N["default"].getPieceGroupSeries(e)),a=N["default"].getPieceGroupPairs(e);if(G["default"].validDuzOkeyGroupFen(r))U(R["default"].partial(e.events.move,L["default"].discardEndSeries,H(r)));else{if(!G["default"].validDuzOkeyGroupFen(a))return e.pieces[t]=n,!1;U(R["default"].partial(e.events.move,L["default"].discardEndPairs,H(a)))}return!0}function O(e,t){return 0===t?L["default"].dropLeft:t===e.length+1?L["default"].dropRight:L["default"].dropReplace}function x(e,t,n){if(n&&R["default"].isOpensKey(n)&&T(e,t,n)){var r,i,o,u,l,d=e.pieces[t],s=G["default"].getOpenSerieFromPos(e,R["default"].miniKey2pos(n));if(s){var c=a(s,2);r=c[0],i=c[1],o=e.opens.series[r],u=O(o,i),l=u+r}if(h(e,t,n,s))return U(R["default"].partial(e.movable.events.after,L["default"].dropOpenSeries,_(d.key,l))),!0;var f=G["default"].getOpenPairFromPos(e,R["default"].miniKey2pos(n));if(f){var p=a(f,2);r=p[0],i=p[1],o=e.opens.pairs[r],u=O(o,i),l=u+r}if(y(e,t,n,f))return U(R["default"].partial(e.movable.events.after,L["default"].dropOpenPairs,_(d.key,l))),!0}return!1}function S(e,t,n){var r=e.pieces[t];if(n&&n===R["default"].discards[2]){if(A(e,t,n)&&b(e,t,n))return U(R["default"].partial(e.movable.events.after,L["default"].discard,I(r.key))),!0}else if(n===R["default"].gosterge){if(B(e,t)&&P(e,t))return U(R["default"].partial(e.movable.events.after,L["default"].sign,I(r.key))),!0;if(D(e,t)&&k(e,t)){var a=(G["default"].write(e.pieces),N["default"].getPieceGroupSeries(e)),i=N["default"].getPieceGroupPairs(e);return G["default"].validDuzOkeyGroupFen(a)?U(R["default"].partial(e.movable.events.after,L["default"].discardEndSeries,H(a))):G["default"].validDuzOkeyGroupFen(i)&&U(R["default"].partial(e.movable.events.after,L["default"].discardEndPairs,H(i))),!0}}return!1}function E(e,t){M(e,t)}function M(e,t){e.selected=t}function C(e,t){return R["default"].isMiddleKey(t)||R["default"].isDrawLeftKey(t)?e.povSide===e.turnSide:R["default"].isBoardKey(t)}function K(e){return e.povSide===e.turnSide}function T(e,t,n){var r=e.middles[R["default"].gosterge];return N["default"].isDroppableOpens(e,t)&&R["default"].isBoardKey(t)&&R["default"].isOpensKey(n)&&R["default"].containsX(e.movable.dests,L["default"].dropOpenSeries)&&R["default"].containsX(e.movable.dests,L["default"].dropOpenPairs)&&R["default"].containsX(F["default"].compute(e.opens,e.pieces[t],r),n)}function A(e,t,n){return K(e)&&R["default"].containsX(e.movable.dests,L["default"].discard)}function D(e,t){return K(e)&&R["default"].containsX(e.movable.dests,L["default"].discardEndSeries)}function B(e,t){return K(e)&&R["default"].containsX(e.movable.dests,L["default"].showSign)}function j(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:R["default"].topColumns,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:R["default"].topRows;return function(r,a,i){if(i||r.bounds){i=i||r.bounds();var o=Math.floor(t*((a[0]-i.left)/i.width)),u=Math.floor(n*((a[1]-i.top)/i.height));return u>=0&&u<n&&o>=0&&o<t?e(u,o):void 0}}}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=void 0;var R=r(e("./util")),L=r(e("./move")),G=r(e("./pieces")),F=r(e("./open")),N=r(e("./board")),_=R["default"].wrapDrop,I=R["default"].wrapPiece,H=R["default"].wrapGroup,U=R["default"].callUserFunction,q=j(function(e,t){return R["default"].miniPos2key([t,e])},R["default"].miniColumns,R["default"].miniRows),X=j(function(e,t){if(e===R["default"].topRows-1){if(0===t)return R["default"].discards[1];if(t===R["default"].topColumns-4)return R["default"].middleCount}}),z=j(function(e,t){if(e===R["default"].topRows-1){if(t===R["default"].topColumns-1)return R["default"].discards[2];if(t===R["default"].topColumns-3)return R["default"].gosterge}}),$={apiMove:l,selectTop:E,dropTop:S,dropOpens:x,isDraggable:C,getDrawKeyAtDomPos:X,
getDiscardKeyAtDomPos:z,getOpensKeyAtDomPos:q};n["default"]=$},{"./board":5,"./move":12,"./open":13,"./pieces":14,"./util":17}],17:[function(e,t,n){"use strict";function r(e,t){return _[e][t]}function a(e,t){return e.color===t.color&&e.number===t.number}function i(e,t){for(var n=[],r=0;r<e;r++)for(var a=0;a<t;a++)n.push([a,r]);return n}function o(e,t){return t+e}function u(e,t){return parseInt(e.slice(1))}function l(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return o(u(e)-t,W)}function d(e){return e[0]===W}function s(e){return e[0]===Z}function c(e){return e===J}function f(e){return e===$[1]}function p(e){var t=e[1]*B+e[0];return o(t,W)}function v(e){return e=u(e),[e%B,Math.floor(e/B)]}function m(e){return o(e,W)}function g(e,t){function n(e){var t=Math.floor(e/B),n=e%B;return[n,t]}function r(e){return e[1]*B+e[0]}var a=n(e),i=n(e+2*t);return a[1]!==i[1]?r([1,1]):(1===a[1]&&0===a[0]&&(a[0]=1),r(a))}function h(e){return Y[e]}function y(e){var t=e[1]*G+e[0];return o(t,Z)}function w(e){return e=u(e),[e%G,Math.floor(e/G)]}function b(e){var t=[];for(var n in e)e[n]&&t.push(n);return t.join(" ")}function P(e,t){return e&&e.indexOf(t)!==-1}function k(e){return e.touches?[e.targetTouches[0].clientX,e.targetTouches[0].clientY]:[e.clientX,e.clientY]}function O(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2))}function x(){return"transform"in document.body.style?"transform":"webkitTransform"in document.body.style?"webkitTransform":"mozTransform"in document.body.style?"mozTransform":"oTransform"in document.body.style?"oTransform":"msTransform"}function S(){return D||(D=x()),D}function E(e){return"translate("+e[0]+"px,"+e[1]+"px)"}function M(e,t){return e.bind.apply(e,[null].concat(t))}function C(){return M(arguments[0],Array.prototype.slice.call(arguments,1))}function K(e){return 2===e.buttons||2===e.button}function T(e){var t,n=function(){return void 0===t&&(t=e()),t};return n.clear=function(){t=void 0},n}function A(e){setTimeout(e,1)}var D,B=32,j=2,R=16,L=7,G=20,F=8,N=["east","west","north","south"],_={east:{east:"down",west:"up",north:"right",south:"left"},west:{east:"up",west:"down",north:"left",south:"right"},north:{east:"left",west:"right",north:"down",south:"up"},south:{east:"right",west:"left",north:"up",south:"down"}},I={up:0,left:1,down:2,right:3},H={up:3,left:0,down:1,right:2},U={up:[.5,0],left:[0,.5],right:[1,.5],down:[.5,1]},q=function(e){return U[e]},X=function(e){return $[I[e]]},z=function(e){return $[H[e]]},$=["dup","dleft","ddown","dright"],J="mmiddleCount",V="mgosterge",Y={dup:[0,0],dleft:[0,L-1],ddown:[R-1,L-1],dright:[R-1,0],mmiddleCount:[R-4,L-1],mgosterge:[R-3,L-1]},Q={color:"empty",number:1},W="b",Z="o",ee=i(j,B),te=i(F,G),ne=[[0,0],[30,0],[31,0],[32,0],[62,0],[63,0]].map(p),re=function(e){return ne.indexOf(e)===-1},ae=ee.map(p),ie=ae.filter(re),oe=function(e){return ie.indexOf(e)!==-1},ue=te.map(y),le=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.piece=e,t},de=function(e){return{group:e}},se=function(e,t){return{piece:e,pos:t}};t.exports={topColumns:R,topRows:L,columns:B,rows:j,emptyPiece:Q,pieceEqual:a,allSides:N,allPos:ee,allKeys:ae,topKey2pos:h,pos2key:p,key2pos:v,iterator2Key:m,nextIteratorForGroup:g,miniColumns:G,miniRows:F,miniAllPos:te,miniAllKeys:ue,miniPos2key:y,miniKey2pos:w,encodeKey:o,decBoardKey:l,notAllowedBoardKeys:ne,isAllowedBoardKey:re,isAllAllowedBoardKey:oe,allAllowedBoardKeys:ie,isBoardKey:d,isOpensKey:s,isMiddleKey:c,isDrawLeftKey:f,findPov:r,vectorByPov:q,drawByPov:z,discardByPov:X,discards:$,middleCount:J,gosterge:V,classSet:b,containsX:P,eventPosition:k,distance:O,transformProp:S,translate:E,requestAnimationFrame:(window.requestAnimationFrame||window.setTimeout).bind(window),partialApply:M,partial:C,isRightButton:K,memo:T,wrapPiece:le,wrapGroup:de,wrapDrop:se,callUserFunction:A}},{}],18:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e){return e.color+" "+e.number}function i(e){return{left:e[0]*(100/T["default"].columns)+"%",top:e[1]*(100/T["default"].rows)+"%"}}function o(e){return{left:e[0]*(100/T["default"].miniColumns)+"%",top:e[1]*(100/T["default"].miniRows)+"%"}}function u(e,t,n,r){var i=(e.data,{key:n,style:o(t),"class":a(r)+" mini"});if(e.data.animation.current.anims){var u=e.data.animation.current.anims[n],l=e.data.animation.current.scales[n];u&&(i["class"]+=" animating",i.style[T["default"].transformProp()]=T["default"].translate(u[1]),l&&(i.style[T["default"].transformProp()]+=" scale(".concat(l[0],", ").concat(l[1],")"),i.style.transformOrigin="center"))}return{tag:"piece",attrs:i}}function l(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=e.data,o=T["default"].classSet({selected:i.selected===t,"last-move":i.lastMove&&T["default"].containsX(i.lastMove,t)}),u={style:{},"class":[a(n),t,o].join(" "),"data-middle-count":e.data.middles[t]},l=e.data.draggable.current;if(r&&l.orig===t)u.style[T["default"].transformProp()]=T["default"].translate([l.pos[0]+l.dec[0],l.pos[1]+l.dec[1]]),u["class"]+=" dragging";else if(!r&&e.data.animation.current.anims){var d=e.data.animation.current.anims[t];d&&(u["class"]+=" animating",u.style[T["default"].transformProp()]=T["default"].translate(d[1]))}return{tag:"piece",attrs:u}}function d(e,t,n,r){var i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:t,u=e.data,l=T["default"].classSet({selected:u.selected===t}),d={style:{},"class":[a(n),t,l].join(" ")};r&&(d["class"]+=" "+r);var s=e.data.draggable.current;if(i&&s.orig===t)d.style[T["default"].transformProp()]=T["default"].translate([s.pos[0]+s.dec[0],s.pos[1]+s.dec[1]]),d["class"]+=" dragging";else if(i&&e.data.animation.current.anims){var c=e.data.animation.current.anims[o];c&&(d["class"]+=" animating",d.style[T["default"].transformProp()]=T["default"].translate(c[1]))}return{tag:"piece",attrs:d}}function s(e,t,n){var r=(e.data,T["default"].classSet({"piece-holder":!0})),a={style:{},"class":[t,r,n].join(" ")};return{tag:"div",attrs:a}}function c(e,t,n,r){var a="flipper"+(n?" hover":"")+" "+r,i={top:0,left:0},o=e.attrs.style;e.attrs.style=i,t.attrs.style=i;var u={"class":a,style:o};return{tag:"div",attrs:u,children:[{tag:"div",attrs:{"class":"front"},children:[e]},{tag:"div",attrs:{"class":"back"},children:[t]}]}}function f(e,t,n,r,o){var u=e.data,l=T["default"].classSet({selected:u.selected===n}),d={key:n,style:i(t),"class":[a(r),l].join(" ")};o&&(d["class"]+=" "+o);var s=e.data.draggable.current;if(s.dragGroup&&s.dragGroup.indexOf(n)!==-1?(d.style[T["default"].transformProp()]=T["default"].translate([s.pos[0]+s.dec[0],s.pos[1]+s.dec[1]]),d["class"]+=" group dragging"):s.orig===n&&(s.over&&T["default"].isOpensKey(s.over)&&(d.style.width=s.opensBounds.width/T["default"].miniColumns+"px",d.style.height=s.opensBounds.height/T["default"].miniRows+"px"),d.style[T["default"].transformProp()]=T["default"].translate([s.pos[0]+s.dec[0],s.pos[1]+s.dec[1]]),d["class"]+=" dragging"),e.data.animation.current.anims){var c=e.data.animation.current.anims[n];c&&(d["class"]+=" animating",d.style[T["default"].transformProp()]=T["default"].translate(c[1]))}return{tag:"piece",attrs:d}}function p(e,t,n){return{tag:"div",attrs:{"class":e+" oc "+n}}}function v(e,t,n){return{tag:"div",attrs:{style:o(n),"class":e+" oc"}}}function m(e,t,n){return{tag:"div",attrs:{style:i(n),"class":e}}}function g(e){function t(e){return{tag:"div",attrs:{"class":"wood "+e}}}var n,r=e.data,a=T["default"].allPos,i=[];i.push(t("left"),t("right"));for(var o=0;o<a.length;o++){var u=T["default"].pos2key(a[o]),l=r.pieces[u];if(l){var d=f(e,a[o],u,l);if(r.flippable.current.orig===u){var s,p,v=r.flippable.current.flip,g=f(e,a[o],u,T["default"].emptyPiece);l.flip?(s=g,p=d):(s=d,p=g),i.push(c(s,p,v))}else l.flip&&(d=f(e,a[o],u,T["default"].emptyPiece)),i.push(d)}r.draggable.current.over===u&&(n=m("drag-over",e,a[o]))}return r.middleHolder.key&&i.push(f(e,T["default"].key2pos(r.middleHolder.key),r.middleHolder.key,T["default"].emptyPiece,"loading")),n&&i.push(n),{tag:"div",attrs:{config:function(t,n,r){n||(e.data.boardBounds=T["default"].memo(t.getBoundingClientRect.bind(t)))},"class":"og-board"},children:i}}function h(e,t){for(var n=e.data,r=T["default"].miniAllPos,a=[],i=[],o=0;o<r.length;o++){var l=T["default"].miniPos2key(r[o]),d=t[l];if(d&&a.push(u(e,r[o],l,d)),e.data.animation.current.anims){var s=e.data.animation.current.anims[l];d=e.data.animation.current.extra[l],s&&d&&a.push(u(e,r[o],l,d))}var c=T["default"].classSet({"drag-over":n.draggable.current.over===l,"move-dest":T["default"].containsX(n.openable.dests,l)});""!==c&&i.push(v(c,e,r[o]))}return a.push(i),a}function y(e){var t=e.data,n=h(e,t.opens.layout.layout);return{tag:"div",attrs:{config:function(t,n,r){n||(e.data.opensBounds=T["default"].memo(t.getBoundingClientRect.bind(t)))},"class":"og-opens"},children:n}}function w(e){var t=e.data,n=[],r=[];for(var a in t.discards){var i=t.discards[a][0],o=T["default"].classSet({"drag-over":t.draggable.current.over===a,"move-dest":"ddown"===a&&t.selected&&T["default"].isBoardKey(t.selected)&&T["default"].containsX(t.movable.dests,A["default"].discard),"last-move":t.lastMove&&T["default"].containsX(t.lastMove,a)});if(i){t.discards[a][1]&&r.push(d(e,a,t.discards[a][1],"fake",!1)),r.push(d(e,a,i,o));var u=A["default"].drawLeft+a,l=!!e.data.animation.current.anims&&e.data.animation.current.anims[u];if(l){var c=e.data.animation.current.extra.piece;r.push(d(e,a,c,o,!0,u))}}else n.push(s(e,a,o))}return n.push(r),n}function b(e){var t=e.data,n=[],r=t.middleHolder.piece||T["default"].emptyPiece;if(n.push(d(e,T["default"].gosterge,t.middles[T["default"].gosterge])),n.push(l(e,T["default"].middleCount,T["default"].emptyPiece)),T["default"].isMiddleKey(t.draggable.current.orig)||t.animation.current.anims&&t.animation.current.anims[T["default"].middleCount]){var a=l(e,T["default"].middleCount,r,!0);n.push(a)}return t.draggable.current.over===T["default"].gosterge&&n.push(p("drag-over",e,T["default"].gosterge)),n}function P(e){var t=[],n=e.data.topHooks;return n&&t.push(n),t}function k(e){var t=[b(e),w(e),y(e),P(e)];return{tag:"div",attrs:{config:function(t,n,r){n||(e.data.topBounds=T["default"].memo(t.getBoundingClientRect.bind(t)))},"class":"og-top"},children:t}}function O(e){return[k(e),g(e)]}function x(e,t,n){return function(r){T["default"].isRightButton(r)?n(e,r):e.viewOnly||t(e,r)}}function S(e,t,n){var r=e.data,a=x(r,C["default"].start,K["default"].start),i=x(r,C["default"].move,K["default"].move),o=x(r,C["default"].end,K["default"].end),u=["touchstart","mousedown"],l=["touchmove","mousemove"],d=["touchend","mouseup"];u.forEach(function(e){t.addEventListener(e,a)}),l.forEach(function(e){document.addEventListener(e,i)}),d.forEach(function(e){document.addEventListener(e,o)}),n.onunload=function(){u.forEach(function(e){t.removeEventListener(e,a)}),l.forEach(function(e){document.removeEventListener(e,i)}),d.forEach(function(e){document.removeEventListener(e,o)})}}function E(e){return{tag:"div",attrs:{"class":"og-table",config:function(t,n,r){n||(e.data.viewOnly||S(e,t,r),e.data.render=function(){M["default"].render(t,O(e))},e.data.renderRAF=function(){T["default"].requestAnimationFrame(e.data.render)},e.data.bounds=T["default"].memo(t.getBoundingClientRect.bind(t)),e.data.element=t,e.data.render())}},children:[]}}var M=r(e("mithril")),C=r(e("./drag")),K=r(e("./draw")),T=r(e("./util")),A=r(e("./move"));t.exports=function(e){return{tag:"div",attrs:{config:function(t,n){n||(t.addEventListener("contextmenu",function(e){return e.preventDefault(),!1}),["onscroll","onresize"].forEach(function(t){var n=window[t];window[t]=function(){n&&n(),e.data.bounds.clear(),e.data.boardBounds.clear(),e.data.opensBounds.clear(),e.data.topBounds.clear()}}))},"class":["og-table-wrap"].join(" ")},children:[E(e)]}}},{"./drag":9,"./draw":10,"./move":12,"./util":17,mithril:2}]},{},[11])(11)});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
/* MIT license */

module.exports = {
  rgb2hsl: rgb2hsl,
  rgb2hsv: rgb2hsv,
  rgb2hwb: rgb2hwb,
  rgb2cmyk: rgb2cmyk,
  rgb2keyword: rgb2keyword,
  rgb2xyz: rgb2xyz,
  rgb2lab: rgb2lab,
  rgb2lch: rgb2lch,

  hsl2rgb: hsl2rgb,
  hsl2hsv: hsl2hsv,
  hsl2hwb: hsl2hwb,
  hsl2cmyk: hsl2cmyk,
  hsl2keyword: hsl2keyword,

  hsv2rgb: hsv2rgb,
  hsv2hsl: hsv2hsl,
  hsv2hwb: hsv2hwb,
  hsv2cmyk: hsv2cmyk,
  hsv2keyword: hsv2keyword,

  hwb2rgb: hwb2rgb,
  hwb2hsl: hwb2hsl,
  hwb2hsv: hwb2hsv,
  hwb2cmyk: hwb2cmyk,
  hwb2keyword: hwb2keyword,

  cmyk2rgb: cmyk2rgb,
  cmyk2hsl: cmyk2hsl,
  cmyk2hsv: cmyk2hsv,
  cmyk2hwb: cmyk2hwb,
  cmyk2keyword: cmyk2keyword,

  keyword2rgb: keyword2rgb,
  keyword2hsl: keyword2hsl,
  keyword2hsv: keyword2hsv,
  keyword2hwb: keyword2hwb,
  keyword2cmyk: keyword2cmyk,
  keyword2lab: keyword2lab,
  keyword2xyz: keyword2xyz,

  xyz2rgb: xyz2rgb,
  xyz2lab: xyz2lab,
  xyz2lch: xyz2lch,

  lab2xyz: lab2xyz,
  lab2rgb: lab2rgb,
  lab2lch: lab2lch,

  lch2lab: lch2lab,
  lch2xyz: lch2xyz,
  lch2rgb: lch2rgb
}


function rgb2hsl(rgb) {
  var r = rgb[0]/255,
      g = rgb[1]/255,
      b = rgb[2]/255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, l;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g)/ delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  l = (min + max) / 2;

  if (max == min)
    s = 0;
  else if (l <= 0.5)
    s = delta / (max + min);
  else
    s = delta / (2 - max - min);

  return [h, s * 100, l * 100];
}

function rgb2hsv(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, v;

  if (max == 0)
    s = 0;
  else
    s = (delta/max * 1000)/10;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g) / delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  v = ((max / 255) * 1000) / 10;

  return [h, s, v];
}

function rgb2hwb(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      h = rgb2hsl(rgb)[0],
      w = 1/255 * Math.min(r, Math.min(g, b)),
      b = 1 - 1/255 * Math.max(r, Math.max(g, b));

  return [h, w * 100, b * 100];
}

function rgb2cmyk(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255,
      c, m, y, k;

  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
}

function rgb2keyword(rgb) {
  return reverseKeywords[JSON.stringify(rgb)];
}

function rgb2xyz(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255;

  // assume sRGB
  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  return [x * 100, y *100, z * 100];
}

function rgb2lab(rgb) {
  var xyz = rgb2xyz(rgb),
        x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function rgb2lch(args) {
  return lab2lch(rgb2lab(args));
}

function hsl2rgb(hsl) {
  var h = hsl[0] / 360,
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      t1, t2, t3, rgb, val;

  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5)
    t2 = l * (1 + s);
  else
    t2 = l + s - l * s;
  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * - (i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;

    if (6 * t3 < 1)
      val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
      val = t2;
    else if (3 * t3 < 2)
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
      val = t1;

    rgb[i] = val * 255;
  }

  return rgb;
}

function hsl2hsv(hsl) {
  var h = hsl[0],
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      sv, v;

  if(l === 0) {
      // no need to do calc on black
      // also avoids divide by 0 error
      return [0, 0, 0];
  }

  l *= 2;
  s *= (l <= 1) ? l : 2 - l;
  v = (l + s) / 2;
  sv = (2 * s) / (l + s);
  return [h, sv * 100, v * 100];
}

function hsl2hwb(args) {
  return rgb2hwb(hsl2rgb(args));
}

function hsl2cmyk(args) {
  return rgb2cmyk(hsl2rgb(args));
}

function hsl2keyword(args) {
  return rgb2keyword(hsl2rgb(args));
}


function hsv2rgb(hsv) {
  var h = hsv[0] / 60,
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      hi = Math.floor(h) % 6;

  var f = h - Math.floor(h),
      p = 255 * v * (1 - s),
      q = 255 * v * (1 - (s * f)),
      t = 255 * v * (1 - (s * (1 - f))),
      v = 255 * v;

  switch(hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
}

function hsv2hsl(hsv) {
  var h = hsv[0],
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      sl, l;

  l = (2 - s) * v;
  sl = s * v;
  sl /= (l <= 1) ? l : 2 - l;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
}

function hsv2hwb(args) {
  return rgb2hwb(hsv2rgb(args))
}

function hsv2cmyk(args) {
  return rgb2cmyk(hsv2rgb(args));
}

function hsv2keyword(args) {
  return rgb2keyword(hsv2rgb(args));
}

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
function hwb2rgb(hwb) {
  var h = hwb[0] / 360,
      wh = hwb[1] / 100,
      bl = hwb[2] / 100,
      ratio = wh + bl,
      i, v, f, n;

  // wh + bl cant be > 1
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;
  if ((i & 0x01) != 0) {
    f = 1 - f;
  }
  n = wh + f * (v - wh);  // linear interpolation

  switch (i) {
    default:
    case 6:
    case 0: r = v; g = n; b = wh; break;
    case 1: r = n; g = v; b = wh; break;
    case 2: r = wh; g = v; b = n; break;
    case 3: r = wh; g = n; b = v; break;
    case 4: r = n; g = wh; b = v; break;
    case 5: r = v; g = wh; b = n; break;
  }

  return [r * 255, g * 255, b * 255];
}

function hwb2hsl(args) {
  return rgb2hsl(hwb2rgb(args));
}

function hwb2hsv(args) {
  return rgb2hsv(hwb2rgb(args));
}

function hwb2cmyk(args) {
  return rgb2cmyk(hwb2rgb(args));
}

function hwb2keyword(args) {
  return rgb2keyword(hwb2rgb(args));
}

function cmyk2rgb(cmyk) {
  var c = cmyk[0] / 100,
      m = cmyk[1] / 100,
      y = cmyk[2] / 100,
      k = cmyk[3] / 100,
      r, g, b;

  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
}

function cmyk2hsl(args) {
  return rgb2hsl(cmyk2rgb(args));
}

function cmyk2hsv(args) {
  return rgb2hsv(cmyk2rgb(args));
}

function cmyk2hwb(args) {
  return rgb2hwb(cmyk2rgb(args));
}

function cmyk2keyword(args) {
  return rgb2keyword(cmyk2rgb(args));
}


function xyz2rgb(xyz) {
  var x = xyz[0] / 100,
      y = xyz[1] / 100,
      z = xyz[2] / 100,
      r, g, b;

  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  // assume sRGB
  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    : r = (r * 12.92);

  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    : g = (g * 12.92);

  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    : b = (b * 12.92);

  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);

  return [r * 255, g * 255, b * 255];
}

function xyz2lab(xyz) {
  var x = xyz[0],
      y = xyz[1],
      z = xyz[2],
      l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function xyz2lch(args) {
  return lab2lch(xyz2lab(args));
}

function lab2xyz(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      x, y, z, y2;

  if (l <= 8) {
    y = (l * 100) / 903.3;
    y2 = (7.787 * (y / 100)) + (16 / 116);
  } else {
    y = 100 * Math.pow((l + 16) / 116, 3);
    y2 = Math.pow(y / 100, 1/3);
  }

  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

  return [x, y, z];
}

function lab2lch(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      hr, h, c;

  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
}

function lab2rgb(args) {
  return xyz2rgb(lab2xyz(args));
}

function lch2lab(lch) {
  var l = lch[0],
      c = lch[1],
      h = lch[2],
      a, b, hr;

  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
}

function lch2xyz(args) {
  return lab2xyz(lch2lab(args));
}

function lch2rgb(args) {
  return lab2rgb(lch2lab(args));
}

function keyword2rgb(keyword) {
  return cssKeywords[keyword];
}

function keyword2hsl(args) {
  return rgb2hsl(keyword2rgb(args));
}

function keyword2hsv(args) {
  return rgb2hsv(keyword2rgb(args));
}

function keyword2hwb(args) {
  return rgb2hwb(keyword2rgb(args));
}

function keyword2cmyk(args) {
  return rgb2cmyk(keyword2rgb(args));
}

function keyword2lab(args) {
  return rgb2lab(keyword2rgb(args));
}

function keyword2xyz(args) {
  return rgb2xyz(keyword2rgb(args));
}

var cssKeywords = {
  aliceblue:  [240,248,255],
  antiquewhite: [250,235,215],
  aqua: [0,255,255],
  aquamarine: [127,255,212],
  azure:  [240,255,255],
  beige:  [245,245,220],
  bisque: [255,228,196],
  black:  [0,0,0],
  blanchedalmond: [255,235,205],
  blue: [0,0,255],
  blueviolet: [138,43,226],
  brown:  [165,42,42],
  burlywood:  [222,184,135],
  cadetblue:  [95,158,160],
  chartreuse: [127,255,0],
  chocolate:  [210,105,30],
  coral:  [255,127,80],
  cornflowerblue: [100,149,237],
  cornsilk: [255,248,220],
  crimson:  [220,20,60],
  cyan: [0,255,255],
  darkblue: [0,0,139],
  darkcyan: [0,139,139],
  darkgoldenrod:  [184,134,11],
  darkgray: [169,169,169],
  darkgreen:  [0,100,0],
  darkgrey: [169,169,169],
  darkkhaki:  [189,183,107],
  darkmagenta:  [139,0,139],
  darkolivegreen: [85,107,47],
  darkorange: [255,140,0],
  darkorchid: [153,50,204],
  darkred:  [139,0,0],
  darksalmon: [233,150,122],
  darkseagreen: [143,188,143],
  darkslateblue:  [72,61,139],
  darkslategray:  [47,79,79],
  darkslategrey:  [47,79,79],
  darkturquoise:  [0,206,209],
  darkviolet: [148,0,211],
  deeppink: [255,20,147],
  deepskyblue:  [0,191,255],
  dimgray:  [105,105,105],
  dimgrey:  [105,105,105],
  dodgerblue: [30,144,255],
  firebrick:  [178,34,34],
  floralwhite:  [255,250,240],
  forestgreen:  [34,139,34],
  fuchsia:  [255,0,255],
  gainsboro:  [220,220,220],
  ghostwhite: [248,248,255],
  gold: [255,215,0],
  goldenrod:  [218,165,32],
  gray: [128,128,128],
  green:  [0,128,0],
  greenyellow:  [173,255,47],
  grey: [128,128,128],
  honeydew: [240,255,240],
  hotpink:  [255,105,180],
  indianred:  [205,92,92],
  indigo: [75,0,130],
  ivory:  [255,255,240],
  khaki:  [240,230,140],
  lavender: [230,230,250],
  lavenderblush:  [255,240,245],
  lawngreen:  [124,252,0],
  lemonchiffon: [255,250,205],
  lightblue:  [173,216,230],
  lightcoral: [240,128,128],
  lightcyan:  [224,255,255],
  lightgoldenrodyellow: [250,250,210],
  lightgray:  [211,211,211],
  lightgreen: [144,238,144],
  lightgrey:  [211,211,211],
  lightpink:  [255,182,193],
  lightsalmon:  [255,160,122],
  lightseagreen:  [32,178,170],
  lightskyblue: [135,206,250],
  lightslategray: [119,136,153],
  lightslategrey: [119,136,153],
  lightsteelblue: [176,196,222],
  lightyellow:  [255,255,224],
  lime: [0,255,0],
  limegreen:  [50,205,50],
  linen:  [250,240,230],
  magenta:  [255,0,255],
  maroon: [128,0,0],
  mediumaquamarine: [102,205,170],
  mediumblue: [0,0,205],
  mediumorchid: [186,85,211],
  mediumpurple: [147,112,219],
  mediumseagreen: [60,179,113],
  mediumslateblue:  [123,104,238],
  mediumspringgreen:  [0,250,154],
  mediumturquoise:  [72,209,204],
  mediumvioletred:  [199,21,133],
  midnightblue: [25,25,112],
  mintcream:  [245,255,250],
  mistyrose:  [255,228,225],
  moccasin: [255,228,181],
  navajowhite:  [255,222,173],
  navy: [0,0,128],
  oldlace:  [253,245,230],
  olive:  [128,128,0],
  olivedrab:  [107,142,35],
  orange: [255,165,0],
  orangered:  [255,69,0],
  orchid: [218,112,214],
  palegoldenrod:  [238,232,170],
  palegreen:  [152,251,152],
  paleturquoise:  [175,238,238],
  palevioletred:  [219,112,147],
  papayawhip: [255,239,213],
  peachpuff:  [255,218,185],
  peru: [205,133,63],
  pink: [255,192,203],
  plum: [221,160,221],
  powderblue: [176,224,230],
  purple: [128,0,128],
  rebeccapurple: [102, 51, 153],
  red:  [255,0,0],
  rosybrown:  [188,143,143],
  royalblue:  [65,105,225],
  saddlebrown:  [139,69,19],
  salmon: [250,128,114],
  sandybrown: [244,164,96],
  seagreen: [46,139,87],
  seashell: [255,245,238],
  sienna: [160,82,45],
  silver: [192,192,192],
  skyblue:  [135,206,235],
  slateblue:  [106,90,205],
  slategray:  [112,128,144],
  slategrey:  [112,128,144],
  snow: [255,250,250],
  springgreen:  [0,255,127],
  steelblue:  [70,130,180],
  tan:  [210,180,140],
  teal: [0,128,128],
  thistle:  [216,191,216],
  tomato: [255,99,71],
  turquoise:  [64,224,208],
  violet: [238,130,238],
  wheat:  [245,222,179],
  white:  [255,255,255],
  whitesmoke: [245,245,245],
  yellow: [255,255,0],
  yellowgreen:  [154,205,50]
};

var reverseKeywords = {};
for (var key in cssKeywords) {
  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
}

},{}],3:[function(require,module,exports){
var conversions = require("./conversions");

var convert = function() {
   return new Converter();
}

for (var func in conversions) {
  // export Raw versions
  convert[func + "Raw"] =  (function(func) {
    // accept array or plain args
    return function(arg) {
      if (typeof arg == "number")
        arg = Array.prototype.slice.call(arguments);
      return conversions[func](arg);
    }
  })(func);

  var pair = /(\w+)2(\w+)/.exec(func),
      from = pair[1],
      to = pair[2];

  // export rgb2hsl and ["rgb"]["hsl"]
  convert[from] = convert[from] || {};

  convert[from][to] = convert[func] = (function(func) { 
    return function(arg) {
      if (typeof arg == "number")
        arg = Array.prototype.slice.call(arguments);
      
      var val = conversions[func](arg);
      if (typeof val == "string" || val === undefined)
        return val; // keyword

      for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
      return val;
    }
  })(func);
}


/* Converter does lazy conversion and caching */
var Converter = function() {
   this.convs = {};
};

/* Either get the values for a space or
  set the values for a space, depending on args */
Converter.prototype.routeSpace = function(space, args) {
   var values = args[0];
   if (values === undefined) {
      // color.rgb()
      return this.getValues(space);
   }
   // color.rgb(10, 10, 10)
   if (typeof values == "number") {
      values = Array.prototype.slice.call(args);        
   }

   return this.setValues(space, values);
};
  
/* Set the values for a space, invalidating cache */
Converter.prototype.setValues = function(space, values) {
   this.space = space;
   this.convs = {};
   this.convs[space] = values;
   return this;
};

/* Get the values for a space. If there's already
  a conversion for the space, fetch it, otherwise
  compute it */
Converter.prototype.getValues = function(space) {
   var vals = this.convs[space];
   if (!vals) {
      var fspace = this.space,
          from = this.convs[fspace];
      vals = convert[fspace][space](from);

      this.convs[space] = vals;
   }
  return vals;
};

["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
   Converter.prototype[space] = function(vals) {
      return this.routeSpace(space, arguments);
   }
});

module.exports = convert;
},{"./conversions":2}],4:[function(require,module,exports){
module.exports={
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
}
},{}],5:[function(require,module,exports){
/* MIT license */
var colorNames = require('color-name');

module.exports = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
}

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3})$/,
       hex =  /^#([a-fA-F0-9]{6})$/,
       rgba = /^rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*([\d\.]+)\s*)?\)$/,
       per = /^rgba?\(\s*([\d\.]+)\%\s*,\s*([\d\.]+)\%\s*,\s*([\d\.]+)\%\s*(?:,\s*([\d\.]+)\s*)?\)$/,
       keyword = /(\D+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr);
   if (match) {
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
   }
   else if (match = string.match(hex)) {
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorNames[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*(\d+)(?:deg)?\s*,\s*([\d\.]+)%\s*,\s*([\d\.]+)%\s*(?:,\s*([\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(parseFloat(match[4]) || 1, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*(\d+)(?:deg)?\s*,\s*([\d\.]+)%\s*,\s*([\d\.]+)%\s*(?:,\s*([\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(parseFloat(match[4]) || 1, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgb) {
   return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
              + hexDouble(rgb[2]);
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorNames) {
   reverseNames[colorNames[name]] = name;
}
},{"color-name":4}],6:[function(require,module,exports){
/* MIT license */
var convert = require("color-convert"),
    string = require("color-string");

var Color = function(cssString) {
  if (cssString instanceof Color) return cssString;
  if (! (this instanceof Color)) return new Color(cssString);

   this.values = {
      rgb: [0, 0, 0],
      hsl: [0, 0, 0],
      hsv: [0, 0, 0],
      hwb: [0, 0, 0],
      cmyk: [0, 0, 0, 0],
      alpha: 1
   }

   // parse Color() argument
   if (typeof cssString == "string") {
      var vals = string.getRgba(cssString);
      if (vals) {
         this.setValues("rgb", vals);
      }
      else if(vals = string.getHsla(cssString)) {
         this.setValues("hsl", vals);
      }
      else if(vals = string.getHwb(cssString)) {
         this.setValues("hwb", vals);
      }
      else {
        throw new Error("Unable to parse color from string \"" + cssString + "\"");
      }
   }
   else if (typeof cssString == "object") {
      var vals = cssString;
      if(vals["r"] !== undefined || vals["red"] !== undefined) {
         this.setValues("rgb", vals)
      }
      else if(vals["l"] !== undefined || vals["lightness"] !== undefined) {
         this.setValues("hsl", vals)
      }
      else if(vals["v"] !== undefined || vals["value"] !== undefined) {
         this.setValues("hsv", vals)
      }
      else if(vals["w"] !== undefined || vals["whiteness"] !== undefined) {
         this.setValues("hwb", vals)
      }
      else if(vals["c"] !== undefined || vals["cyan"] !== undefined) {
         this.setValues("cmyk", vals)
      }
      else {
        throw new Error("Unable to parse color from object " + JSON.stringify(cssString));
      }
   }
}

Color.prototype = {
   rgb: function (vals) {
      return this.setSpace("rgb", arguments);
   },
   hsl: function(vals) {
      return this.setSpace("hsl", arguments);
   },
   hsv: function(vals) {
      return this.setSpace("hsv", arguments);
   },
   hwb: function(vals) {
      return this.setSpace("hwb", arguments);
   },
   cmyk: function(vals) {
      return this.setSpace("cmyk", arguments);
   },

   rgbArray: function() {
      return this.values.rgb;
   },
   hslArray: function() {
      return this.values.hsl;
   },
   hsvArray: function() {
      return this.values.hsv;
   },
   hwbArray: function() {
      if (this.values.alpha !== 1) {
        return this.values.hwb.concat([this.values.alpha])
      }
      return this.values.hwb;
   },
   cmykArray: function() {
      return this.values.cmyk;
   },
   rgbaArray: function() {
      var rgb = this.values.rgb;
      return rgb.concat([this.values.alpha]);
   },
   hslaArray: function() {
      var hsl = this.values.hsl;
      return hsl.concat([this.values.alpha]);
   },
   alpha: function(val) {
      if (val === undefined) {
         return this.values.alpha;
      }
      this.setValues("alpha", val);
      return this;
   },

   red: function(val) {
      return this.setChannel("rgb", 0, val);
   },
   green: function(val) {
      return this.setChannel("rgb", 1, val);
   },
   blue: function(val) {
      return this.setChannel("rgb", 2, val);
   },
   hue: function(val) {
      return this.setChannel("hsl", 0, val);
   },
   saturation: function(val) {
      return this.setChannel("hsl", 1, val);
   },
   lightness: function(val) {
      return this.setChannel("hsl", 2, val);
   },
   saturationv: function(val) {
      return this.setChannel("hsv", 1, val);
   },
   whiteness: function(val) {
      return this.setChannel("hwb", 1, val);
   },
   blackness: function(val) {
      return this.setChannel("hwb", 2, val);
   },
   value: function(val) {
      return this.setChannel("hsv", 2, val);
   },
   cyan: function(val) {
      return this.setChannel("cmyk", 0, val);
   },
   magenta: function(val) {
      return this.setChannel("cmyk", 1, val);
   },
   yellow: function(val) {
      return this.setChannel("cmyk", 2, val);
   },
   black: function(val) {
      return this.setChannel("cmyk", 3, val);
   },

   hexString: function() {
      return string.hexString(this.values.rgb);
   },
   rgbString: function() {
      return string.rgbString(this.values.rgb, this.values.alpha);
   },
   rgbaString: function() {
      return string.rgbaString(this.values.rgb, this.values.alpha);
   },
   percentString: function() {
      return string.percentString(this.values.rgb, this.values.alpha);
   },
   hslString: function() {
      return string.hslString(this.values.hsl, this.values.alpha);
   },
   hslaString: function() {
      return string.hslaString(this.values.hsl, this.values.alpha);
   },
   hwbString: function() {
      return string.hwbString(this.values.hwb, this.values.alpha);
   },
   keyword: function() {
      return string.keyword(this.values.rgb, this.values.alpha);
   },

   rgbNumber: function() {
      return (this.values.rgb[0] << 16) | (this.values.rgb[1] << 8) | this.values.rgb[2];
   },

   luminosity: function() {
      // http://www.w3.org/TR/WCAG20/#relativeluminancedef
      var rgb = this.values.rgb;
      var lum = [];
      for (var i = 0; i < rgb.length; i++) {
         var chan = rgb[i] / 255;
         lum[i] = (chan <= 0.03928) ? chan / 12.92
                  : Math.pow(((chan + 0.055) / 1.055), 2.4)
      }
      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
   },

   contrast: function(color2) {
      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
      var lum1 = this.luminosity();
      var lum2 = color2.luminosity();
      if (lum1 > lum2) {
         return (lum1 + 0.05) / (lum2 + 0.05)
      };
      return (lum2 + 0.05) / (lum1 + 0.05);
   },

   level: function(color2) {
     var contrastRatio = this.contrast(color2);
     return (contrastRatio >= 7.1)
       ? 'AAA'
       : (contrastRatio >= 4.5)
        ? 'AA'
        : '';
   },

   dark: function() {
      // YIQ equation from http://24ways.org/2010/calculating-color-contrast
      var rgb = this.values.rgb,
          yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
   	return yiq < 128;
   },

   light: function() {
      return !this.dark();
   },

   negate: function() {
      var rgb = []
      for (var i = 0; i < 3; i++) {
         rgb[i] = 255 - this.values.rgb[i];
      }
      this.setValues("rgb", rgb);
      return this;
   },

   lighten: function(ratio) {
      this.values.hsl[2] += this.values.hsl[2] * ratio;
      this.setValues("hsl", this.values.hsl);
      return this;
   },

   darken: function(ratio) {
      this.values.hsl[2] -= this.values.hsl[2] * ratio;
      this.setValues("hsl", this.values.hsl);
      return this;
   },

   saturate: function(ratio) {
      this.values.hsl[1] += this.values.hsl[1] * ratio;
      this.setValues("hsl", this.values.hsl);
      return this;
   },

   desaturate: function(ratio) {
      this.values.hsl[1] -= this.values.hsl[1] * ratio;
      this.setValues("hsl", this.values.hsl);
      return this;
   },

   whiten: function(ratio) {
      this.values.hwb[1] += this.values.hwb[1] * ratio;
      this.setValues("hwb", this.values.hwb);
      return this;
   },

   blacken: function(ratio) {
      this.values.hwb[2] += this.values.hwb[2] * ratio;
      this.setValues("hwb", this.values.hwb);
      return this;
   },

   greyscale: function() {
      var rgb = this.values.rgb;
      // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      this.setValues("rgb", [val, val, val]);
      return this;
   },

   clearer: function(ratio) {
      this.setValues("alpha", this.values.alpha - (this.values.alpha * ratio));
      return this;
   },

   opaquer: function(ratio) {
      this.setValues("alpha", this.values.alpha + (this.values.alpha * ratio));
      return this;
   },

   rotate: function(degrees) {
      var hue = this.values.hsl[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      this.values.hsl[0] = hue;
      this.setValues("hsl", this.values.hsl);
      return this;
   },

   mix: function(color2, weight) {
      weight = 1 - (weight == null ? 0.5 : weight);

      // algorithm from Sass's mix(). Ratio of first color in mix is
      // determined by the alphas of both colors and the weight
      var t1 = weight * 2 - 1,
          d = this.alpha() - color2.alpha();

      var weight1 = (((t1 * d == -1) ? t1 : (t1 + d) / (1 + t1 * d)) + 1) / 2;
      var weight2 = 1 - weight1;

      var rgb = this.rgbArray();
      var rgb2 = color2.rgbArray();

      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = rgb[i] * weight1 + rgb2[i] * weight2;
      }
      this.setValues("rgb", rgb);

      var alpha = this.alpha() * weight + color2.alpha() * (1 - weight);
      this.setValues("alpha", alpha);

      return this;
   },

   toJSON: function() {
     return this.rgb();
   },

   clone: function() {
     return new Color(this.rgb());
   }
}


Color.prototype.getValues = function(space) {
   var vals = {};
   for (var i = 0; i < space.length; i++) {
      vals[space[i]] = this.values[space][i];
   }
   if (this.values.alpha != 1) {
      vals["a"] = this.values.alpha;
   }
   // {r: 255, g: 255, b: 255, a: 0.4}
   return vals;
}

Color.prototype.setValues = function(space, vals) {
   var spaces = {
      "rgb": ["red", "green", "blue"],
      "hsl": ["hue", "saturation", "lightness"],
      "hsv": ["hue", "saturation", "value"],
      "hwb": ["hue", "whiteness", "blackness"],
      "cmyk": ["cyan", "magenta", "yellow", "black"]
   };

   var maxes = {
      "rgb": [255, 255, 255],
      "hsl": [360, 100, 100],
      "hsv": [360, 100, 100],
      "hwb": [360, 100, 100],
      "cmyk": [100, 100, 100, 100]
   };

   var alpha = 1;
   if (space == "alpha") {
      alpha = vals;
   }
   else if (vals.length) {
      // [10, 10, 10]
      this.values[space] = vals.slice(0, space.length);
      alpha = vals[space.length];
   }
   else if (vals[space[0]] !== undefined) {
      // {r: 10, g: 10, b: 10}
      for (var i = 0; i < space.length; i++) {
        this.values[space][i] = vals[space[i]];
      }
      alpha = vals.a;
   }
   else if (vals[spaces[space][0]] !== undefined) {
      // {red: 10, green: 10, blue: 10}
      var chans = spaces[space];
      for (var i = 0; i < space.length; i++) {
        this.values[space][i] = vals[chans[i]];
      }
      alpha = vals.alpha;
   }
   this.values.alpha = Math.max(0, Math.min(1, (alpha !== undefined ? alpha : this.values.alpha) ));
   if (space == "alpha") {
      return;
   }

   // cap values of the space prior converting all values
   for (var i = 0; i < space.length; i++) {
      var capped = Math.max(0, Math.min(maxes[space][i], this.values[space][i]));
      this.values[space][i] = Math.round(capped);
   }

   // convert to all the other color spaces
   for (var sname in spaces) {
      if (sname != space) {
         this.values[sname] = convert[space][sname](this.values[space])
      }

      // cap values
      for (var i = 0; i < sname.length; i++) {
         var capped = Math.max(0, Math.min(maxes[sname][i], this.values[sname][i]));
         this.values[sname][i] = Math.round(capped);
      }
   }
   return true;
}

Color.prototype.setSpace = function(space, args) {
   var vals = args[0];
   if (vals === undefined) {
      // color.rgb()
      return this.getValues(space);
   }
   // color.rgb(10, 10, 10)
   if (typeof vals == "number") {
      vals = Array.prototype.slice.call(args);
   }
   this.setValues(space, vals);
   return this;
}

Color.prototype.setChannel = function(space, index, val) {
   if (val === undefined) {
      // color.red()
      return this.values[space][index];
   }
   // color.red(100)
   this.values[space][index] = val;
   this.setValues(space, this.values[space]);
   return this;
}

module.exports = Color;

},{"color-convert":3,"color-string":5}],7:[function(require,module,exports){
/*! iScroll v5.2.0 ~ (c) 2008-2016 Matteo Spinelli ~ http://cubiq.org/license */
(function (window, document, Math) {
var rAF = window.requestAnimationFrame	||
	window.webkitRequestAnimationFrame	||
	window.mozRequestAnimationFrame		||
	window.oRequestAnimationFrame		||
	window.msRequestAnimationFrame		||
	function (callback) { window.setTimeout(callback, 1000 / 60); };

var utils = (function () {
	var me = {};

	var _elementStyle = document.createElement('div').style;
	var _vendor = (function () {
		var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
			transform,
			i = 0,
			l = vendors.length;

		for ( ; i < l; i++ ) {
			transform = vendors[i] + 'ransform';
			if ( transform in _elementStyle ) return vendors[i].substr(0, vendors[i].length-1);
		}

		return false;
	})();

	function _prefixStyle (style) {
		if ( _vendor === false ) return false;
		if ( _vendor === '' ) return style;
		return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	}

	me.getTime = Date.now || function getTime () { return new Date().getTime(); };

	me.extend = function (target, obj) {
		for ( var i in obj ) {
			target[i] = obj[i];
		}
	};

	me.addEvent = function (el, type, fn, capture) {
		el.addEventListener(type, fn, !!capture);
	};

	me.removeEvent = function (el, type, fn, capture) {
		el.removeEventListener(type, fn, !!capture);
	};

	me.prefixPointerEvent = function (pointerEvent) {
		return window.MSPointerEvent ?
			'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8):
			pointerEvent;
	};

	me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
		var distance = current - start,
			speed = Math.abs(distance) / time,
			destination,
			duration;

		deceleration = deceleration === undefined ? 0.0006 : deceleration;

		destination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? -1 : 1 );
		duration = speed / deceleration;

		if ( destination < lowerMargin ) {
			destination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;
			distance = Math.abs(destination - current);
			duration = distance / speed;
		} else if ( destination > 0 ) {
			destination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;
			distance = Math.abs(current) + destination;
			duration = distance / speed;
		}

		return {
			destination: Math.round(destination),
			duration: duration
		};
	};

	var _transform = _prefixStyle('transform');

	me.extend(me, {
		hasTransform: _transform !== false,
		hasPerspective: _prefixStyle('perspective') in _elementStyle,
		hasTouch: 'ontouchstart' in window,
		hasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed
		hasTransition: _prefixStyle('transition') in _elementStyle
	});

	/*
	This should find all Android browsers lower than build 535.19 (both stock browser and webview)
	- galaxy S2 is ok
    - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`
    - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
   - galaxy S3 is badAndroid (stock brower, webview)
     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
   - galaxy S4 is badAndroid (stock brower, webview)
     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
   - galaxy S5 is OK
     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
   - galaxy S6 is OK
     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
  */
	me.isBadAndroid = (function() {
		var appVersion = window.navigator.appVersion;
		// Android browser is not a chrome browser.
		if (/Android/.test(appVersion) && !(/Chrome\/\d/.test(appVersion))) {
			var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
			if(safariVersion && typeof safariVersion === "object" && safariVersion.length >= 2) {
				return parseFloat(safariVersion[1]) < 535.19;
			} else {
				return true;
			}
		} else {
			return false;
		}
	})();

	me.extend(me.style = {}, {
		transform: _transform,
		transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
		transitionDuration: _prefixStyle('transitionDuration'),
		transitionDelay: _prefixStyle('transitionDelay'),
		transformOrigin: _prefixStyle('transformOrigin')
	});

	me.hasClass = function (e, c) {
		var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
		return re.test(e.className);
	};

	me.addClass = function (e, c) {
		if ( me.hasClass(e, c) ) {
			return;
		}

		var newclass = e.className.split(' ');
		newclass.push(c);
		e.className = newclass.join(' ');
	};

	me.removeClass = function (e, c) {
		if ( !me.hasClass(e, c) ) {
			return;
		}

		var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
		e.className = e.className.replace(re, ' ');
	};

	me.offset = function (el) {
		var left = -el.offsetLeft,
			top = -el.offsetTop;

		// jshint -W084
		while (el = el.offsetParent) {
			left -= el.offsetLeft;
			top -= el.offsetTop;
		}
		// jshint +W084

		return {
			left: left,
			top: top
		};
	};

	me.preventDefaultException = function (el, exceptions) {
		for ( var i in exceptions ) {
			if ( exceptions[i].test(el[i]) ) {
				return true;
			}
		}

		return false;
	};

	me.extend(me.eventType = {}, {
		touchstart: 1,
		touchmove: 1,
		touchend: 1,

		mousedown: 2,
		mousemove: 2,
		mouseup: 2,

		pointerdown: 3,
		pointermove: 3,
		pointerup: 3,

		MSPointerDown: 3,
		MSPointerMove: 3,
		MSPointerUp: 3
	});

	me.extend(me.ease = {}, {
		quadratic: {
			style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
			fn: function (k) {
				return k * ( 2 - k );
			}
		},
		circular: {
			style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',	// Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
			fn: function (k) {
				return Math.sqrt( 1 - ( --k * k ) );
			}
		},
		back: {
			style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
			fn: function (k) {
				var b = 4;
				return ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;
			}
		},
		bounce: {
			style: '',
			fn: function (k) {
				if ( ( k /= 1 ) < ( 1 / 2.75 ) ) {
					return 7.5625 * k * k;
				} else if ( k < ( 2 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;
				} else if ( k < ( 2.5 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;
				} else {
					return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;
				}
			}
		},
		elastic: {
			style: '',
			fn: function (k) {
				var f = 0.22,
					e = 0.4;

				if ( k === 0 ) { return 0; }
				if ( k == 1 ) { return 1; }

				return ( e * Math.pow( 2, - 10 * k ) * Math.sin( ( k - f / 4 ) * ( 2 * Math.PI ) / f ) + 1 );
			}
		}
	});

	me.tap = function (e, eventName) {
		var ev = document.createEvent('Event');
		ev.initEvent(eventName, true, true);
		ev.pageX = e.pageX;
		ev.pageY = e.pageY;
		e.target.dispatchEvent(ev);
	};

	me.click = function (e) {
		var target = e.target,
			ev;

		if ( !(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName) ) {
			ev = document.createEvent('MouseEvents');
			ev.initMouseEvent('click', true, true, e.view, 1,
				target.screenX, target.screenY, target.clientX, target.clientY,
				e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,
				0, null);

			ev._constructed = true;
			target.dispatchEvent(ev);
		}
	};

	return me;
})();
function IScroll (el, options) {
	this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
	this.scroller = this.wrapper.children[0];
	this.scrollerStyle = this.scroller.style;		// cache style for better performance

	this.options = {

		resizeScrollbars: true,

		mouseWheelSpeed: 20,

		snapThreshold: 0.334,

// INSERT POINT: OPTIONS
		disablePointer : !utils.hasPointer,
		disableTouch : utils.hasPointer || !utils.hasTouch,
		disableMouse : utils.hasPointer || utils.hasTouch,
		startX: 0,
		startY: 0,
		scrollY: true,
		directionLockThreshold: 5,
		momentum: true,

		bounce: true,
		bounceTime: 600,
		bounceEasing: '',

		preventDefault: true,
		preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },

		HWCompositing: true,
		useTransition: true,
		useTransform: true,
		bindToWrapper: typeof window.onmousedown === "undefined"
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	// Normalize options
	this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

	this.options.useTransition = utils.hasTransition && this.options.useTransition;
	this.options.useTransform = utils.hasTransform && this.options.useTransform;

	this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
	this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

	// If you want eventPassthrough I have to lock one of the axes
	this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
	this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

	// With eventPassthrough we also need lockDirection mechanism
	this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
	this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

	this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

	this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

	if ( this.options.tap === true ) {
		this.options.tap = 'tap';
	}

	if ( this.options.shrinkScrollbars == 'scale' ) {
		this.options.useTransition = false;
	}

	this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

// INSERT POINT: NORMALIZATION

	// Some defaults
	this.x = 0;
	this.y = 0;
	this.directionX = 0;
	this.directionY = 0;
	this._events = {};

// INSERT POINT: DEFAULTS

	this._init();
	this.refresh();

	this.scrollTo(this.options.startX, this.options.startY);
	this.enable();
}

IScroll.prototype = {
	version: '5.2.0',

	_init: function () {
		this._initEvents();

		if ( this.options.scrollbars || this.options.indicators ) {
			this._initIndicators();
		}

		if ( this.options.mouseWheel ) {
			this._initWheel();
		}

		if ( this.options.snap ) {
			this._initSnap();
		}

		if ( this.options.keyBindings ) {
			this._initKeys();
		}

// INSERT POINT: _init

	},

	destroy: function () {
		this._initEvents(true);
		clearTimeout(this.resizeTimeout);
 		this.resizeTimeout = null;
		this._execEvent('destroy');
	},

	_transitionEnd: function (e) {
		if ( e.target != this.scroller || !this.isInTransition ) {
			return;
		}

		this._transitionTime();
		if ( !this.resetPosition(this.options.bounceTime) ) {
			this.isInTransition = false;
			this._execEvent('scrollEnd');
		}
	},

	_start: function (e) {
		// React to left mouse button only
		if ( utils.eventType[e.type] != 1 ) {
		  // for button property
		  // http://unixpapa.com/js/mouse.html
		  var button;
	    if (!e.which) {
	      /* IE case */
	      button = (e.button < 2) ? 0 :
	               ((e.button == 4) ? 1 : 2);
	    } else {
	      /* All others */
	      button = e.button;
	    }
			if ( button !== 0 ) {
				return;
			}
		}

		if ( !this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated) ) {
			return;
		}

		if ( this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();
		}

		var point = e.touches ? e.touches[0] : e,
			pos;

		this.initiated	= utils.eventType[e.type];
		this.moved		= false;
		this.distX		= 0;
		this.distY		= 0;
		this.directionX = 0;
		this.directionY = 0;
		this.directionLocked = 0;

		this.startTime = utils.getTime();

		if ( this.options.useTransition && this.isInTransition ) {
			this._transitionTime();
			this.isInTransition = false;
			pos = this.getComputedPosition();
			this._translate(Math.round(pos.x), Math.round(pos.y));
			this._execEvent('scrollEnd');
		} else if ( !this.options.useTransition && this.isAnimating ) {
			this.isAnimating = false;
			this._execEvent('scrollEnd');
		}

		this.startX    = this.x;
		this.startY    = this.y;
		this.absStartX = this.x;
		this.absStartY = this.y;
		this.pointX    = point.pageX;
		this.pointY    = point.pageY;

		this._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault ) {	// increases performance on Android? TODO: check!
			e.preventDefault();
		}

		var point		= e.touches ? e.touches[0] : e,
			deltaX		= point.pageX - this.pointX,
			deltaY		= point.pageY - this.pointY,
			timestamp	= utils.getTime(),
			newX, newY,
			absDistX, absDistY;

		this.pointX		= point.pageX;
		this.pointY		= point.pageY;

		this.distX		+= deltaX;
		this.distY		+= deltaY;
		absDistX		= Math.abs(this.distX);
		absDistY		= Math.abs(this.distY);

		// We need to move at least 10 pixels for the scrolling to initiate
		if ( timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10) ) {
			return;
		}

		// If you are scrolling in one direction lock the other
		if ( !this.directionLocked && !this.options.freeScroll ) {
			if ( absDistX > absDistY + this.options.directionLockThreshold ) {
				this.directionLocked = 'h';		// lock horizontally
			} else if ( absDistY >= absDistX + this.options.directionLockThreshold ) {
				this.directionLocked = 'v';		// lock vertically
			} else {
				this.directionLocked = 'n';		// no lock
			}
		}

		if ( this.directionLocked == 'h' ) {
			if ( this.options.eventPassthrough == 'vertical' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'horizontal' ) {
				this.initiated = false;
				return;
			}

			deltaY = 0;
		} else if ( this.directionLocked == 'v' ) {
			if ( this.options.eventPassthrough == 'horizontal' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'vertical' ) {
				this.initiated = false;
				return;
			}

			deltaX = 0;
		}

		deltaX = this.hasHorizontalScroll ? deltaX : 0;
		deltaY = this.hasVerticalScroll ? deltaY : 0;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		// Slow down if outside of the boundaries
		if ( newX > 0 || newX < this.maxScrollX ) {
			newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
		}
		if ( newY > 0 || newY < this.maxScrollY ) {
			newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
		}

		this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
		this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

		if ( !this.moved ) {
			this._execEvent('scrollStart');
		}

		this.moved = true;

		this._translate(newX, newY);

/* REPLACE START: _move */

		if ( timestamp - this.startTime > 300 ) {
			this.startTime = timestamp;
			this.startX = this.x;
			this.startY = this.y;
		}

/* REPLACE END: _move */

	},

	_end: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();
		}

		var point = e.changedTouches ? e.changedTouches[0] : e,
			momentumX,
			momentumY,
			duration = utils.getTime() - this.startTime,
			newX = Math.round(this.x),
			newY = Math.round(this.y),
			distanceX = Math.abs(newX - this.startX),
			distanceY = Math.abs(newY - this.startY),
			time = 0,
			easing = '';

		this.isInTransition = 0;
		this.initiated = 0;
		this.endTime = utils.getTime();

		// reset if we are outside of the boundaries
		if ( this.resetPosition(this.options.bounceTime) ) {
			return;
		}

		this.scrollTo(newX, newY);	// ensures that the last position is rounded

		// we scrolled less than 10 pixels
		if ( !this.moved ) {
			if ( this.options.tap ) {
				utils.tap(e, this.options.tap);
			}

			if ( this.options.click ) {
				utils.click(e);
			}

			this._execEvent('scrollCancel');
			return;
		}

		if ( this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100 ) {
			this._execEvent('flick');
			return;
		}

		// start momentum animation if needed
		if ( this.options.momentum && duration < 300 ) {
			momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };
			momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };
			newX = momentumX.destination;
			newY = momentumY.destination;
			time = Math.max(momentumX.duration, momentumY.duration);
			this.isInTransition = 1;
		}


		if ( this.options.snap ) {
			var snap = this._nearestSnap(newX, newY);
			this.currentPage = snap;
			time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(newX - snap.x), 1000),
						Math.min(Math.abs(newY - snap.y), 1000)
					), 300);
			newX = snap.x;
			newY = snap.y;

			this.directionX = 0;
			this.directionY = 0;
			easing = this.options.bounceEasing;
		}

// INSERT POINT: _end

		if ( newX != this.x || newY != this.y ) {
			// change easing function when scroller goes out of the boundaries
			if ( newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY ) {
				easing = utils.ease.quadratic;
			}

			this.scrollTo(newX, newY, time, easing);
			return;
		}

		this._execEvent('scrollEnd');
	},

	_resize: function () {
		var that = this;

		clearTimeout(this.resizeTimeout);

		this.resizeTimeout = setTimeout(function () {
			that.refresh();
		}, this.options.resizePolling);
	},

	resetPosition: function (time) {
		var x = this.x,
			y = this.y;

		time = time || 0;

		if ( !this.hasHorizontalScroll || this.x > 0 ) {
			x = 0;
		} else if ( this.x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( !this.hasVerticalScroll || this.y > 0 ) {
			y = 0;
		} else if ( this.y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		if ( x == this.x && y == this.y ) {
			return false;
		}

		this.scrollTo(x, y, time, this.options.bounceEasing);

		return true;
	},

	disable: function () {
		this.enabled = false;
	},

	enable: function () {
		this.enabled = true;
	},

	refresh: function () {
		var rf = this.wrapper.offsetHeight;		// Force reflow

		this.wrapperWidth	= this.wrapper.clientWidth;
		this.wrapperHeight	= this.wrapper.clientHeight;

/* REPLACE START: refresh */

		this.scrollerWidth	= this.scroller.offsetWidth;
		this.scrollerHeight	= this.scroller.offsetHeight;

		this.maxScrollX		= this.wrapperWidth - this.scrollerWidth;
		this.maxScrollY		= this.wrapperHeight - this.scrollerHeight;

/* REPLACE END: refresh */

		this.hasHorizontalScroll	= this.options.scrollX && this.maxScrollX < 0;
		this.hasVerticalScroll		= this.options.scrollY && this.maxScrollY < 0;

		if ( !this.hasHorizontalScroll ) {
			this.maxScrollX = 0;
			this.scrollerWidth = this.wrapperWidth;
		}

		if ( !this.hasVerticalScroll ) {
			this.maxScrollY = 0;
			this.scrollerHeight = this.wrapperHeight;
		}

		this.endTime = 0;
		this.directionX = 0;
		this.directionY = 0;

		this.wrapperOffset = utils.offset(this.wrapper);

		this._execEvent('refresh');

		this.resetPosition();

// INSERT POINT: _refresh

	},

	on: function (type, fn) {
		if ( !this._events[type] ) {
			this._events[type] = [];
		}

		this._events[type].push(fn);
	},

	off: function (type, fn) {
		if ( !this._events[type] ) {
			return;
		}

		var index = this._events[type].indexOf(fn);

		if ( index > -1 ) {
			this._events[type].splice(index, 1);
		}
	},

	_execEvent: function (type) {
		if ( !this._events[type] ) {
			return;
		}

		var i = 0,
			l = this._events[type].length;

		if ( !l ) {
			return;
		}

		for ( ; i < l; i++ ) {
			this._events[type][i].apply(this, [].slice.call(arguments, 1));
		}
	},

	scrollBy: function (x, y, time, easing) {
		x = this.x + x;
		y = this.y + y;
		time = time || 0;

		this.scrollTo(x, y, time, easing);
	},

	scrollTo: function (x, y, time, easing) {
		easing = easing || utils.ease.circular;

		this.isInTransition = this.options.useTransition && time > 0;
		var transitionType = this.options.useTransition && easing.style;
		if ( !time || transitionType ) {
				if(transitionType) {
					this._transitionTimingFunction(easing.style);
					this._transitionTime(time);
				}
			this._translate(x, y);
		} else {
			this._animate(x, y, time, easing.fn);
		}
	},

	scrollToElement: function (el, time, offsetX, offsetY, easing) {
		el = el.nodeType ? el : this.scroller.querySelector(el);

		if ( !el ) {
			return;
		}

		var pos = utils.offset(el);

		pos.left -= this.wrapperOffset.left;
		pos.top  -= this.wrapperOffset.top;

		// if offsetX/Y are true we center the element to the screen
		if ( offsetX === true ) {
			offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
		}
		if ( offsetY === true ) {
			offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
		}

		pos.left -= offsetX || 0;
		pos.top  -= offsetY || 0;

		pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
		pos.top  = pos.top  > 0 ? 0 : pos.top  < this.maxScrollY ? this.maxScrollY : pos.top;

		time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x-pos.left), Math.abs(this.y-pos.top)) : time;

		this.scrollTo(pos.left, pos.top, time, easing);
	},

	_transitionTime: function (time) {
		time = time || 0;

		var durationProp = utils.style.transitionDuration;
		this.scrollerStyle[durationProp] = time + 'ms';

		if ( !time && utils.isBadAndroid ) {
			this.scrollerStyle[durationProp] = '0.0001ms';
			// remove 0.0001ms
			var self = this;
			rAF(function() {
				if(self.scrollerStyle[durationProp] === '0.0001ms') {
					self.scrollerStyle[durationProp] = '0s';
				}
			});
		}


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTime(time);
			}
		}


// INSERT POINT: _transitionTime

	},

	_transitionTimingFunction: function (easing) {
		this.scrollerStyle[utils.style.transitionTimingFunction] = easing;


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTimingFunction(easing);
			}
		}


// INSERT POINT: _transitionTimingFunction

	},

	_translate: function (x, y) {
		if ( this.options.useTransform ) {

/* REPLACE START: _translate */

			this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

/* REPLACE END: _translate */

		} else {
			x = Math.round(x);
			y = Math.round(y);
			this.scrollerStyle.left = x + 'px';
			this.scrollerStyle.top = y + 'px';
		}

		this.x = x;
		this.y = y;


	if ( this.indicators ) {
		for ( var i = this.indicators.length; i--; ) {
			this.indicators[i].updatePosition();
		}
	}


// INSERT POINT: _translate

	},

	_initEvents: function (remove) {
		var eventType = remove ? utils.removeEvent : utils.addEvent,
			target = this.options.bindToWrapper ? this.wrapper : window;

		eventType(window, 'orientationchange', this);
		eventType(window, 'resize', this);

		if ( this.options.click ) {
			eventType(this.wrapper, 'click', this, true);
		}

		if ( !this.options.disableMouse ) {
			eventType(this.wrapper, 'mousedown', this);
			eventType(target, 'mousemove', this);
			eventType(target, 'mousecancel', this);
			eventType(target, 'mouseup', this);
		}

		if ( utils.hasPointer && !this.options.disablePointer ) {
			eventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);
			eventType(target, utils.prefixPointerEvent('pointermove'), this);
			eventType(target, utils.prefixPointerEvent('pointercancel'), this);
			eventType(target, utils.prefixPointerEvent('pointerup'), this);
		}

		if ( utils.hasTouch && !this.options.disableTouch ) {
			eventType(this.wrapper, 'touchstart', this);
			eventType(target, 'touchmove', this);
			eventType(target, 'touchcancel', this);
			eventType(target, 'touchend', this);
		}

		eventType(this.scroller, 'transitionend', this);
		eventType(this.scroller, 'webkitTransitionEnd', this);
		eventType(this.scroller, 'oTransitionEnd', this);
		eventType(this.scroller, 'MSTransitionEnd', this);
	},

	getComputedPosition: function () {
		var matrix = window.getComputedStyle(this.scroller, null),
			x, y;

		if ( this.options.useTransform ) {
			matrix = matrix[utils.style.transform].split(')')[0].split(', ');
			x = +(matrix[12] || matrix[4]);
			y = +(matrix[13] || matrix[5]);
		} else {
			x = +matrix.left.replace(/[^-\d.]/g, '');
			y = +matrix.top.replace(/[^-\d.]/g, '');
		}

		return { x: x, y: y };
	},
	_initIndicators: function () {
		var interactive = this.options.interactiveScrollbars,
			customStyle = typeof this.options.scrollbars != 'string',
			indicators = [],
			indicator;

		var that = this;

		this.indicators = [];

		if ( this.options.scrollbars ) {
			// Vertical scrollbar
			if ( this.options.scrollY ) {
				indicator = {
					el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeScrollbars,
					shrink: this.options.shrinkScrollbars,
					fade: this.options.fadeScrollbars,
					listenX: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}

			// Horizontal scrollbar
			if ( this.options.scrollX ) {
				indicator = {
					el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeScrollbars,
					shrink: this.options.shrinkScrollbars,
					fade: this.options.fadeScrollbars,
					listenY: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}
		}

		if ( this.options.indicators ) {
			// TODO: check concat compatibility
			indicators = indicators.concat(this.options.indicators);
		}

		for ( var i = indicators.length; i--; ) {
			this.indicators.push( new Indicator(this, indicators[i]) );
		}

		// TODO: check if we can use array.map (wide compatibility and performance issues)
		function _indicatorsMap (fn) {
			if (that.indicators) {
				for ( var i = that.indicators.length; i--; ) {
					fn.call(that.indicators[i]);
				}
			}
		}

		if ( this.options.fadeScrollbars ) {
			this.on('scrollEnd', function () {
				_indicatorsMap(function () {
					this.fade();
				});
			});

			this.on('scrollCancel', function () {
				_indicatorsMap(function () {
					this.fade();
				});
			});

			this.on('scrollStart', function () {
				_indicatorsMap(function () {
					this.fade(1);
				});
			});

			this.on('beforeScrollStart', function () {
				_indicatorsMap(function () {
					this.fade(1, true);
				});
			});
		}


		this.on('refresh', function () {
			_indicatorsMap(function () {
				this.refresh();
			});
		});

		this.on('destroy', function () {
			_indicatorsMap(function () {
				this.destroy();
			});

			delete this.indicators;
		});
	},

	_initWheel: function () {
		utils.addEvent(this.wrapper, 'wheel', this);
		utils.addEvent(this.wrapper, 'mousewheel', this);
		utils.addEvent(this.wrapper, 'DOMMouseScroll', this);

		this.on('destroy', function () {
			clearTimeout(this.wheelTimeout);
			this.wheelTimeout = null;
			utils.removeEvent(this.wrapper, 'wheel', this);
			utils.removeEvent(this.wrapper, 'mousewheel', this);
			utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
		});
	},

	_wheel: function (e) {
		if ( !this.enabled ) {
			return;
		}

		e.preventDefault();

		var wheelDeltaX, wheelDeltaY,
			newX, newY,
			that = this;

		if ( this.wheelTimeout === undefined ) {
			that._execEvent('scrollStart');
		}

		// Execute the scrollEnd event after 400ms the wheel stopped scrolling
		clearTimeout(this.wheelTimeout);
		this.wheelTimeout = setTimeout(function () {
			if(!that.options.snap) {
				that._execEvent('scrollEnd');
			}
			that.wheelTimeout = undefined;
		}, 400);

		if ( 'deltaX' in e ) {
			if (e.deltaMode === 1) {
				wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;
				wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;
			} else {
				wheelDeltaX = -e.deltaX;
				wheelDeltaY = -e.deltaY;
			}
		} else if ( 'wheelDeltaX' in e ) {
			wheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;
			wheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
		} else if ( 'wheelDelta' in e ) {
			wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
		} else if ( 'detail' in e ) {
			wheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;
		} else {
			return;
		}

		wheelDeltaX *= this.options.invertWheelDirection;
		wheelDeltaY *= this.options.invertWheelDirection;

		if ( !this.hasVerticalScroll ) {
			wheelDeltaX = wheelDeltaY;
			wheelDeltaY = 0;
		}

		if ( this.options.snap ) {
			newX = this.currentPage.pageX;
			newY = this.currentPage.pageY;

			if ( wheelDeltaX > 0 ) {
				newX--;
			} else if ( wheelDeltaX < 0 ) {
				newX++;
			}

			if ( wheelDeltaY > 0 ) {
				newY--;
			} else if ( wheelDeltaY < 0 ) {
				newY++;
			}

			this.goToPage(newX, newY);

			return;
		}

		newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);
		newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);

		this.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;
		this.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;

		if ( newX > 0 ) {
			newX = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
		}

		if ( newY > 0 ) {
			newY = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
		}

		this.scrollTo(newX, newY, 0);

// INSERT POINT: _wheel
	},

	_initSnap: function () {
		this.currentPage = {};

		if ( typeof this.options.snap == 'string' ) {
			this.options.snap = this.scroller.querySelectorAll(this.options.snap);
		}

		this.on('refresh', function () {
			var i = 0, l,
				m = 0, n,
				cx, cy,
				x = 0, y,
				stepX = this.options.snapStepX || this.wrapperWidth,
				stepY = this.options.snapStepY || this.wrapperHeight,
				el;

			this.pages = [];

			if ( !this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight ) {
				return;
			}

			if ( this.options.snap === true ) {
				cx = Math.round( stepX / 2 );
				cy = Math.round( stepY / 2 );

				while ( x > -this.scrollerWidth ) {
					this.pages[i] = [];
					l = 0;
					y = 0;

					while ( y > -this.scrollerHeight ) {
						this.pages[i][l] = {
							x: Math.max(x, this.maxScrollX),
							y: Math.max(y, this.maxScrollY),
							width: stepX,
							height: stepY,
							cx: x - cx,
							cy: y - cy
						};

						y -= stepY;
						l++;
					}

					x -= stepX;
					i++;
				}
			} else {
				el = this.options.snap;
				l = el.length;
				n = -1;

				for ( ; i < l; i++ ) {
					if ( i === 0 || el[i].offsetLeft <= el[i-1].offsetLeft ) {
						m = 0;
						n++;
					}

					if ( !this.pages[m] ) {
						this.pages[m] = [];
					}

					x = Math.max(-el[i].offsetLeft, this.maxScrollX);
					y = Math.max(-el[i].offsetTop, this.maxScrollY);
					cx = x - Math.round(el[i].offsetWidth / 2);
					cy = y - Math.round(el[i].offsetHeight / 2);

					this.pages[m][n] = {
						x: x,
						y: y,
						width: el[i].offsetWidth,
						height: el[i].offsetHeight,
						cx: cx,
						cy: cy
					};

					if ( x > this.maxScrollX ) {
						m++;
					}
				}
			}

			this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

			// Update snap threshold if needed
			if ( this.options.snapThreshold % 1 === 0 ) {
				this.snapThresholdX = this.options.snapThreshold;
				this.snapThresholdY = this.options.snapThreshold;
			} else {
				this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
				this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
			}
		});

		this.on('flick', function () {
			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.x - this.startX), 1000),
						Math.min(Math.abs(this.y - this.startY), 1000)
					), 300);

			this.goToPage(
				this.currentPage.pageX + this.directionX,
				this.currentPage.pageY + this.directionY,
				time
			);
		});
	},

	_nearestSnap: function (x, y) {
		if ( !this.pages.length ) {
			return { x: 0, y: 0, pageX: 0, pageY: 0 };
		}

		var i = 0,
			l = this.pages.length,
			m = 0;

		// Check if we exceeded the snap threshold
		if ( Math.abs(x - this.absStartX) < this.snapThresholdX &&
			Math.abs(y - this.absStartY) < this.snapThresholdY ) {
			return this.currentPage;
		}

		if ( x > 0 ) {
			x = 0;
		} else if ( x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( y > 0 ) {
			y = 0;
		} else if ( y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		for ( ; i < l; i++ ) {
			if ( x >= this.pages[i][0].cx ) {
				x = this.pages[i][0].x;
				break;
			}
		}

		l = this.pages[i].length;

		for ( ; m < l; m++ ) {
			if ( y >= this.pages[0][m].cy ) {
				y = this.pages[0][m].y;
				break;
			}
		}

		if ( i == this.currentPage.pageX ) {
			i += this.directionX;

			if ( i < 0 ) {
				i = 0;
			} else if ( i >= this.pages.length ) {
				i = this.pages.length - 1;
			}

			x = this.pages[i][0].x;
		}

		if ( m == this.currentPage.pageY ) {
			m += this.directionY;

			if ( m < 0 ) {
				m = 0;
			} else if ( m >= this.pages[0].length ) {
				m = this.pages[0].length - 1;
			}

			y = this.pages[0][m].y;
		}

		return {
			x: x,
			y: y,
			pageX: i,
			pageY: m
		};
	},

	goToPage: function (x, y, time, easing) {
		easing = easing || this.options.bounceEasing;

		if ( x >= this.pages.length ) {
			x = this.pages.length - 1;
		} else if ( x < 0 ) {
			x = 0;
		}

		if ( y >= this.pages[x].length ) {
			y = this.pages[x].length - 1;
		} else if ( y < 0 ) {
			y = 0;
		}

		var posX = this.pages[x][y].x,
			posY = this.pages[x][y].y;

		time = time === undefined ? this.options.snapSpeed || Math.max(
			Math.max(
				Math.min(Math.abs(posX - this.x), 1000),
				Math.min(Math.abs(posY - this.y), 1000)
			), 300) : time;

		this.currentPage = {
			x: posX,
			y: posY,
			pageX: x,
			pageY: y
		};

		this.scrollTo(posX, posY, time, easing);
	},

	next: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x++;

		if ( x >= this.pages.length && this.hasVerticalScroll ) {
			x = 0;
			y++;
		}

		this.goToPage(x, y, time, easing);
	},

	prev: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x--;

		if ( x < 0 && this.hasVerticalScroll ) {
			x = 0;
			y--;
		}

		this.goToPage(x, y, time, easing);
	},

	_initKeys: function (e) {
		// default key bindings
		var keys = {
			pageUp: 33,
			pageDown: 34,
			end: 35,
			home: 36,
			left: 37,
			up: 38,
			right: 39,
			down: 40
		};
		var i;

		// if you give me characters I give you keycode
		if ( typeof this.options.keyBindings == 'object' ) {
			for ( i in this.options.keyBindings ) {
				if ( typeof this.options.keyBindings[i] == 'string' ) {
					this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
				}
			}
		} else {
			this.options.keyBindings = {};
		}

		for ( i in keys ) {
			this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
		}

		utils.addEvent(window, 'keydown', this);

		this.on('destroy', function () {
			utils.removeEvent(window, 'keydown', this);
		});
	},

	_key: function (e) {
		if ( !this.enabled ) {
			return;
		}

		var snap = this.options.snap,	// we are using this alot, better to cache it
			newX = snap ? this.currentPage.pageX : this.x,
			newY = snap ? this.currentPage.pageY : this.y,
			now = utils.getTime(),
			prevTime = this.keyTime || 0,
			acceleration = 0.250,
			pos;

		if ( this.options.useTransition && this.isInTransition ) {
			pos = this.getComputedPosition();

			this._translate(Math.round(pos.x), Math.round(pos.y));
			this.isInTransition = false;
		}

		this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

		switch ( e.keyCode ) {
			case this.options.keyBindings.pageUp:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX += snap ? 1 : this.wrapperWidth;
				} else {
					newY += snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.pageDown:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX -= snap ? 1 : this.wrapperWidth;
				} else {
					newY -= snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.end:
				newX = snap ? this.pages.length-1 : this.maxScrollX;
				newY = snap ? this.pages[0].length-1 : this.maxScrollY;
				break;
			case this.options.keyBindings.home:
				newX = 0;
				newY = 0;
				break;
			case this.options.keyBindings.left:
				newX += snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.up:
				newY += snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.right:
				newX -= snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.down:
				newY -= snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			default:
				return;
		}

		if ( snap ) {
			this.goToPage(newX, newY);
			return;
		}

		if ( newX > 0 ) {
			newX = 0;
			this.keyAcceleration = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
			this.keyAcceleration = 0;
		}

		if ( newY > 0 ) {
			newY = 0;
			this.keyAcceleration = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
			this.keyAcceleration = 0;
		}

		this.scrollTo(newX, newY, 0);

		this.keyTime = now;
	},

	_animate: function (destX, destY, duration, easingFn) {
		var that = this,
			startX = this.x,
			startY = this.y,
			startTime = utils.getTime(),
			destTime = startTime + duration;

		function step () {
			var now = utils.getTime(),
				newX, newY,
				easing;

			if ( now >= destTime ) {
				that.isAnimating = false;
				that._translate(destX, destY);

				if ( !that.resetPosition(that.options.bounceTime) ) {
					that._execEvent('scrollEnd');
				}

				return;
			}

			now = ( now - startTime ) / duration;
			easing = easingFn(now);
			newX = ( destX - startX ) * easing + startX;
			newY = ( destY - startY ) * easing + startY;
			that._translate(newX, newY);

			if ( that.isAnimating ) {
				rAF(step);
			}
		}

		this.isAnimating = true;
		step();
	},
	handleEvent: function (e) {
		switch ( e.type ) {
			case 'touchstart':
			case 'pointerdown':
			case 'MSPointerDown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'pointermove':
			case 'MSPointerMove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'pointerup':
			case 'MSPointerUp':
			case 'mouseup':
			case 'touchcancel':
			case 'pointercancel':
			case 'MSPointerCancel':
			case 'mousecancel':
				this._end(e);
				break;
			case 'orientationchange':
			case 'resize':
				this._resize();
				break;
			case 'transitionend':
			case 'webkitTransitionEnd':
			case 'oTransitionEnd':
			case 'MSTransitionEnd':
				this._transitionEnd(e);
				break;
			case 'wheel':
			case 'DOMMouseScroll':
			case 'mousewheel':
				this._wheel(e);
				break;
			case 'keydown':
				this._key(e);
				break;
			case 'click':
				if ( this.enabled && !e._constructed ) {
					e.preventDefault();
					e.stopPropagation();
				}
				break;
		}
	}
};
function createDefaultScrollbar (direction, interactive, type) {
	var scrollbar = document.createElement('div'),
		indicator = document.createElement('div');

	if ( type === true ) {
		scrollbar.style.cssText = 'position:absolute;z-index:9999';
		indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';
	}

	indicator.className = 'iScrollIndicator';

	if ( direction == 'h' ) {
		if ( type === true ) {
			scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
			indicator.style.height = '100%';
		}
		scrollbar.className = 'iScrollHorizontalScrollbar';
	} else {
		if ( type === true ) {
			scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
			indicator.style.width = '100%';
		}
		scrollbar.className = 'iScrollVerticalScrollbar';
	}

	scrollbar.style.cssText += ';overflow:hidden';

	if ( !interactive ) {
		scrollbar.style.pointerEvents = 'none';
	}

	scrollbar.appendChild(indicator);

	return scrollbar;
}

function Indicator (scroller, options) {
	this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
	this.wrapperStyle = this.wrapper.style;
	this.indicator = this.wrapper.children[0];
	this.indicatorStyle = this.indicator.style;
	this.scroller = scroller;

	this.options = {
		listenX: true,
		listenY: true,
		interactive: false,
		resize: true,
		defaultScrollbars: false,
		shrink: false,
		fade: false,
		speedRatioX: 0,
		speedRatioY: 0
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	this.sizeRatioX = 1;
	this.sizeRatioY = 1;
	this.maxPosX = 0;
	this.maxPosY = 0;

	if ( this.options.interactive ) {
		if ( !this.options.disableTouch ) {
			utils.addEvent(this.indicator, 'touchstart', this);
			utils.addEvent(window, 'touchend', this);
		}
		if ( !this.options.disablePointer ) {
			utils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
			utils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(this.indicator, 'mousedown', this);
			utils.addEvent(window, 'mouseup', this);
		}
	}

	if ( this.options.fade ) {
		this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
		var durationProp = utils.style.transitionDuration;
		this.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms';
		// remove 0.0001ms
		var self = this;
		if(utils.isBadAndroid) {
			rAF(function() {
				if(self.wrapperStyle[durationProp] === '0.0001ms') {
					self.wrapperStyle[durationProp] = '0s';
				}
			});
		}
		this.wrapperStyle.opacity = '0';
	}
}

Indicator.prototype = {
	handleEvent: function (e) {
		switch ( e.type ) {
			case 'touchstart':
			case 'pointerdown':
			case 'MSPointerDown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'pointermove':
			case 'MSPointerMove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'pointerup':
			case 'MSPointerUp':
			case 'mouseup':
			case 'touchcancel':
			case 'pointercancel':
			case 'MSPointerCancel':
			case 'mousecancel':
				this._end(e);
				break;
		}
	},

	destroy: function () {
		if ( this.options.fadeScrollbars ) {
			clearTimeout(this.fadeTimeout);
			this.fadeTimeout = null;
		}
		if ( this.options.interactive ) {
			utils.removeEvent(this.indicator, 'touchstart', this);
			utils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
			utils.removeEvent(this.indicator, 'mousedown', this);

			utils.removeEvent(window, 'touchmove', this);
			utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
			utils.removeEvent(window, 'mousemove', this);

			utils.removeEvent(window, 'touchend', this);
			utils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);
			utils.removeEvent(window, 'mouseup', this);
		}

		if ( this.options.defaultScrollbars ) {
			this.wrapper.parentNode.removeChild(this.wrapper);
		}
	},

	_start: function (e) {
		var point = e.touches ? e.touches[0] : e;

		e.preventDefault();
		e.stopPropagation();

		this.transitionTime();

		this.initiated = true;
		this.moved = false;
		this.lastPointX	= point.pageX;
		this.lastPointY	= point.pageY;

		this.startTime	= utils.getTime();

		if ( !this.options.disableTouch ) {
			utils.addEvent(window, 'touchmove', this);
		}
		if ( !this.options.disablePointer ) {
			utils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(window, 'mousemove', this);
		}

		this.scroller._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		var point = e.touches ? e.touches[0] : e,
			deltaX, deltaY,
			newX, newY,
			timestamp = utils.getTime();

		if ( !this.moved ) {
			this.scroller._execEvent('scrollStart');
		}

		this.moved = true;

		deltaX = point.pageX - this.lastPointX;
		this.lastPointX = point.pageX;

		deltaY = point.pageY - this.lastPointY;
		this.lastPointY = point.pageY;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		this._pos(newX, newY);

// INSERT POINT: indicator._move

		e.preventDefault();
		e.stopPropagation();
	},

	_end: function (e) {
		if ( !this.initiated ) {
			return;
		}

		this.initiated = false;

		e.preventDefault();
		e.stopPropagation();

		utils.removeEvent(window, 'touchmove', this);
		utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
		utils.removeEvent(window, 'mousemove', this);

		if ( this.scroller.options.snap ) {
			var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.scroller.x - snap.x), 1000),
						Math.min(Math.abs(this.scroller.y - snap.y), 1000)
					), 300);

			if ( this.scroller.x != snap.x || this.scroller.y != snap.y ) {
				this.scroller.directionX = 0;
				this.scroller.directionY = 0;
				this.scroller.currentPage = snap;
				this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
			}
		}

		if ( this.moved ) {
			this.scroller._execEvent('scrollEnd');
		}
	},

	transitionTime: function (time) {
		time = time || 0;
		var durationProp = utils.style.transitionDuration;
		this.indicatorStyle[durationProp] = time + 'ms';

		if ( !time && utils.isBadAndroid ) {
			this.indicatorStyle[durationProp] = '0.0001ms';
			// remove 0.0001ms
			var self = this;
			rAF(function() {
				if(self.indicatorStyle[durationProp] === '0.0001ms') {
					self.indicatorStyle[durationProp] = '0s';
				}
			});
		}
	},

	transitionTimingFunction: function (easing) {
		this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
	},

	refresh: function () {
		this.transitionTime();

		if ( this.options.listenX && !this.options.listenY ) {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
		} else if ( this.options.listenY && !this.options.listenX ) {
			this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
		} else {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
		}

		if ( this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll ) {
			utils.addClass(this.wrapper, 'iScrollBothScrollbars');
			utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '8px';
				} else {
					this.wrapper.style.bottom = '8px';
				}
			}
		} else {
			utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
			utils.addClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '2px';
				} else {
					this.wrapper.style.bottom = '2px';
				}
			}
		}

		var r = this.wrapper.offsetHeight;	// force refresh

		if ( this.options.listenX ) {
			this.wrapperWidth = this.wrapper.clientWidth;
			if ( this.options.resize ) {
				this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
				this.indicatorStyle.width = this.indicatorWidth + 'px';
			} else {
				this.indicatorWidth = this.indicator.clientWidth;
			}

			this.maxPosX = this.wrapperWidth - this.indicatorWidth;

			if ( this.options.shrink == 'clip' ) {
				this.minBoundaryX = -this.indicatorWidth + 8;
				this.maxBoundaryX = this.wrapperWidth - 8;
			} else {
				this.minBoundaryX = 0;
				this.maxBoundaryX = this.maxPosX;
			}

			this.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX));
		}

		if ( this.options.listenY ) {
			this.wrapperHeight = this.wrapper.clientHeight;
			if ( this.options.resize ) {
				this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
				this.indicatorStyle.height = this.indicatorHeight + 'px';
			} else {
				this.indicatorHeight = this.indicator.clientHeight;
			}

			this.maxPosY = this.wrapperHeight - this.indicatorHeight;

			if ( this.options.shrink == 'clip' ) {
				this.minBoundaryY = -this.indicatorHeight + 8;
				this.maxBoundaryY = this.wrapperHeight - 8;
			} else {
				this.minBoundaryY = 0;
				this.maxBoundaryY = this.maxPosY;
			}

			this.maxPosY = this.wrapperHeight - this.indicatorHeight;
			this.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY));
		}

		this.updatePosition();
	},

	updatePosition: function () {
		var x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,
			y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;

		if ( !this.options.ignoreBoundaries ) {
			if ( x < this.minBoundaryX ) {
				if ( this.options.shrink == 'scale' ) {
					this.width = Math.max(this.indicatorWidth + x, 8);
					this.indicatorStyle.width = this.width + 'px';
				}
				x = this.minBoundaryX;
			} else if ( x > this.maxBoundaryX ) {
				if ( this.options.shrink == 'scale' ) {
					this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);
					this.indicatorStyle.width = this.width + 'px';
					x = this.maxPosX + this.indicatorWidth - this.width;
				} else {
					x = this.maxBoundaryX;
				}
			} else if ( this.options.shrink == 'scale' && this.width != this.indicatorWidth ) {
				this.width = this.indicatorWidth;
				this.indicatorStyle.width = this.width + 'px';
			}

			if ( y < this.minBoundaryY ) {
				if ( this.options.shrink == 'scale' ) {
					this.height = Math.max(this.indicatorHeight + y * 3, 8);
					this.indicatorStyle.height = this.height + 'px';
				}
				y = this.minBoundaryY;
			} else if ( y > this.maxBoundaryY ) {
				if ( this.options.shrink == 'scale' ) {
					this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);
					this.indicatorStyle.height = this.height + 'px';
					y = this.maxPosY + this.indicatorHeight - this.height;
				} else {
					y = this.maxBoundaryY;
				}
			} else if ( this.options.shrink == 'scale' && this.height != this.indicatorHeight ) {
				this.height = this.indicatorHeight;
				this.indicatorStyle.height = this.height + 'px';
			}
		}

		this.x = x;
		this.y = y;

		if ( this.scroller.options.useTransform ) {
			this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
		} else {
			this.indicatorStyle.left = x + 'px';
			this.indicatorStyle.top = y + 'px';
		}
	},

	_pos: function (x, y) {
		if ( x < 0 ) {
			x = 0;
		} else if ( x > this.maxPosX ) {
			x = this.maxPosX;
		}

		if ( y < 0 ) {
			y = 0;
		} else if ( y > this.maxPosY ) {
			y = this.maxPosY;
		}

		x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
		y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

		this.scroller.scrollTo(x, y);
	},

	fade: function (val, hold) {
		if ( hold && !this.visible ) {
			return;
		}

		clearTimeout(this.fadeTimeout);
		this.fadeTimeout = null;

		var time = val ? 250 : 500,
			delay = val ? 0 : 300;

		val = val ? '1' : '0';

		this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';

		this.fadeTimeout = setTimeout((function (val) {
			this.wrapperStyle.opacity = val;
			this.visible = +val;
		}).bind(this, val), delay);
	}
};

IScroll.utils = utils;

if ( typeof module != 'undefined' && module.exports ) {
	module.exports = IScroll;
} else if ( typeof define == 'function' && define.amd ) {
        define( function () { return IScroll; } );
} else {
	window.IScroll = IScroll;
}

})(window, document, Math);

},{}],8:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":51,"./_hashDelete":52,"./_hashGet":53,"./_hashHas":54,"./_hashSet":55}],9:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":62,"./_listCacheDelete":63,"./_listCacheGet":64,"./_listCacheHas":65,"./_listCacheSet":66}],10:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":47,"./_root":78}],11:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":67,"./_mapCacheDelete":68,"./_mapCacheGet":69,"./_mapCacheHas":70,"./_mapCacheSet":71}],12:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":9,"./_stackClear":82,"./_stackDelete":83,"./_stackGet":84,"./_stackHas":85,"./_stackSet":86}],13:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":78}],14:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":78}],15:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],16:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":33,"./_isIndex":57,"./isArguments":92,"./isArray":93,"./isBuffer":96,"./isTypedArray":103}],17:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;

},{"./_baseAssignValue":20,"./eq":90}],18:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

},{"./_baseAssignValue":20,"./eq":90}],19:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":90}],20:[function(require,module,exports){
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

},{"./_defineProperty":44}],21:[function(require,module,exports){
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;

},{"./isObject":99}],22:[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":42}],23:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":13,"./_getRawTag":49,"./_objectToString":75}],24:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":23,"./isObjectLike":100}],25:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":60,"./_toSource":87,"./isFunction":97,"./isObject":99}],26:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":23,"./isLength":98,"./isObjectLike":100}],27:[function(require,module,exports){
var isObject = require('./isObject'),
    isPrototype = require('./_isPrototype'),
    nativeKeysIn = require('./_nativeKeysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

},{"./_isPrototype":61,"./_nativeKeysIn":73,"./isObject":99}],28:[function(require,module,exports){
var Stack = require('./_Stack'),
    assignMergeValue = require('./_assignMergeValue'),
    baseFor = require('./_baseFor'),
    baseMergeDeep = require('./_baseMergeDeep'),
    isObject = require('./isObject'),
    keysIn = require('./keysIn'),
    safeGet = require('./_safeGet');

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    if (isObject(srcValue)) {
      stack || (stack = new Stack);
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;

},{"./_Stack":12,"./_assignMergeValue":17,"./_baseFor":22,"./_baseMergeDeep":29,"./_safeGet":79,"./isObject":99,"./keysIn":104}],29:[function(require,module,exports){
var assignMergeValue = require('./_assignMergeValue'),
    cloneBuffer = require('./_cloneBuffer'),
    cloneTypedArray = require('./_cloneTypedArray'),
    copyArray = require('./_copyArray'),
    initCloneObject = require('./_initCloneObject'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    isBuffer = require('./isBuffer'),
    isFunction = require('./isFunction'),
    isObject = require('./isObject'),
    isPlainObject = require('./isPlainObject'),
    isTypedArray = require('./isTypedArray'),
    safeGet = require('./_safeGet'),
    toPlainObject = require('./toPlainObject');

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;

},{"./_assignMergeValue":17,"./_cloneBuffer":36,"./_cloneTypedArray":37,"./_copyArray":38,"./_initCloneObject":56,"./_safeGet":79,"./isArguments":92,"./isArray":93,"./isArrayLikeObject":95,"./isBuffer":96,"./isFunction":97,"./isObject":99,"./isPlainObject":101,"./isTypedArray":103,"./toPlainObject":112}],30:[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

module.exports = baseRange;

},{}],31:[function(require,module,exports){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./_overRest":77,"./_setToString":80,"./identity":91}],32:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":44,"./constant":88,"./identity":91}],33:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],34:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],35:[function(require,module,exports){
var Uint8Array = require('./_Uint8Array');

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

},{"./_Uint8Array":14}],36:[function(require,module,exports){
var root = require('./_root');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

},{"./_root":78}],37:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":35}],38:[function(require,module,exports){
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

},{}],39:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":18,"./_baseAssignValue":20}],40:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":78}],41:[function(require,module,exports){
var baseRest = require('./_baseRest'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"./_baseRest":31,"./_isIterateeCall":58}],42:[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],43:[function(require,module,exports){
var baseRange = require('./_baseRange'),
    isIterateeCall = require('./_isIterateeCall'),
    toFinite = require('./toFinite');

/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */
function createRange(fromRight) {
  return function(start, end, step) {
    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
      end = step = undefined;
    }
    // Ensure the sign of `-0` is preserved.
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
    return baseRange(start, end, step, fromRight);
  };
}

module.exports = createRange;

},{"./_baseRange":30,"./_isIterateeCall":58,"./toFinite":110}],44:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":47}],45:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],46:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":59}],47:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":25,"./_getValue":50}],48:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":76}],49:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":13}],50:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],51:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":72}],52:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],53:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":72}],54:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":72}],55:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":72}],56:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    getPrototype = require('./_getPrototype'),
    isPrototype = require('./_isPrototype');

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;

},{"./_baseCreate":21,"./_getPrototype":48,"./_isPrototype":61}],57:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],58:[function(require,module,exports){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./_isIndex":57,"./eq":90,"./isArrayLike":94,"./isObject":99}],59:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],60:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":40}],61:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],62:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],63:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":19}],64:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":19}],65:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":19}],66:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":19}],67:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":8,"./_ListCache":9,"./_Map":10}],68:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":46}],69:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":46}],70:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":46}],71:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":46}],72:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":47}],73:[function(require,module,exports){
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

},{}],74:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":45}],75:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],76:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],77:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":15}],78:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":45}],79:[function(require,module,exports){
/**
 * Gets the value at `key`, unless `key` is "__proto__".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;

},{}],80:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":32,"./_shortOut":81}],81:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],82:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":9}],83:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],84:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],85:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],86:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":9,"./_Map":10,"./_MapCache":11}],87:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],88:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],89:[function(require,module,exports){
var isObject = require('./isObject'),
    now = require('./now'),
    toNumber = require('./toNumber');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;

},{"./isObject":99,"./now":106,"./toNumber":111}],90:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],91:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],92:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":24,"./isObjectLike":100}],93:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],94:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":97,"./isLength":98}],95:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":94,"./isObjectLike":100}],96:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":78,"./stubFalse":108}],97:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":23,"./isObject":99}],98:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],99:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],100:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],101:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":23,"./_getPrototype":48,"./isObjectLike":100}],102:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":23,"./isObjectLike":100}],103:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":26,"./_baseUnary":34,"./_nodeUtil":74}],104:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeysIn = require('./_baseKeysIn'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

},{"./_arrayLikeKeys":16,"./_baseKeysIn":27,"./isArrayLike":94}],105:[function(require,module,exports){
var baseMerge = require('./_baseMerge'),
    createAssigner = require('./_createAssigner');

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;

},{"./_baseMerge":28,"./_createAssigner":41}],106:[function(require,module,exports){
var root = require('./_root');

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;

},{"./_root":78}],107:[function(require,module,exports){
var createRange = require('./_createRange');

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */
var range = createRange();

module.exports = range;

},{"./_createRange":43}],108:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],109:[function(require,module,exports){
var debounce = require('./debounce'),
    isObject = require('./isObject');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;

},{"./debounce":89,"./isObject":99}],110:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":111}],111:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":99,"./isSymbol":102}],112:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;

},{"./_copyObject":39,"./keysIn":104}],113:[function(require,module,exports){
"use strict"

var hyperscript = require("./render/hyperscript")

hyperscript.trust = require("./render/trust")
hyperscript.fragment = require("./render/fragment")

module.exports = hyperscript

},{"./render/fragment":116,"./render/hyperscript":117,"./render/trust":119}],114:[function(require,module,exports){
(function (global,setImmediate){
;(function() {
"use strict"
function Vnode(tag, key, attrs0, children, text, dom) {
	return {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}
}
Vnode.normalize = function(node) {
	if (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)
	if (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)
	return node
}
Vnode.normalizeChildren = function normalizeChildren(children) {
	for (var i = 0; i < children.length; i++) {
		children[i] = Vnode.normalize(children[i])
	}
	return children
}
var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g
var selectorCache = {}
var hasOwn = {}.hasOwnProperty
function isEmpty(object) {
	for (var key in object) if (hasOwn.call(object, key)) return false
	return true
}
function compileSelector(selector) {
	var match, tag = "div", classes = [], attrs = {}
	while (match = selectorParser.exec(selector)) {
		var type = match[1], value = match[2]
		if (type === "" && value !== "") tag = value
		else if (type === "#") attrs.id = value
		else if (type === ".") classes.push(value)
		else if (match[3][0] === "[") {
			var attrValue = match[6]
			if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\")
			if (match[4] === "class") classes.push(attrValue)
			else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true
		}
	}
	if (classes.length > 0) attrs.className = classes.join(" ")
	return selectorCache[selector] = {tag: tag, attrs: attrs}
}
function execSelector(state, attrs, children) {
	var hasAttrs = false, childList, text
	var className = attrs.className || attrs.class
	if (!isEmpty(state.attrs) && !isEmpty(attrs)) {
		var newAttrs = {}
		for(var key in attrs) {
			if (hasOwn.call(attrs, key)) {
				newAttrs[key] = attrs[key]
			}
		}
		attrs = newAttrs
	}
	for (var key in state.attrs) {
		if (hasOwn.call(state.attrs, key)) {
			attrs[key] = state.attrs[key]
		}
	}
	if (className !== undefined) {
		if (attrs.class !== undefined) {
			attrs.class = undefined
			attrs.className = className
		}
		if (state.attrs.className != null) {
			attrs.className = state.attrs.className + " " + className
		}
	}
	for (var key in attrs) {
		if (hasOwn.call(attrs, key) && key !== "key") {
			hasAttrs = true
			break
		}
	}
	if (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {
		text = children[0].children
	} else {
		childList = children
	}
	return Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)
}
function hyperscript(selector) {
	// Because sloppy mode sucks
	var attrs = arguments[1], start = 2, children
	if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {
		throw Error("The selector must be either a string or a component.");
	}
	if (typeof selector === "string") {
		var cached = selectorCache[selector] || compileSelector(selector)
	}
	if (attrs == null) {
		attrs = {}
	} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
		attrs = {}
		start = 1
	}
	if (arguments.length === start + 1) {
		children = arguments[start]
		if (!Array.isArray(children)) children = [children]
	} else {
		children = []
		while (start < arguments.length) children.push(arguments[start++])
	}
	var normalized = Vnode.normalizeChildren(children)
	if (typeof selector === "string") {
		return execSelector(cached, attrs, normalized)
	} else {
		return Vnode(selector, attrs.key, attrs, normalized)
	}
}
hyperscript.trust = function(html) {
	if (html == null) html = ""
	return Vnode("<", undefined, undefined, html, undefined, undefined)
}
hyperscript.fragment = function(attrs1, children) {
	return Vnode("[", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)
}
var m = hyperscript
/** @constructor */
var PromisePolyfill = function(executor) {
	if (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")
	if (typeof executor !== "function") throw new TypeError("executor must be a function")
	var self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)
	var instance = self._instance = {resolvers: resolvers, rejectors: rejectors}
	var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout
	function handler(list, shouldAbsorb) {
		return function execute(value) {
			var then
			try {
				if (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {
					if (value === self) throw new TypeError("Promise can't be resolved w/ itself")
					executeOnce(then.bind(value))
				}
				else {
					callAsync(function() {
						if (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)
						for (var i = 0; i < list.length; i++) list[i](value)
						resolvers.length = 0, rejectors.length = 0
						instance.state = shouldAbsorb
						instance.retry = function() {execute(value)}
					})
				}
			}
			catch (e) {
				rejectCurrent(e)
			}
		}
	}
	function executeOnce(then) {
		var runs = 0
		function run(fn) {
			return function(value) {
				if (runs++ > 0) return
				fn(value)
			}
		}
		var onerror = run(rejectCurrent)
		try {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}
	}
	executeOnce(executor)
}
PromisePolyfill.prototype.then = function(onFulfilled, onRejection) {
	var self = this, instance = self._instance
	function handle(callback, list, next, state) {
		list.push(function(value) {
			if (typeof callback !== "function") next(value)
			else try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}
		})
		if (typeof instance.retry === "function" && state === instance.state) instance.retry()
	}
	var resolveNext, rejectNext
	var promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})
	handle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)
	return promise
}
PromisePolyfill.prototype.catch = function(onRejection) {
	return this.then(null, onRejection)
}
PromisePolyfill.resolve = function(value) {
	if (value instanceof PromisePolyfill) return value
	return new PromisePolyfill(function(resolve) {resolve(value)})
}
PromisePolyfill.reject = function(value) {
	return new PromisePolyfill(function(resolve, reject) {reject(value)})
}
PromisePolyfill.all = function(list) {
	return new PromisePolyfill(function(resolve, reject) {
		var total = list.length, count = 0, values = []
		if (list.length === 0) resolve([])
		else for (var i = 0; i < list.length; i++) {
			(function(i) {
				function consume(value) {
					count++
					values[i] = value
					if (count === total) resolve(values)
				}
				if (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {
					list[i].then(consume, reject)
				}
				else consume(list[i])
			})(i)
		}
	})
}
PromisePolyfill.race = function(list) {
	return new PromisePolyfill(function(resolve, reject) {
		for (var i = 0; i < list.length; i++) {
			list[i].then(resolve, reject)
		}
	})
}
if (typeof window !== "undefined") {
	if (typeof window.Promise === "undefined") window.Promise = PromisePolyfill
	var PromisePolyfill = window.Promise
} else if (typeof global !== "undefined") {
	if (typeof global.Promise === "undefined") global.Promise = PromisePolyfill
	var PromisePolyfill = global.Promise
} else {
}
var buildQueryString = function(object) {
	if (Object.prototype.toString.call(object) !== "[object Object]") return ""
	var args = []
	for (var key0 in object) {
		destructure(key0, object[key0])
	}
	return args.join("&")
	function destructure(key0, value) {
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				destructure(key0 + "[" + i + "]", value[i])
			}
		}
		else if (Object.prototype.toString.call(value) === "[object Object]") {
			for (var i in value) {
				destructure(key0 + "[" + i + "]", value[i])
			}
		}
		else args.push(encodeURIComponent(key0) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))
	}
}
var FILE_PROTOCOL_REGEX = new RegExp("^file://", "i")
var _8 = function($window, Promise) {
	var callbackCount = 0
	var oncompletion
	function setCompletionCallback(callback) {oncompletion = callback}
	function finalizer() {
		var count = 0
		function complete() {if (--count === 0 && typeof oncompletion === "function") oncompletion()}
		return function finalize(promise0) {
			var then0 = promise0.then
			promise0.then = function() {
				count++
				var next = then0.apply(promise0, arguments)
				next.then(complete, function(e) {
					complete()
					if (count === 0) throw e
				})
				return finalize(next)
			}
			return promise0
		}
	}
	function normalize(args, extra) {
		if (typeof args === "string") {
			var url = args
			args = extra || {}
			if (args.url == null) args.url = url
		}
		return args
	}
	function request(args, extra) {
		var finalize = finalizer()
		args = normalize(args, extra)
		var promise0 = new Promise(function(resolve, reject) {
			if (args.method == null) args.method = "GET"
			args.method = args.method.toUpperCase()
			var useBody = (args.method === "GET" || args.method === "TRACE") ? false : (typeof args.useBody === "boolean" ? args.useBody : true)
			if (typeof args.serialize !== "function") args.serialize = typeof FormData !== "undefined" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify
			if (typeof args.deserialize !== "function") args.deserialize = deserialize
			if (typeof args.extract !== "function") args.extract = extract
			args.url = interpolate(args.url, args.data)
			if (useBody) args.data = args.serialize(args.data)
			else args.url = assemble(args.url, args.data)
			var xhr = new $window.XMLHttpRequest(),
				aborted = false,
				_abort = xhr.abort
			xhr.abort = function abort() {
				aborted = true
				_abort.call(xhr)
			}
			xhr.open(args.method, args.url, typeof args.async === "boolean" ? args.async : true, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)
			if (args.serialize === JSON.stringify && useBody && !(args.headers && args.headers.hasOwnProperty("Content-Type"))) {
				xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")
			}
			if (args.deserialize === deserialize && !(args.headers && args.headers.hasOwnProperty("Accept"))) {
				xhr.setRequestHeader("Accept", "application/json, text/*")
			}
			if (args.withCredentials) xhr.withCredentials = args.withCredentials
			for (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {
				xhr.setRequestHeader(key, args.headers[key])
			}
			if (typeof args.config === "function") xhr = args.config(xhr, args) || xhr
			xhr.onreadystatechange = function() {
				// Don't throw errors on xhr.abort().
				if(aborted) return
				if (xhr.readyState === 4) {
					try {
						var response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))
						if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {
							resolve(cast(args.type, response))
						}
						else {
							var error = new Error(xhr.responseText)
							for (var key in response) error[key] = response[key]
							reject(error)
						}
					}
					catch (e) {
						reject(e)
					}
				}
			}
			if (useBody && (args.data != null)) xhr.send(args.data)
			else xhr.send()
		})
		return args.background === true ? promise0 : finalize(promise0)
	}
	function jsonp(args, extra) {
		var finalize = finalizer()
		args = normalize(args, extra)
		var promise0 = new Promise(function(resolve, reject) {
			var callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++
			var script = $window.document.createElement("script")
			$window[callbackName] = function(data) {
				script.parentNode.removeChild(script)
				resolve(cast(args.type, data))
				delete $window[callbackName]
			}
			script.onerror = function() {
				script.parentNode.removeChild(script)
				reject(new Error("JSONP request failed"))
				delete $window[callbackName]
			}
			if (args.data == null) args.data = {}
			args.url = interpolate(args.url, args.data)
			args.data[args.callbackKey || "callback"] = callbackName
			script.src = assemble(args.url, args.data)
			$window.document.documentElement.appendChild(script)
		})
		return args.background === true? promise0 : finalize(promise0)
	}
	function interpolate(url, data) {
		if (data == null) return url
		var tokens = url.match(/:[^\/]+/gi) || []
		for (var i = 0; i < tokens.length; i++) {
			var key = tokens[i].slice(1)
			if (data[key] != null) {
				url = url.replace(tokens[i], data[key])
			}
		}
		return url
	}
	function assemble(url, data) {
		var querystring = buildQueryString(data)
		if (querystring !== "") {
			var prefix = url.indexOf("?") < 0 ? "?" : "&"
			url += prefix + querystring
		}
		return url
	}
	function deserialize(data) {
		try {return data !== "" ? JSON.parse(data) : null}
		catch (e) {throw new Error(data)}
	}
	function extract(xhr) {return xhr.responseText}
	function cast(type0, data) {
		if (typeof type0 === "function") {
			if (Array.isArray(data)) {
				for (var i = 0; i < data.length; i++) {
					data[i] = new type0(data[i])
				}
			}
			else return new type0(data)
		}
		return data
	}
	return {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}
}
var requestService = _8(window, PromisePolyfill)
var coreRenderer = function($window) {
	var $doc = $window.document
	var $emptyFragment = $doc.createDocumentFragment()
	var nameSpace = {
		svg: "http://www.w3.org/2000/svg",
		math: "http://www.w3.org/1998/Math/MathML"
	}
	var onevent
	function setEventCallback(callback) {return onevent = callback}
	function getNameSpace(vnode) {
		return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]
	}
	//create
	function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				createNode(parent, vnode, hooks, ns, nextSibling)
			}
		}
	}
	function createNode(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		if (typeof tag === "string") {
			vnode.state = {}
			if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
			switch (tag) {
				case "#": return createText(parent, vnode, nextSibling)
				case "<": return createHTML(parent, vnode, nextSibling)
				case "[": return createFragment(parent, vnode, hooks, ns, nextSibling)
				default: return createElement(parent, vnode, hooks, ns, nextSibling)
			}
		}
		else return createComponent(parent, vnode, hooks, ns, nextSibling)
	}
	function createText(parent, vnode, nextSibling) {
		vnode.dom = $doc.createTextNode(vnode.children)
		insertNode(parent, vnode.dom, nextSibling)
		return vnode.dom
	}
	function createHTML(parent, vnode, nextSibling) {
		var match1 = vnode.children.match(/^\s*?<(\w+)/im) || []
		var parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match1[1]] || "div"
		var temp = $doc.createElement(parent1)
		temp.innerHTML = vnode.children
		vnode.dom = temp.firstChild
		vnode.domSize = temp.childNodes.length
		var fragment = $doc.createDocumentFragment()
		var child
		while (child = temp.firstChild) {
			fragment.appendChild(child)
		}
		insertNode(parent, fragment, nextSibling)
		return fragment
	}
	function createFragment(parent, vnode, hooks, ns, nextSibling) {
		var fragment = $doc.createDocumentFragment()
		if (vnode.children != null) {
			var children = vnode.children
			createNodes(fragment, children, 0, children.length, hooks, null, ns)
		}
		vnode.dom = fragment.firstChild
		vnode.domSize = fragment.childNodes.length
		insertNode(parent, fragment, nextSibling)
		return fragment
	}
	function createElement(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		var attrs2 = vnode.attrs
		var is = attrs2 && attrs2.is
		ns = getNameSpace(vnode) || ns
		var element = ns ?
			is ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :
			is ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)
		vnode.dom = element
		if (attrs2 != null) {
			setAttrs(vnode, attrs2, ns)
		}
		insertNode(parent, element, nextSibling)
		if (vnode.attrs != null && vnode.attrs.contenteditable != null) {
			setContentEditable(vnode)
		}
		else {
			if (vnode.text != null) {
				if (vnode.text !== "") element.textContent = vnode.text
				else vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
			}
			if (vnode.children != null) {
				var children = vnode.children
				createNodes(element, children, 0, children.length, hooks, null, ns)
				setLateAttrs(vnode)
			}
		}
		return element
	}
	function initComponent(vnode, hooks) {
		var sentinel
		if (typeof vnode.tag.view === "function") {
			vnode.state = Object.create(vnode.tag)
			sentinel = vnode.state.view
			if (sentinel.$$reentrantLock$$ != null) return $emptyFragment
			sentinel.$$reentrantLock$$ = true
		} else {
			vnode.state = void 0
			sentinel = vnode.tag
			if (sentinel.$$reentrantLock$$ != null) return $emptyFragment
			sentinel.$$reentrantLock$$ = true
			vnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)
		}
		vnode._state = vnode.state
		if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
		initLifecycle(vnode._state, vnode, hooks)
		vnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))
		if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
		sentinel.$$reentrantLock$$ = null
	}
	function createComponent(parent, vnode, hooks, ns, nextSibling) {
		initComponent(vnode, hooks)
		if (vnode.instance != null) {
			var element = createNode(parent, vnode.instance, hooks, ns, nextSibling)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0
			insertNode(parent, element, nextSibling)
			return element
		}
		else {
			vnode.domSize = 0
			return $emptyFragment
		}
	}
	//update
	function updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {
		if (old === vnodes || old == null && vnodes == null) return
		else if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)
		else if (vnodes == null) removeNodes(old, 0, old.length, vnodes)
		else {
			if (old.length === vnodes.length) {
				var isUnkeyed = false
				for (var i = 0; i < vnodes.length; i++) {
					if (vnodes[i] != null && old[i] != null) {
						isUnkeyed = vnodes[i].key == null && old[i].key == null
						break
					}
				}
				if (isUnkeyed) {
					for (var i = 0; i < old.length; i++) {
						if (old[i] === vnodes[i]) continue
						else if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))
						else if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)
						else updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)
					}
					return
				}
			}
			recycling = recycling || isRecyclable(old, vnodes)
			if (recycling) {
				var pool = old.pool
				old = old.concat(old.pool)
			}
			var oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map
			while (oldEnd >= oldStart && end >= start) {
				var o = old[oldStart], v = vnodes[start]
				if (o === v && !recycling) oldStart++, start++
				else if (o == null) oldStart++
				else if (v == null) start++
				else if (o.key === v.key) {
					var shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)
					oldStart++, start++
					updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)
					if (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)
				}
				else {
					var o = old[oldEnd]
					if (o === v && !recycling) oldEnd--, start++
					else if (o == null) oldEnd--
					else if (v == null) start++
					else if (o.key === v.key) {
						var shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)
						updateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)
						if (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))
						oldEnd--, start++
					}
					else break
				}
			}
			while (oldEnd >= oldStart && end >= start) {
				var o = old[oldEnd], v = vnodes[end]
				if (o === v && !recycling) oldEnd--, end--
				else if (o == null) oldEnd--
				else if (v == null) end--
				else if (o.key === v.key) {
					var shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)
					updateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)
					if (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)
					if (o.dom != null) nextSibling = o.dom
					oldEnd--, end--
				}
				else {
					if (!map) map = getKeyMap(old, oldEnd)
					if (v != null) {
						var oldIndex = map[v.key]
						if (oldIndex != null) {
							var movable = old[oldIndex]
							var shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)
							updateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)
							insertNode(parent, toFragment(movable), nextSibling)
							old[oldIndex].skip = true
							if (movable.dom != null) nextSibling = movable.dom
						}
						else {
							var dom = createNode(parent, v, hooks, ns, nextSibling)
							nextSibling = dom
						}
					}
					end--
				}
				if (end < start) break
			}
			createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)
			removeNodes(old, oldStart, oldEnd + 1, vnodes)
		}
	}
	function updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {
		var oldTag = old.tag, tag = vnode.tag
		if (oldTag === tag) {
			vnode.state = old.state
			vnode._state = old._state
			vnode.events = old.events
			if (!recycling && shouldNotUpdate(vnode, old)) return
			if (typeof oldTag === "string") {
				if (vnode.attrs != null) {
					if (recycling) {
						vnode.state = {}
						initLifecycle(vnode.attrs, vnode, hooks)
					}
					else updateLifecycle(vnode.attrs, vnode, hooks)
				}
				switch (oldTag) {
					case "#": updateText(old, vnode); break
					case "<": updateHTML(parent, old, vnode, nextSibling); break
					case "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break
					default: updateElement(old, vnode, recycling, hooks, ns)
				}
			}
			else updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)
		}
		else {
			removeNode(old, null)
			createNode(parent, vnode, hooks, ns, nextSibling)
		}
	}
	function updateText(old, vnode) {
		if (old.children.toString() !== vnode.children.toString()) {
			old.dom.nodeValue = vnode.children
		}
		vnode.dom = old.dom
	}
	function updateHTML(parent, old, vnode, nextSibling) {
		if (old.children !== vnode.children) {
			toFragment(old)
			createHTML(parent, vnode, nextSibling)
		}
		else vnode.dom = old.dom, vnode.domSize = old.domSize
	}
	function updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {
		updateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)
		var domSize = 0, children = vnode.children
		vnode.dom = null
		if (children != null) {
			for (var i = 0; i < children.length; i++) {
				var child = children[i]
				if (child != null && child.dom != null) {
					if (vnode.dom == null) vnode.dom = child.dom
					domSize += child.domSize || 1
				}
			}
			if (domSize !== 1) vnode.domSize = domSize
		}
	}
	function updateElement(old, vnode, recycling, hooks, ns) {
		var element = vnode.dom = old.dom
		ns = getNameSpace(vnode) || ns
		if (vnode.tag === "textarea") {
			if (vnode.attrs == null) vnode.attrs = {}
			if (vnode.text != null) {
				vnode.attrs.value = vnode.text //FIXME handle0 multiple children
				vnode.text = undefined
			}
		}
		updateAttrs(vnode, old.attrs, vnode.attrs, ns)
		if (vnode.attrs != null && vnode.attrs.contenteditable != null) {
			setContentEditable(vnode)
		}
		else if (old.text != null && vnode.text != null && vnode.text !== "") {
			if (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text
		}
		else {
			if (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]
			if (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
			updateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)
		}
	}
	function updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {
		if (recycling) {
			initComponent(vnode, hooks)
		} else {
			vnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))
			if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
			if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)
			updateLifecycle(vnode._state, vnode, hooks)
		}
		if (vnode.instance != null) {
			if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)
			else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.instance.domSize
		}
		else if (old.instance != null) {
			removeNode(old.instance, null)
			vnode.dom = undefined
			vnode.domSize = 0
		}
		else {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
		}
	}
	function isRecyclable(old, vnodes) {
		if (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {
			var oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0
			var poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0
			var vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0
			if (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {
				return true
			}
		}
		return false
	}
	function getKeyMap(vnodes, end) {
		var map = {}, i = 0
		for (var i = 0; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				var key2 = vnode.key
				if (key2 != null) map[key2] = i
			}
		}
		return map
	}
	function toFragment(vnode) {
		var count0 = vnode.domSize
		if (count0 != null || vnode.dom == null) {
			var fragment = $doc.createDocumentFragment()
			if (count0 > 0) {
				var dom = vnode.dom
				while (--count0) fragment.appendChild(dom.nextSibling)
				fragment.insertBefore(dom, fragment.firstChild)
			}
			return fragment
		}
		else return vnode.dom
	}
	function getNextSibling(vnodes, i, nextSibling) {
		for (; i < vnodes.length; i++) {
			if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom
		}
		return nextSibling
	}
	function insertNode(parent, dom, nextSibling) {
		if (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)
		else parent.appendChild(dom)
	}
	function setContentEditable(vnode) {
		var children = vnode.children
		if (children != null && children.length === 1 && children[0].tag === "<") {
			var content = children[0].children
			if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content
		}
		else if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")
	}
	//remove
	function removeNodes(vnodes, start, end, context) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				if (vnode.skip) vnode.skip = false
				else removeNode(vnode, context)
			}
		}
	}
	function removeNode(vnode, context) {
		var expected = 1, called = 0
		if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
			var result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)
			if (result != null && typeof result.then === "function") {
				expected++
				result.then(continuation, continuation)
			}
		}
		if (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {
			var result = vnode._state.onbeforeremove.call(vnode.state, vnode)
			if (result != null && typeof result.then === "function") {
				expected++
				result.then(continuation, continuation)
			}
		}
		continuation()
		function continuation() {
			if (++called === expected) {
				onremove(vnode)
				if (vnode.dom) {
					var count0 = vnode.domSize || 1
					if (count0 > 1) {
						var dom = vnode.dom
						while (--count0) {
							removeNodeFromDOM(dom.nextSibling)
						}
					}
					removeNodeFromDOM(vnode.dom)
					if (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements
						if (!context.pool) context.pool = [vnode]
						else context.pool.push(vnode)
					}
				}
			}
		}
	}
	function removeNodeFromDOM(node) {
		var parent = node.parentNode
		if (parent != null) parent.removeChild(node)
	}
	function onremove(vnode) {
		if (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)
		if (typeof vnode.tag !== "string") {
			if (typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)
			if (vnode.instance != null) onremove(vnode.instance)
		} else {
			var children = vnode.children
			if (Array.isArray(children)) {
				for (var i = 0; i < children.length; i++) {
					var child = children[i]
					if (child != null) onremove(child)
				}
			}
		}
	}
	//attrs2
	function setAttrs(vnode, attrs2, ns) {
		for (var key2 in attrs2) {
			setAttr(vnode, key2, null, attrs2[key2], ns)
		}
	}
	function setAttr(vnode, key2, old, value, ns) {
		var element = vnode.dom
		if (key2 === "key" || key2 === "is" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key2)) return
		var nsLastIndex = key2.indexOf(":")
		if (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === "xlink") {
			element.setAttributeNS("http://www.w3.org/1999/xlink", key2.slice(nsLastIndex + 1), value)
		}
		else if (key2[0] === "o" && key2[1] === "n" && typeof value === "function") updateEvent(vnode, key2, value)
		else if (key2 === "style") updateStyle(element, old, value)
		else if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {
			if (key2 === "value") {
				var normalized0 = "" + value // eslint-disable-line no-implicit-coercion
				//setting input[value] to same value by typing on focused element moves cursor to end in Chrome
				if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return
				//setting select[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "select") {
					if (value === null) {
						if (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return
					} else {
						if (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return
					}
				}
				//setting option[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "option" && old != null && vnode.dom.value === normalized0) return
			}
			// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.
			if (vnode.tag === "input" && key2 === "type") {
				element.setAttribute(key2, value)
				return
			}
			element[key2] = value
		}
		else {
			if (typeof value === "boolean") {
				if (value) element.setAttribute(key2, "")
				else element.removeAttribute(key2)
			}
			else element.setAttribute(key2 === "className" ? "class" : key2, value)
		}
	}
	function setLateAttrs(vnode) {
		var attrs2 = vnode.attrs
		if (vnode.tag === "select" && attrs2 != null) {
			if ("value" in attrs2) setAttr(vnode, "value", null, attrs2.value, undefined)
			if ("selectedIndex" in attrs2) setAttr(vnode, "selectedIndex", null, attrs2.selectedIndex, undefined)
		}
	}
	function updateAttrs(vnode, old, attrs2, ns) {
		if (attrs2 != null) {
			for (var key2 in attrs2) {
				setAttr(vnode, key2, old && old[key2], attrs2[key2], ns)
			}
		}
		if (old != null) {
			for (var key2 in old) {
				if (attrs2 == null || !(key2 in attrs2)) {
					if (key2 === "className") key2 = "class"
					if (key2[0] === "o" && key2[1] === "n" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)
					else if (key2 !== "key") vnode.dom.removeAttribute(key2)
				}
			}
		}
	}
	function isFormAttribute(vnode, attr) {
		return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement
	}
	function isLifecycleMethod(attr) {
		return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"
	}
	function isAttribute(attr) {
		return attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"
	}
	function isCustomElement(vnode){
		return vnode.attrs.is || vnode.tag.indexOf("-") > -1
	}
	function hasIntegrationMethods(source) {
		return source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)
	}
	//style
	function updateStyle(element, old, style) {
		if (old === style) element.style.cssText = "", old = null
		if (style == null) element.style.cssText = ""
		else if (typeof style === "string") element.style.cssText = style
		else {
			if (typeof old === "string") element.style.cssText = ""
			for (var key2 in style) {
				element.style[key2] = style[key2]
			}
			if (old != null && typeof old !== "string") {
				for (var key2 in old) {
					if (!(key2 in style)) element.style[key2] = ""
				}
			}
		}
	}
	//event
	function updateEvent(vnode, key2, value) {
		var element = vnode.dom
		var callback = typeof onevent !== "function" ? value : function(e) {
			var result = value.call(element, e)
			onevent.call(element, e)
			return result
		}
		if (key2 in element) element[key2] = typeof value === "function" ? callback : null
		else {
			var eventName = key2.slice(2)
			if (vnode.events === undefined) vnode.events = {}
			if (vnode.events[key2] === callback) return
			if (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)
			if (typeof value === "function") {
				vnode.events[key2] = callback
				element.addEventListener(eventName, vnode.events[key2], false)
			}
		}
	}
	//lifecycle
	function initLifecycle(source, vnode, hooks) {
		if (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)
		if (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))
	}
	function updateLifecycle(source, vnode, hooks) {
		if (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))
	}
	function shouldNotUpdate(vnode, old) {
		var forceVnodeUpdate, forceComponentUpdate
		if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)
		if (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)
		if (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
			vnode.instance = old.instance
			return true
		}
		return false
	}
	function render(dom, vnodes) {
		if (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")
		var hooks = []
		var active = $doc.activeElement
		var namespace = dom.namespaceURI
		// First time0 rendering into a node clears it out
		if (dom.vnodes == null) dom.textContent = ""
		if (!Array.isArray(vnodes)) vnodes = [vnodes]
		updateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)
		dom.vnodes = vnodes
		// document.activeElement can return null in IE https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
		if (active != null && $doc.activeElement !== active) active.focus()
		for (var i = 0; i < hooks.length; i++) hooks[i]()
	}
	return {render: render, setEventCallback: setEventCallback}
}
function throttle(callback) {
	//60fps translates to 16.6ms, round it down since setTimeout requires int
	var time = 16
	var last = 0, pending = null
	var timeout = typeof requestAnimationFrame === "function" ? requestAnimationFrame : setTimeout
	return function() {
		var now = Date.now()
		if (last === 0 || now - last >= time) {
			last = now
			callback()
		}
		else if (pending === null) {
			pending = timeout(function() {
				pending = null
				callback()
				last = Date.now()
			}, time - (now - last))
		}
	}
}
var _11 = function($window) {
	var renderService = coreRenderer($window)
	renderService.setEventCallback(function(e) {
		if (e.redraw === false) e.redraw = undefined
		else redraw()
	})
	var callbacks = []
	function subscribe(key1, callback) {
		unsubscribe(key1)
		callbacks.push(key1, throttle(callback))
	}
	function unsubscribe(key1) {
		var index = callbacks.indexOf(key1)
		if (index > -1) callbacks.splice(index, 2)
	}
	function redraw() {
		for (var i = 1; i < callbacks.length; i += 2) {
			callbacks[i]()
		}
	}
	return {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}
}
var redrawService = _11(window)
requestService.setCompletionCallback(redrawService.redraw)
var _16 = function(redrawService0) {
	return function(root, component) {
		if (component === null) {
			redrawService0.render(root, [])
			redrawService0.unsubscribe(root)
			return
		}
		
		if (component.view == null && typeof component !== "function") throw new Error("m.mount(element, component) expects a component, not a vnode")
		
		var run0 = function() {
			redrawService0.render(root, Vnode(component))
		}
		redrawService0.subscribe(root, run0)
		redrawService0.redraw()
	}
}
m.mount = _16(redrawService)
var Promise = PromisePolyfill
var parseQueryString = function(string) {
	if (string === "" || string == null) return {}
	if (string.charAt(0) === "?") string = string.slice(1)
	var entries = string.split("&"), data0 = {}, counters = {}
	for (var i = 0; i < entries.length; i++) {
		var entry = entries[i].split("=")
		var key5 = decodeURIComponent(entry[0])
		var value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""
		if (value === "true") value = true
		else if (value === "false") value = false
		var levels = key5.split(/\]\[?|\[/)
		var cursor = data0
		if (key5.indexOf("[") > -1) levels.pop()
		for (var j = 0; j < levels.length; j++) {
			var level = levels[j], nextLevel = levels[j + 1]
			var isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))
			var isValue = j === levels.length - 1
			if (level === "") {
				var key5 = levels.slice(0, j).join()
				if (counters[key5] == null) counters[key5] = 0
				level = counters[key5]++
			}
			if (cursor[level] == null) {
				cursor[level] = isValue ? value : isNumber ? [] : {}
			}
			cursor = cursor[level]
		}
	}
	return data0
}
var coreRouter = function($window) {
	var supportsPushState = typeof $window.history.pushState === "function"
	var callAsync0 = typeof setImmediate === "function" ? setImmediate : setTimeout
	function normalize1(fragment0) {
		var data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)
		if (fragment0 === "pathname" && data[0] !== "/") data = "/" + data
		return data
	}
	var asyncId
	function debounceAsync(callback0) {
		return function() {
			if (asyncId != null) return
			asyncId = callAsync0(function() {
				asyncId = null
				callback0()
			})
		}
	}
	function parsePath(path, queryData, hashData) {
		var queryIndex = path.indexOf("?")
		var hashIndex = path.indexOf("#")
		var pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length
		if (queryIndex > -1) {
			var queryEnd = hashIndex > -1 ? hashIndex : path.length
			var queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))
			for (var key4 in queryParams) queryData[key4] = queryParams[key4]
		}
		if (hashIndex > -1) {
			var hashParams = parseQueryString(path.slice(hashIndex + 1))
			for (var key4 in hashParams) hashData[key4] = hashParams[key4]
		}
		return path.slice(0, pathEnd)
	}
	var router = {prefix: "#!"}
	router.getPath = function() {
		var type2 = router.prefix.charAt(0)
		switch (type2) {
			case "#": return normalize1("hash").slice(router.prefix.length)
			case "?": return normalize1("search").slice(router.prefix.length) + normalize1("hash")
			default: return normalize1("pathname").slice(router.prefix.length) + normalize1("search") + normalize1("hash")
		}
	}
	router.setPath = function(path, data, options) {
		var queryData = {}, hashData = {}
		path = parsePath(path, queryData, hashData)
		if (data != null) {
			for (var key4 in data) queryData[key4] = data[key4]
			path = path.replace(/:([^\/]+)/g, function(match2, token) {
				delete queryData[token]
				return data[token]
			})
		}
		var query = buildQueryString(queryData)
		if (query) path += "?" + query
		var hash = buildQueryString(hashData)
		if (hash) path += "#" + hash
		if (supportsPushState) {
			var state = options ? options.state : null
			var title = options ? options.title : null
			$window.onpopstate()
			if (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)
			else $window.history.pushState(state, title, router.prefix + path)
		}
		else $window.location.href = router.prefix + path
	}
	router.defineRoutes = function(routes, resolve, reject) {
		function resolveRoute() {
			var path = router.getPath()
			var params = {}
			var pathname = parsePath(path, params, params)
			var state = $window.history.state
			if (state != null) {
				for (var k in state) params[k] = state[k]
			}
			for (var route0 in routes) {
				var matcher = new RegExp("^" + route0.replace(/:[^\/]+?\.{3}/g, "(.*?)").replace(/:[^\/]+/g, "([^\\/]+)") + "\/?$")
				if (matcher.test(pathname)) {
					pathname.replace(matcher, function() {
						var keys = route0.match(/:[^\/]+/g) || []
						var values = [].slice.call(arguments, 1, -2)
						for (var i = 0; i < keys.length; i++) {
							params[keys[i].replace(/:|\./g, "")] = decodeURIComponent(values[i])
						}
						resolve(routes[route0], params, path, route0)
					})
					return
				}
			}
			reject(path, params)
		}
		if (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)
		else if (router.prefix.charAt(0) === "#") $window.onhashchange = resolveRoute
		resolveRoute()
	}
	return router
}
var _20 = function($window, redrawService0) {
	var routeService = coreRouter($window)
	var identity = function(v) {return v}
	var render1, component, attrs3, currentPath, lastUpdate
	var route = function(root, defaultRoute, routes) {
		if (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")
		var run1 = function() {
			if (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))
		}
		var bail = function(path) {
			if (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})
			else throw new Error("Could not resolve default route " + defaultRoute)
		}
		routeService.defineRoutes(routes, function(payload, params, path) {
			var update = lastUpdate = function(routeResolver, comp) {
				if (update !== lastUpdate) return
				component = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"
				attrs3 = params, currentPath = path, lastUpdate = null
				render1 = (routeResolver.render || identity).bind(routeResolver)
				run1()
			}
			if (payload.view || typeof payload === "function") update({}, payload)
			else {
				if (payload.onmatch) {
					Promise.resolve(payload.onmatch(params, path)).then(function(resolved) {
						update(payload, resolved)
					}, bail)
				}
				else update(payload, "div")
			}
		}, bail)
		redrawService0.subscribe(root, run1)
	}
	route.set = function(path, data, options) {
		if (lastUpdate != null) {
			options = options || {}
			options.replace = true
		}
		lastUpdate = null
		routeService.setPath(path, data, options)
	}
	route.get = function() {return currentPath}
	route.prefix = function(prefix0) {routeService.prefix = prefix0}
	route.link = function(vnode1) {
		vnode1.dom.setAttribute("href", routeService.prefix + vnode1.attrs.href)
		vnode1.dom.onclick = function(e) {
			if (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return
			e.preventDefault()
			e.redraw = false
			var href = this.getAttribute("href")
			if (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)
			route.set(href, undefined, undefined)
		}
	}
	route.param = function(key3) {
		if(typeof attrs3 !== "undefined" && typeof key3 !== "undefined") return attrs3[key3]
		return attrs3
	}
	return route
}
m.route = _20(window, redrawService)
m.withAttr = function(attrName, callback1, context) {
	return function(e) {
		callback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))
	}
}
var _28 = coreRenderer(window)
m.render = _28.render
m.redraw = redrawService.redraw
m.request = requestService.request
m.jsonp = requestService.jsonp
m.parseQueryString = parseQueryString
m.buildQueryString = buildQueryString
m.version = "1.1.6"
m.vnode = Vnode
if (typeof module !== "undefined") module["exports"] = m
else window.m = m
}());
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":129}],115:[function(require,module,exports){
"use strict"

module.exports = require("./render/render")(window)

},{"./render/render":118}],116:[function(require,module,exports){
"use strict"

var Vnode = require("../render/vnode")

module.exports = function(attrs, children) {
	return Vnode("[", attrs.key, attrs, Vnode.normalizeChildren(children), undefined, undefined)
}

},{"../render/vnode":120}],117:[function(require,module,exports){
"use strict"

var Vnode = require("../render/vnode")

var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g
var selectorCache = {}
var hasOwn = {}.hasOwnProperty

function isEmpty(object) {
	for (var key in object) if (hasOwn.call(object, key)) return false
	return true
}

function compileSelector(selector) {
	var match, tag = "div", classes = [], attrs = {}
	while (match = selectorParser.exec(selector)) {
		var type = match[1], value = match[2]
		if (type === "" && value !== "") tag = value
		else if (type === "#") attrs.id = value
		else if (type === ".") classes.push(value)
		else if (match[3][0] === "[") {
			var attrValue = match[6]
			if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\")
			if (match[4] === "class") classes.push(attrValue)
			else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true
		}
	}
	if (classes.length > 0) attrs.className = classes.join(" ")
	return selectorCache[selector] = {tag: tag, attrs: attrs}
}

function execSelector(state, attrs, children) {
	var hasAttrs = false, childList, text
	var className = attrs.className || attrs.class

	if (!isEmpty(state.attrs) && !isEmpty(attrs)) {
		var newAttrs = {}

		for(var key in attrs) {
			if (hasOwn.call(attrs, key)) {
				newAttrs[key] = attrs[key]
			}
		}

		attrs = newAttrs
	}

	for (var key in state.attrs) {
		if (hasOwn.call(state.attrs, key)) {
			attrs[key] = state.attrs[key]
		}
	}

	if (className !== undefined) {
		if (attrs.class !== undefined) {
			attrs.class = undefined
			attrs.className = className
		}

		if (state.attrs.className != null) {
			attrs.className = state.attrs.className + " " + className
		}
	}

	for (var key in attrs) {
		if (hasOwn.call(attrs, key) && key !== "key") {
			hasAttrs = true
			break
		}
	}

	if (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {
		text = children[0].children
	} else {
		childList = children
	}

	return Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)
}

function hyperscript(selector) {
	// Because sloppy mode sucks
	var attrs = arguments[1], start = 2, children

	if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {
		throw Error("The selector must be either a string or a component.");
	}

	if (typeof selector === "string") {
		var cached = selectorCache[selector] || compileSelector(selector)
	}

	if (attrs == null) {
		attrs = {}
	} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
		attrs = {}
		start = 1
	}

	if (arguments.length === start + 1) {
		children = arguments[start]
		if (!Array.isArray(children)) children = [children]
	} else {
		children = []
		while (start < arguments.length) children.push(arguments[start++])
	}

	var normalized = Vnode.normalizeChildren(children)

	if (typeof selector === "string") {
		return execSelector(cached, attrs, normalized)
	} else {
		return Vnode(selector, attrs.key, attrs, normalized)
	}
}

module.exports = hyperscript

},{"../render/vnode":120}],118:[function(require,module,exports){
"use strict"

var Vnode = require("../render/vnode")

module.exports = function($window) {
	var $doc = $window.document
	var $emptyFragment = $doc.createDocumentFragment()

	var nameSpace = {
		svg: "http://www.w3.org/2000/svg",
		math: "http://www.w3.org/1998/Math/MathML"
	}

	var onevent
	function setEventCallback(callback) {return onevent = callback}

	function getNameSpace(vnode) {
		return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]
	}

	//create
	function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				createNode(parent, vnode, hooks, ns, nextSibling)
			}
		}
	}
	function createNode(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		if (typeof tag === "string") {
			vnode.state = {}
			if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
			switch (tag) {
				case "#": return createText(parent, vnode, nextSibling)
				case "<": return createHTML(parent, vnode, nextSibling)
				case "[": return createFragment(parent, vnode, hooks, ns, nextSibling)
				default: return createElement(parent, vnode, hooks, ns, nextSibling)
			}
		}
		else return createComponent(parent, vnode, hooks, ns, nextSibling)
	}
	function createText(parent, vnode, nextSibling) {
		vnode.dom = $doc.createTextNode(vnode.children)
		insertNode(parent, vnode.dom, nextSibling)
		return vnode.dom
	}
	function createHTML(parent, vnode, nextSibling) {
		var match = vnode.children.match(/^\s*?<(\w+)/im) || []
		var parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match[1]] || "div"
		var temp = $doc.createElement(parent1)

		temp.innerHTML = vnode.children
		vnode.dom = temp.firstChild
		vnode.domSize = temp.childNodes.length
		var fragment = $doc.createDocumentFragment()
		var child
		while (child = temp.firstChild) {
			fragment.appendChild(child)
		}
		insertNode(parent, fragment, nextSibling)
		return fragment
	}
	function createFragment(parent, vnode, hooks, ns, nextSibling) {
		var fragment = $doc.createDocumentFragment()
		if (vnode.children != null) {
			var children = vnode.children
			createNodes(fragment, children, 0, children.length, hooks, null, ns)
		}
		vnode.dom = fragment.firstChild
		vnode.domSize = fragment.childNodes.length
		insertNode(parent, fragment, nextSibling)
		return fragment
	}
	function createElement(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		var attrs = vnode.attrs
		var is = attrs && attrs.is

		ns = getNameSpace(vnode) || ns

		var element = ns ?
			is ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :
			is ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)
		vnode.dom = element

		if (attrs != null) {
			setAttrs(vnode, attrs, ns)
		}

		insertNode(parent, element, nextSibling)

		if (vnode.attrs != null && vnode.attrs.contenteditable != null) {
			setContentEditable(vnode)
		}
		else {
			if (vnode.text != null) {
				if (vnode.text !== "") element.textContent = vnode.text
				else vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
			}
			if (vnode.children != null) {
				var children = vnode.children
				createNodes(element, children, 0, children.length, hooks, null, ns)
				setLateAttrs(vnode)
			}
		}
		return element
	}
	function initComponent(vnode, hooks) {
		var sentinel
		if (typeof vnode.tag.view === "function") {
			vnode.state = Object.create(vnode.tag)
			sentinel = vnode.state.view
			if (sentinel.$$reentrantLock$$ != null) return $emptyFragment
			sentinel.$$reentrantLock$$ = true
		} else {
			vnode.state = void 0
			sentinel = vnode.tag
			if (sentinel.$$reentrantLock$$ != null) return $emptyFragment
			sentinel.$$reentrantLock$$ = true
			vnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)
		}
		vnode._state = vnode.state
		if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
		initLifecycle(vnode._state, vnode, hooks)
		vnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))
		if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
		sentinel.$$reentrantLock$$ = null
	}
	function createComponent(parent, vnode, hooks, ns, nextSibling) {
		initComponent(vnode, hooks)
		if (vnode.instance != null) {
			var element = createNode(parent, vnode.instance, hooks, ns, nextSibling)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0
			insertNode(parent, element, nextSibling)
			return element
		}
		else {
			vnode.domSize = 0
			return $emptyFragment
		}
	}

	//update
	function updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {
		if (old === vnodes || old == null && vnodes == null) return
		else if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)
		else if (vnodes == null) removeNodes(old, 0, old.length, vnodes)
		else {
			if (old.length === vnodes.length) {
				var isUnkeyed = false
				for (var i = 0; i < vnodes.length; i++) {
					if (vnodes[i] != null && old[i] != null) {
						isUnkeyed = vnodes[i].key == null && old[i].key == null
						break
					}
				}
				if (isUnkeyed) {
					for (var i = 0; i < old.length; i++) {
						if (old[i] === vnodes[i]) continue
						else if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))
						else if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)
						else updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)
					}
					return
				}
			}
			recycling = recycling || isRecyclable(old, vnodes)
			if (recycling) {
				var pool = old.pool
				old = old.concat(old.pool)
			}

			var oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map
			while (oldEnd >= oldStart && end >= start) {
				var o = old[oldStart], v = vnodes[start]
				if (o === v && !recycling) oldStart++, start++
				else if (o == null) oldStart++
				else if (v == null) start++
				else if (o.key === v.key) {
					var shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)
					oldStart++, start++
					updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)
					if (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)
				}
				else {
					var o = old[oldEnd]
					if (o === v && !recycling) oldEnd--, start++
					else if (o == null) oldEnd--
					else if (v == null) start++
					else if (o.key === v.key) {
						var shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)
						updateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)
						if (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))
						oldEnd--, start++
					}
					else break
				}
			}
			while (oldEnd >= oldStart && end >= start) {
				var o = old[oldEnd], v = vnodes[end]
				if (o === v && !recycling) oldEnd--, end--
				else if (o == null) oldEnd--
				else if (v == null) end--
				else if (o.key === v.key) {
					var shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)
					updateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)
					if (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)
					if (o.dom != null) nextSibling = o.dom
					oldEnd--, end--
				}
				else {
					if (!map) map = getKeyMap(old, oldEnd)
					if (v != null) {
						var oldIndex = map[v.key]
						if (oldIndex != null) {
							var movable = old[oldIndex]
							var shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)
							updateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)
							insertNode(parent, toFragment(movable), nextSibling)
							old[oldIndex].skip = true
							if (movable.dom != null) nextSibling = movable.dom
						}
						else {
							var dom = createNode(parent, v, hooks, ns, nextSibling)
							nextSibling = dom
						}
					}
					end--
				}
				if (end < start) break
			}
			createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)
			removeNodes(old, oldStart, oldEnd + 1, vnodes)
		}
	}
	function updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {
		var oldTag = old.tag, tag = vnode.tag
		if (oldTag === tag) {
			vnode.state = old.state
			vnode._state = old._state
			vnode.events = old.events
			if (!recycling && shouldNotUpdate(vnode, old)) return
			if (typeof oldTag === "string") {
				if (vnode.attrs != null) {
					if (recycling) {
						vnode.state = {}
						initLifecycle(vnode.attrs, vnode, hooks)
					}
					else updateLifecycle(vnode.attrs, vnode, hooks)
				}
				switch (oldTag) {
					case "#": updateText(old, vnode); break
					case "<": updateHTML(parent, old, vnode, nextSibling); break
					case "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break
					default: updateElement(old, vnode, recycling, hooks, ns)
				}
			}
			else updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)
		}
		else {
			removeNode(old, null)
			createNode(parent, vnode, hooks, ns, nextSibling)
		}
	}
	function updateText(old, vnode) {
		if (old.children.toString() !== vnode.children.toString()) {
			old.dom.nodeValue = vnode.children
		}
		vnode.dom = old.dom
	}
	function updateHTML(parent, old, vnode, nextSibling) {
		if (old.children !== vnode.children) {
			toFragment(old)
			createHTML(parent, vnode, nextSibling)
		}
		else vnode.dom = old.dom, vnode.domSize = old.domSize
	}
	function updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {
		updateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)
		var domSize = 0, children = vnode.children
		vnode.dom = null
		if (children != null) {
			for (var i = 0; i < children.length; i++) {
				var child = children[i]
				if (child != null && child.dom != null) {
					if (vnode.dom == null) vnode.dom = child.dom
					domSize += child.domSize || 1
				}
			}
			if (domSize !== 1) vnode.domSize = domSize
		}
	}
	function updateElement(old, vnode, recycling, hooks, ns) {
		var element = vnode.dom = old.dom
		ns = getNameSpace(vnode) || ns

		if (vnode.tag === "textarea") {
			if (vnode.attrs == null) vnode.attrs = {}
			if (vnode.text != null) {
				vnode.attrs.value = vnode.text //FIXME handle multiple children
				vnode.text = undefined
			}
		}
		updateAttrs(vnode, old.attrs, vnode.attrs, ns)
		if (vnode.attrs != null && vnode.attrs.contenteditable != null) {
			setContentEditable(vnode)
		}
		else if (old.text != null && vnode.text != null && vnode.text !== "") {
			if (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text
		}
		else {
			if (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]
			if (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
			updateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)
		}
	}
	function updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {
		if (recycling) {
			initComponent(vnode, hooks)
		} else {
			vnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))
			if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
			if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)
			updateLifecycle(vnode._state, vnode, hooks)
		}
		if (vnode.instance != null) {
			if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)
			else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.instance.domSize
		}
		else if (old.instance != null) {
			removeNode(old.instance, null)
			vnode.dom = undefined
			vnode.domSize = 0
		}
		else {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
		}
	}
	function isRecyclable(old, vnodes) {
		if (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {
			var oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0
			var poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0
			var vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0
			if (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {
				return true
			}
		}
		return false
	}
	function getKeyMap(vnodes, end) {
		var map = {}, i = 0
		for (var i = 0; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				var key = vnode.key
				if (key != null) map[key] = i
			}
		}
		return map
	}
	function toFragment(vnode) {
		var count = vnode.domSize
		if (count != null || vnode.dom == null) {
			var fragment = $doc.createDocumentFragment()
			if (count > 0) {
				var dom = vnode.dom
				while (--count) fragment.appendChild(dom.nextSibling)
				fragment.insertBefore(dom, fragment.firstChild)
			}
			return fragment
		}
		else return vnode.dom
	}
	function getNextSibling(vnodes, i, nextSibling) {
		for (; i < vnodes.length; i++) {
			if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom
		}
		return nextSibling
	}

	function insertNode(parent, dom, nextSibling) {
		if (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)
		else parent.appendChild(dom)
	}

	function setContentEditable(vnode) {
		var children = vnode.children
		if (children != null && children.length === 1 && children[0].tag === "<") {
			var content = children[0].children
			if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content
		}
		else if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")
	}

	//remove
	function removeNodes(vnodes, start, end, context) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				if (vnode.skip) vnode.skip = false
				else removeNode(vnode, context)
			}
		}
	}
	function removeNode(vnode, context) {
		var expected = 1, called = 0
		if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
			var result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)
			if (result != null && typeof result.then === "function") {
				expected++
				result.then(continuation, continuation)
			}
		}
		if (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {
			var result = vnode._state.onbeforeremove.call(vnode.state, vnode)
			if (result != null && typeof result.then === "function") {
				expected++
				result.then(continuation, continuation)
			}
		}
		continuation()
		function continuation() {
			if (++called === expected) {
				onremove(vnode)
				if (vnode.dom) {
					var count = vnode.domSize || 1
					if (count > 1) {
						var dom = vnode.dom
						while (--count) {
							removeNodeFromDOM(dom.nextSibling)
						}
					}
					removeNodeFromDOM(vnode.dom)
					if (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements
						if (!context.pool) context.pool = [vnode]
						else context.pool.push(vnode)
					}
				}
			}
		}
	}
	function removeNodeFromDOM(node) {
		var parent = node.parentNode
		if (parent != null) parent.removeChild(node)
	}
	function onremove(vnode) {
		if (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)
		if (typeof vnode.tag !== "string") {
			if (typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)
			if (vnode.instance != null) onremove(vnode.instance)
		} else {
			var children = vnode.children
			if (Array.isArray(children)) {
				for (var i = 0; i < children.length; i++) {
					var child = children[i]
					if (child != null) onremove(child)
				}
			}
		}
	}

	//attrs
	function setAttrs(vnode, attrs, ns) {
		for (var key in attrs) {
			setAttr(vnode, key, null, attrs[key], ns)
		}
	}
	function setAttr(vnode, key, old, value, ns) {
		var element = vnode.dom
		if (key === "key" || key === "is" || (old === value && !isFormAttribute(vnode, key)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key)) return
		var nsLastIndex = key.indexOf(":")
		if (nsLastIndex > -1 && key.substr(0, nsLastIndex) === "xlink") {
			element.setAttributeNS("http://www.w3.org/1999/xlink", key.slice(nsLastIndex + 1), value)
		}
		else if (key[0] === "o" && key[1] === "n" && typeof value === "function") updateEvent(vnode, key, value)
		else if (key === "style") updateStyle(element, old, value)
		else if (key in element && !isAttribute(key) && ns === undefined && !isCustomElement(vnode)) {
			if (key === "value") {
				var normalized = "" + value // eslint-disable-line no-implicit-coercion
				//setting input[value] to same value by typing on focused element moves cursor to end in Chrome
				if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized && vnode.dom === $doc.activeElement) return
				//setting select[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "select") {
					if (value === null) {
						if (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return
					} else {
						if (old !== null && vnode.dom.value === normalized && vnode.dom === $doc.activeElement) return
					}
				}
				//setting option[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "option" && old != null && vnode.dom.value === normalized) return
			}
			// If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
			if (vnode.tag === "input" && key === "type") {
				element.setAttribute(key, value)
				return
			}
			element[key] = value
		}
		else {
			if (typeof value === "boolean") {
				if (value) element.setAttribute(key, "")
				else element.removeAttribute(key)
			}
			else element.setAttribute(key === "className" ? "class" : key, value)
		}
	}
	function setLateAttrs(vnode) {
		var attrs = vnode.attrs
		if (vnode.tag === "select" && attrs != null) {
			if ("value" in attrs) setAttr(vnode, "value", null, attrs.value, undefined)
			if ("selectedIndex" in attrs) setAttr(vnode, "selectedIndex", null, attrs.selectedIndex, undefined)
		}
	}
	function updateAttrs(vnode, old, attrs, ns) {
		if (attrs != null) {
			for (var key in attrs) {
				setAttr(vnode, key, old && old[key], attrs[key], ns)
			}
		}
		if (old != null) {
			for (var key in old) {
				if (attrs == null || !(key in attrs)) {
					if (key === "className") key = "class"
					if (key[0] === "o" && key[1] === "n" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined)
					else if (key !== "key") vnode.dom.removeAttribute(key)
				}
			}
		}
	}
	function isFormAttribute(vnode, attr) {
		return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement
	}
	function isLifecycleMethod(attr) {
		return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"
	}
	function isAttribute(attr) {
		return attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"
	}
	function isCustomElement(vnode){
		return vnode.attrs.is || vnode.tag.indexOf("-") > -1
	}
	function hasIntegrationMethods(source) {
		return source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)
	}

	//style
	function updateStyle(element, old, style) {
		if (old === style) element.style.cssText = "", old = null
		if (style == null) element.style.cssText = ""
		else if (typeof style === "string") element.style.cssText = style
		else {
			if (typeof old === "string") element.style.cssText = ""
			for (var key in style) {
				element.style[key] = style[key]
			}
			if (old != null && typeof old !== "string") {
				for (var key in old) {
					if (!(key in style)) element.style[key] = ""
				}
			}
		}
	}

	//event
	function updateEvent(vnode, key, value) {
		var element = vnode.dom
		var callback = typeof onevent !== "function" ? value : function(e) {
			var result = value.call(element, e)
			onevent.call(element, e)
			return result
		}
		if (key in element) element[key] = typeof value === "function" ? callback : null
		else {
			var eventName = key.slice(2)
			if (vnode.events === undefined) vnode.events = {}
			if (vnode.events[key] === callback) return
			if (vnode.events[key] != null) element.removeEventListener(eventName, vnode.events[key], false)
			if (typeof value === "function") {
				vnode.events[key] = callback
				element.addEventListener(eventName, vnode.events[key], false)
			}
		}
	}

	//lifecycle
	function initLifecycle(source, vnode, hooks) {
		if (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)
		if (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))
	}
	function updateLifecycle(source, vnode, hooks) {
		if (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))
	}
	function shouldNotUpdate(vnode, old) {
		var forceVnodeUpdate, forceComponentUpdate
		if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)
		if (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)
		if (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
			vnode.instance = old.instance
			return true
		}
		return false
	}

	function render(dom, vnodes) {
		if (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")
		var hooks = []
		var active = $doc.activeElement
		var namespace = dom.namespaceURI

		// First time rendering into a node clears it out
		if (dom.vnodes == null) dom.textContent = ""

		if (!Array.isArray(vnodes)) vnodes = [vnodes]
		updateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)
		dom.vnodes = vnodes
		// document.activeElement can return null in IE https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
		if (active != null && $doc.activeElement !== active) active.focus()
		for (var i = 0; i < hooks.length; i++) hooks[i]()
	}

	return {render: render, setEventCallback: setEventCallback}
}

},{"../render/vnode":120}],119:[function(require,module,exports){
"use strict"

var Vnode = require("../render/vnode")

module.exports = function(html) {
	if (html == null) html = ""
	return Vnode("<", undefined, undefined, html, undefined, undefined)
}

},{"../render/vnode":120}],120:[function(require,module,exports){
"use strict"

function Vnode(tag, key, attrs, children, text, dom) {
	return {tag: tag, key: key, attrs: attrs, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}
}
Vnode.normalize = function(node) {
	if (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)
	if (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)
	return node
}
Vnode.normalizeChildren = function normalizeChildren(children) {
	for (var i = 0; i < children.length; i++) {
		children[i] = Vnode.normalize(children[i])
	}
	return children
}

module.exports = Vnode

},{}],121:[function(require,module,exports){
"use strict"

module.exports = require("./stream/stream")

},{"./stream/stream":122}],122:[function(require,module,exports){
/* eslint-disable */
;(function() {
"use strict"
/* eslint-enable */

var guid = 0, HALT = {}
function createStream() {
	function stream() {
		if (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])
		return stream._state.value
	}
	initStream(stream)

	if (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])

	return stream
}
function initStream(stream) {
	stream.constructor = createStream
	stream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined, unregister: undefined}
	stream.map = stream["fantasy-land/map"] = map, stream["fantasy-land/ap"] = ap, stream["fantasy-land/of"] = createStream
	stream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf

	Object.defineProperties(stream, {
		end: {get: function() {
			if (!stream._state.endStream) {
				var endStream = createStream()
				endStream.map(function(value) {
					if (value === true) {
						unregisterStream(stream)
						endStream._state.unregister = function(){unregisterStream(endStream)}
					}
					return value
				})
				stream._state.endStream = endStream
			}
			return stream._state.endStream
		}}
	})
}
function updateStream(stream, value) {
	updateState(stream, value)
	for (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)
	if (stream._state.unregister != null) stream._state.unregister()
	finalize(stream)
}
function updateState(stream, value) {
	stream._state.value = value
	stream._state.changed = true
	if (stream._state.state !== 2) stream._state.state = 1
}
function updateDependency(stream, mustSync) {
	var state = stream._state, parents = state.parents
	if (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {
		var value = stream._state.derive()
		if (value === HALT) return false
		updateState(stream, value)
	}
}
function finalize(stream) {
	stream._state.changed = false
	for (var id in stream._state.deps) stream._state.deps[id]._state.changed = false
}

function combine(fn, streams) {
	if (!streams.every(valid)) throw new Error("Ensure that each item passed to stream.combine/stream.merge is a stream")
	return initDependency(createStream(), streams, function() {
		return fn.apply(this, streams.concat([streams.filter(changed)]))
	})
}

function initDependency(dep, streams, derive) {
	var state = dep._state
	state.derive = derive
	state.parents = streams.filter(notEnded)

	registerDependency(dep, state.parents)
	updateDependency(dep, true)

	return dep
}
function registerDependency(stream, parents) {
	for (var i = 0; i < parents.length; i++) {
		parents[i]._state.deps[stream._state.id] = stream
		registerDependency(stream, parents[i]._state.parents)
	}
}
function unregisterStream(stream) {
	for (var i = 0; i < stream._state.parents.length; i++) {
		var parent = stream._state.parents[i]
		delete parent._state.deps[stream._state.id]
	}
	for (var id in stream._state.deps) {
		var dependent = stream._state.deps[id]
		var index = dependent._state.parents.indexOf(stream)
		if (index > -1) dependent._state.parents.splice(index, 1)
	}
	stream._state.state = 2 //ended
	stream._state.deps = {}
}

function map(fn) {return combine(function(stream) {return fn(stream())}, [this])}
function ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}
function valueOf() {return this._state.value}
function toJSON() {return this._state.value != null && typeof this._state.value.toJSON === "function" ? this._state.value.toJSON() : this._state.value}

function valid(stream) {return stream._state }
function active(stream) {return stream._state.state === 1}
function changed(stream) {return stream._state.changed}
function notEnded(stream) {return stream._state.state !== 2}

function merge(streams) {
	return combine(function() {
		return streams.map(function(s) {return s()})
	}, streams)
}

function scan(reducer, seed, stream) {
	var newStream = combine(function (s) {
		return seed = reducer(seed, s._state.value)
	}, [stream])

	if (newStream._state.state === 0) newStream(seed)

	return newStream
}

function scanMerge(tuples, seed) {
	var streams = tuples.map(function(tuple) {
		var stream = tuple[0]
		if (stream._state.state === 0) stream(undefined)
		return stream
	})

	var newStream = combine(function() {
		var changed = arguments[arguments.length - 1]

		streams.forEach(function(stream, idx) {
			if (changed.indexOf(stream) > -1) {
				seed = tuples[idx][1](seed, stream._state.value)
			}
		})

		return seed
	}, streams)

	return newStream
}

createStream["fantasy-land/of"] = createStream
createStream.merge = merge
createStream.combine = combine
createStream.scan = scan
createStream.scanMerge = scanMerge
createStream.HALT = HALT

if (typeof module !== "undefined") module["exports"] = createStream
else if (typeof window.m === "function" && !("stream" in window.m)) window.m.stream = createStream
else window.m = {stream : createStream}

}());

},{}],123:[function(require,module,exports){
//! moment.js

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

},{}],124:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],125:[function(require,module,exports){
(function (process,setImmediate){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof self !== "undefined") {
        self.Q = definition();

    } else {
        throw new Error("This environment was not anticiapted by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;

    function flush() {
        /* jshint loopfunc: true */

        while (head.next) {
            head = head.next;
            var task = head.task;
            head.task = void 0;
            var domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }

            try {
                task();

            } catch (e) {
                if (isNodeJS) {
                    // In node, uncaught exceptions are considered fatal errors.
                    // Re-throw them synchronously to interrupt flushing!

                    // Ensure continuation if the uncaught exception is suppressed
                    // listening "uncaughtException" events (as domains does).
                    // Continue in next event to avoid tick recursion.
                    if (domain) {
                        domain.exit();
                    }
                    setTimeout(flush, 0);
                    if (domain) {
                        domain.enter();
                    }

                    throw e;

                } else {
                    // In browsers, uncaught exceptions are not fatal.
                    // Re-throw them asynchronously to avoid slow-downs.
                    setTimeout(function() {
                       throw e;
                    }, 0);
                }
            }

            if (domain) {
                domain.exit();
            }
        }

        flushing = false;
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process !== "undefined" && process.nextTick) {
        // Node.js before 0.9. Note that some fake-Node environments, like the
        // Mocha test runner, introduce a `process` global without a `nextTick`.
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }

    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function(resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function(answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var countDown = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++countDown;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--countDown === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (countDown === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'),require("timers").setImmediate)

},{"_process":124,"timers":129}],126:[function(require,module,exports){
/*
 * Qanimationframe.js - Promisified requestAnimationFrame with Q
 */
/*jslint newcap: true */
(function (definition) {
    if (typeof exports === "object") {
        module.exports = definition();
    } else {
        window.QanimationFrame = definition();
    }
})(function () {
  "use strict";

  // Import Q
  var Q = window.Q || require("q");

  // requestAnimationFrame polyfill
  var requestAnimationFrame = (function(){
    return window.requestAnimationFrame       ||
           window.oRequestAnimationFrame      ||
           window.msRequestAnimationFrame     ||
           window.mozRequestAnimationFrame    ||
           window.webkitRequestAnimationFrame ||
           function (callback) {
             window.setTimeout(callback, 1000 / 60);
           };
  })();

  // QanimationFrame(f: function) => promise containing the return value of f
  // ---
  //
  var QanimationFrame = function (f) {
    var d = Q.defer();
    requestAnimationFrame(function () {
      try {
        d.resolve(f());
      } catch (e) {
        d.reject(e);
      }
    });
    return d.promise;
  };

  return QanimationFrame;
});

},{"q":125}],127:[function(require,module,exports){
// This library started as an experiment to see how small I could make
// a functional router. It has since been optimized (and thus grown).
// The redundancy and inelegance here is for the sake of either size
// or speed.
(function (root, factory) {
  var define = root.define;

  if (define && define.amd) {
    define('rlite', [], factory);
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory();
  } else {
    root.Rlite = factory();
  }
}(this, function () { return function() {
    var routes = {},
        decode = decodeURIComponent;

    function noop(s) { return s; }

    function sanitize(url) {
      ~url.indexOf('/?') && (url = url.replace('/?', '?'));
      url[0] == '/' && (url = url.slice(1));
      url[url.length - 1] == '/' && (url = url.slice(0, -1));

      return url;
    }

    function processUrl(url, esc) {
      var pieces = url.split('/'),
          rules = routes,
          params = {};

      for (var i = 0; i < pieces.length && rules; ++i) {
        var piece = esc(pieces[i]);
        rules = rules[piece.toLowerCase()] || rules[':'];
        rules && rules['~'] && (params[rules['~']] = piece);
      }

      return rules && {
        cb: rules['@'],
        params: params
      };
    }

    function processQuery(url, ctx, esc) {
      if (url && ctx.cb) {
        var hash = url.indexOf('#'),
            query = (hash < 0 ? url : url.slice(0, hash)).split('&');

        for (var i = 0; i < query.length; ++i) {
          var nameValue = query[i].split('=');

          ctx.params[nameValue[0]] = esc(nameValue[1]);
        }
      }

      return ctx;
    }

    function lookup(url) {
      var querySplit = sanitize(url).split('?'),
          esc = ~url.indexOf('%') ? decode : noop;

      return processQuery(querySplit[1], processUrl(querySplit[0], esc) || {}, esc);
    }

    return {
      add: function(route, handler) {

        var pieces = route.split('/'),
            rules = routes;

        for (var i = 0; i < pieces.length; ++i) {
          var piece = pieces[i],
              name = piece[0] == ':' ? ':' : piece.toLowerCase();

          rules = rules[name] || (rules[name] = {});

          name == ':' && (rules['~'] = piece.slice(1));
        }

        rules['@'] = handler;
      },

      exists: function (url) {
        return !!lookup(url).cb;
      },

      lookup: lookup,

      run: function(url) {
        var result = lookup(url);

        result.cb && result.cb({
          url: url,
          params: result.params
        });

        return !!result.cb;
      }
    };
  };
}));

},{}],128:[function(require,module,exports){
/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */
/*global define:false, require:false, exports:false, module:false, signals:false */

/** @license
 * JS Signals <http://millermedeiros.github.com/js-signals/>
 * Released under the MIT license
 * Author: Miller Medeiros
 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
 */

(function(global){

    // SignalBinding -------------------------------------------------
    //================================================================

    /**
     * Object that represents a binding between a Signal and a listener function.
     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>
     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.
     * @author Miller Medeiros
     * @constructor
     * @internal
     * @name SignalBinding
     * @param {Signal} signal Reference to Signal object that listener is currently bound to.
     * @param {Function} listener Handler function bound to the signal.
     * @param {boolean} isOnce If binding should be executed just once.
     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
     * @param {Number} [priority] The priority level of the event listener. (default = 0).
     */
    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {

        /**
         * Handler function bound to the signal.
         * @type Function
         * @private
         */
        this._listener = listener;

        /**
         * If binding should be executed just once.
         * @type boolean
         * @private
         */
        this._isOnce = isOnce;

        /**
         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @memberOf SignalBinding.prototype
         * @name context
         * @type Object|undefined|null
         */
        this.context = listenerContext;

        /**
         * Reference to Signal object that listener is currently bound to.
         * @type Signal
         * @private
         */
        this._signal = signal;

        /**
         * Listener priority
         * @type Number
         * @private
         */
        this._priority = priority || 0;
    }

    SignalBinding.prototype = {

        /**
         * If binding is active and should be executed.
         * @type boolean
         */
        active : true,

        /**
         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)
         * @type Array|null
         */
        params : null,

        /**
         * Call listener passing arbitrary parameters.
         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>
         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener
         * @return {*} Value returned by the listener.
         */
        execute : function (paramsArr) {
            var handlerReturn, params;
            if (this.active && !!this._listener) {
                params = this.params? this.params.concat(paramsArr) : paramsArr;
                handlerReturn = this._listener.apply(this.context, params);
                if (this._isOnce) {
                    this.detach();
                }
            }
            return handlerReturn;
        },

        /**
         * Detach binding from signal.
         * - alias to: mySignal.remove(myBinding.getListener());
         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.
         */
        detach : function () {
            return this.isBound()? this._signal.remove(this._listener, this.context) : null;
        },

        /**
         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.
         */
        isBound : function () {
            return (!!this._signal && !!this._listener);
        },

        /**
         * @return {boolean} If SignalBinding will only be executed once.
         */
        isOnce : function () {
            return this._isOnce;
        },

        /**
         * @return {Function} Handler function bound to the signal.
         */
        getListener : function () {
            return this._listener;
        },

        /**
         * @return {Signal} Signal that listener is currently bound to.
         */
        getSignal : function () {
            return this._signal;
        },

        /**
         * Delete instance properties
         * @private
         */
        _destroy : function () {
            delete this._signal;
            delete this._listener;
            delete this.context;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';
        }

    };


/*global SignalBinding:false*/

    // Signal --------------------------------------------------------
    //================================================================

    function validateListener(listener, fnName) {
        if (typeof listener !== 'function') {
            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );
        }
    }

    /**
     * Custom event broadcaster
     * <br />- inspired by Robert Penner's AS3 Signals.
     * @name Signal
     * @author Miller Medeiros
     * @constructor
     */
    function Signal() {
        /**
         * @type Array.<SignalBinding>
         * @private
         */
        this._bindings = [];
        this._prevParams = null;

        // enforce dispatch to aways work on same context (#47)
        var self = this;
        this.dispatch = function(){
            Signal.prototype.dispatch.apply(self, arguments);
        };
    }

    Signal.prototype = {

        /**
         * Signals Version Number
         * @type String
         * @const
         */
        VERSION : '1.0.0',

        /**
         * If Signal should keep record of previously dispatched parameters and
         * automatically execute listener during `add()`/`addOnce()` if Signal was
         * already dispatched before.
         * @type boolean
         */
        memorize : false,

        /**
         * @type boolean
         * @private
         */
        _shouldPropagate : true,

        /**
         * If Signal is active and should broadcast events.
         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>
         * @type boolean
         */
        active : true,

        /**
         * @param {Function} listener
         * @param {boolean} isOnce
         * @param {Object} [listenerContext]
         * @param {Number} [priority]
         * @return {SignalBinding}
         * @private
         */
        _registerListener : function (listener, isOnce, listenerContext, priority) {

            var prevIndex = this._indexOfListener(listener, listenerContext),
                binding;

            if (prevIndex !== -1) {
                binding = this._bindings[prevIndex];
                if (binding.isOnce() !== isOnce) {
                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');
                }
            } else {
                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);
                this._addBinding(binding);
            }

            if(this.memorize && this._prevParams){
                binding.execute(this._prevParams);
            }

            return binding;
        },

        /**
         * @param {SignalBinding} binding
         * @private
         */
        _addBinding : function (binding) {
            //simplified insertion sort
            var n = this._bindings.length;
            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);
            this._bindings.splice(n + 1, 0, binding);
        },

        /**
         * @param {Function} listener
         * @return {number}
         * @private
         */
        _indexOfListener : function (listener, context) {
            var n = this._bindings.length,
                cur;
            while (n--) {
                cur = this._bindings[n];
                if (cur._listener === listener && cur.context === context) {
                    return n;
                }
            }
            return -1;
        },

        /**
         * Check if listener was attached to Signal.
         * @param {Function} listener
         * @param {Object} [context]
         * @return {boolean} if Signal has the specified listener.
         */
        has : function (listener, context) {
            return this._indexOfListener(listener, context) !== -1;
        },

        /**
         * Add a listener to the signal.
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        add : function (listener, listenerContext, priority) {
            validateListener(listener, 'add');
            return this._registerListener(listener, false, listenerContext, priority);
        },

        /**
         * Add listener to the signal that should be removed after first execution (will be executed only once).
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        addOnce : function (listener, listenerContext, priority) {
            validateListener(listener, 'addOnce');
            return this._registerListener(listener, true, listenerContext, priority);
        },

        /**
         * Remove a single listener from the dispatch queue.
         * @param {Function} listener Handler function that should be removed.
         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).
         * @return {Function} Listener handler function.
         */
        remove : function (listener, context) {
            validateListener(listener, 'remove');

            var i = this._indexOfListener(listener, context);
            if (i !== -1) {
                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
                this._bindings.splice(i, 1);
            }
            return listener;
        },

        /**
         * Remove all listeners from the Signal.
         */
        removeAll : function () {
            var n = this._bindings.length;
            while (n--) {
                this._bindings[n]._destroy();
            }
            this._bindings.length = 0;
        },

        /**
         * @return {number} Number of listeners attached to the Signal.
         */
        getNumListeners : function () {
            return this._bindings.length;
        },

        /**
         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.
         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>
         * @see Signal.prototype.disable
         */
        halt : function () {
            this._shouldPropagate = false;
        },

        /**
         * Dispatch/Broadcast Signal to all listeners added to the queue.
         * @param {...*} [params] Parameters that should be passed to each handler.
         */
        dispatch : function (params) {
            if (! this.active) {
                return;
            }

            var paramsArr = Array.prototype.slice.call(arguments),
                n = this._bindings.length,
                bindings;

            if (this.memorize) {
                this._prevParams = paramsArr;
            }

            if (! n) {
                //should come after memorize
                return;
            }

            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch
            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.

            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation
            //reverse loop since listeners with higher priority will be added at the end of the list
            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
        },

        /**
         * Forget memorized arguments.
         * @see Signal.memorize
         */
        forget : function(){
            this._prevParams = null;
        },

        /**
         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).
         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>
         */
        dispose : function () {
            this.removeAll();
            delete this._bindings;
            delete this._prevParams;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';
        }

    };


    // Namespace -----------------------------------------------------
    //================================================================

    /**
     * Signals namespace
     * @namespace
     * @name signals
     */
    var signals = Signal;

    /**
     * Custom event broadcaster
     * @see Signal
     */
    // alias for backwards compatibility (see #gh-44)
    signals.Signal = Signal;



    //exports to multiple environments
    if(typeof define === 'function' && define.amd){ //AMD
        define(function () { return signals; });
    } else if (typeof module !== 'undefined' && module.exports){ //node
        module.exports = signals;
    } else { //browser
        //use string because of Google closure compiler ADVANCED_MODE
        /*jslint sub:true */
        global['signals'] = signals;
    }

}(this));

},{}],129:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":124,"timers":129}],130:[function(require,module,exports){
'use strict';

var style = document.createElement('p').style,
    prefixes = 'O ms Moz webkit'.split(' '),
    hasPrefix = /^(o|ms|moz|webkit)/,
    upper = /([A-Z])/g,
    memo = {};

function get(key){
    return (key in memo) ? memo[key] : memo[key] = prefix(key);
}

function prefix(key){
    var capitalizedKey = key.replace(/-([a-z])/g, function(s, match){
            return match.toUpperCase();
        }),
        i = prefixes.length,
        name;

    if (style[capitalizedKey] !== undefined) return capitalizedKey;

    capitalizedKey = capitalize(key);

    while (i--) {
        name = prefixes[i] + capitalizedKey;
        if (style[name] !== undefined) return name;
    }

    throw new Error('unable to prefix ' + key);
}

function capitalize(str){
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function dashedPrefix(key){
    var prefixedKey = get(key),
        upper = /([A-Z])/g;

    if (upper.test(prefixedKey)) {
        prefixedKey = (hasPrefix.test(prefixedKey) ? '-' : '') + prefixedKey.replace(upper, '-$1');
    }

    return prefixedKey.toLowerCase();
}

module.exports = get;
module.exports.dash = dashedPrefix;

},{}],131:[function(require,module,exports){
// Zanimo.js - Promise based CSS3 transitions
// (c) 2011-2014 Paul Panserrieu

'use strict';

var Q = require('q'),
    QanimationFrame = require('qanimationframe'),
    prefix = require('vendor-prefix'),
    normalizeTransformValue = require('../src/normalize-transform-value'),
    shorthand = require('../src/transition-shorthand-property'),
    transition = prefix('transition'),
    transitionend = 'WebkitTransition' in document.body.style ? 'webkitTransitionEnd' : 'transitionend',

    isDOM = function (el) {
        try {
            return el && el.nodeType;
        } catch(err) {
            return false;
        };
    },

    addTransition = function (elt, attr, value, duration, easing) {
        var currentValue = elt.style[transition];
        attr = prefix.dash(attr);
        if (currentValue) {
            elt.style[transition] = currentValue + ", " + shorthand(attr, duration, easing);
        }
        else {
            elt.style[transition] = shorthand(attr, duration, easing);
        }
        elt.style[prefix(attr)] = value;
    },

    removeTransition = function (el, attr) {
        el.style[transition] = el.style[transition]
            .split(',').filter(function(t) {
                return !t.match(attr);
            }).join(',');
    },

    applycss = function (el, attr, value) {
        return QanimationFrame(function(){
            el.style[prefix.dash(attr)] = value;
            return el;
        });
    },

    css = function (el, attr, value) {
        if(el._zanimo && el._zanimo.hasOwnProperty(attr)) {
            el._zanimo[attr].defer.reject(new Error(
                "Zanimo transition with transform=" +
                el._zanimo[attr].value +
                " stopped by transform=" + value
            ));
            el._zanimo[attr].cb();
        }
        return applycss(el, attr, value);
    },

    animate = function (el, attr, value, duration, easing) {
        var prefixed = prefix.dash(attr),
            d = Q.defer(),
            timeout,
            cb = function (clear) {
                if (timeout) { clearTimeout(timeout); timeout = null; }
                removeTransition(el, attr);
                el.removeEventListener(transitionend, cbTransitionend);
                if (clear) { delete el._zanimo[attr]; }
            },
            cbTransitionend = function (evt) {
                if(prefix(evt.propertyName) === prefix(prefixed)) {
                    cb(true);
                    d.resolve(el);
                }
            };

        el.addEventListener(transitionend, cbTransitionend);

        QanimationFrame(function () {
            addTransition(el, attr, normalizeTransformValue(value), duration, easing);
            timeout = setTimeout(function () {
                var rawVal = el.style.getPropertyValue(prefixed),
                    domVal = normalizeTransformValue(rawVal),
                    givenVal = normalizeTransformValue(value);

                cb(true);
                if (domVal === givenVal) { d.resolve(el); }
                else {
                    d.reject( new Error("Zanimo transition: with "
                        + attr + " = " + givenVal + ", DOM value=" + domVal
                    ));
                }
            }, duration + 20 );

            el._zanimo = el._zanimo || { };
            if(el._zanimo[attr]) {
                el._zanimo[attr].defer.reject(new Error(
                    "Zanimo transition with " +
                    attr + "=" + el._zanimo[attr].value +
                    " stopped by transition with " + attr + "=" + value
                ));
                el._zanimo[attr].cb();
            }
            el._zanimo[attr] = {cb: cb, value: value, defer: d};
        });

        return d.promise;
    };

/**
 * Zanimo(el | promise[el])
 * > Returns a Promise of el.
 *
 * Zanimo(el | promise[el], attr, value)
 * > Sets el.style[attr]=value and returns the promise of el.
 *
 * Zanimo(el | promise[el], attr, value, duration, [easing])
 * > Performs a transition.
 */
var Zanimo = function (el, attr, value, duration, easing) {
    var args = arguments,
        arity = arguments.length;
    if (arity === 0 || arity === 2 || arity > 5) {
        return Q.reject(new Error("Zanimo invalid arguments"));
    }
    if (Q.isPromise(el)) {
        return el.then(function (val) {
            return Zanimo.apply(this, [val].concat(Array.prototype.slice.call(args, 1)));
        });
    }
    if (!isDOM(el)) {
        return Q.reject(new Error("Zanimo require an HTMLElement, or a promise of an HTMLElement"));
    }
    if (arity === 1) {
        return Q(el);
    }
    try {
        prefix.dash(attr);
    } catch(err) {
        return Q.reject(new Error("Zanimo transition: " + attr + ' is not supported!'));
    };
    if (arity === 3) {
        return css(el, attr, value);
    }
    if(window.isNaN(parseInt(duration, 10))) {
        return Q.reject(new Error("Zanimo transition: duration must be an integer!"));
    }
    return animate(el, attr, value, duration, easing);
};

/**
 * A function wrapping `Zanimo(el, ...)` as a `f(...)(el)` for easy chaining purpose.
 */
Zanimo.f = function (attr, value, duration, easing) {
    var args = Array.prototype.slice.call(arguments);
    return function (el) {
        return Zanimo.apply(this, [el].concat(args));
    };
};

module.exports = Zanimo;

},{"../src/normalize-transform-value":133,"../src/transition-shorthand-property":134,"q":125,"qanimationframe":126,"vendor-prefix":130}],132:[function(require,module,exports){
'use strict';

var matchParenthesis = /(\(.+?\))/g,
    space = / +/g,
    emptyString = "",
    whitespace = " ",

    normalize = function (match) {
        var args = match.substr(1, match.length-2).split(","),
            rst = args.map(function (arg) {
                return parseFloat(arg.replace(space, emptyString));
            });
        return "(" + rst.join(",") + ")";
    };

module.exports = function (t) {
    return  typeof t === 'string' ? t.replace(space, whitespace).replace(matchParenthesis, normalize) : t;
};

},{}],133:[function(require,module,exports){
'use strict';

var Color = require('color'),
    matchParenthesis = /(\(.+?\))/g,
    matchColors = /(\brgba\b|\bhsl\b|\bhsla\b)(\(.+?\))/g,
    space = / +/g,
    emptyString = "",
    whitespace = " ",
    zeropixel = /^0px$/g,
    zero = "0",

    normArgs = function (match) {
        var args = match.substr(1, match.length-2).split(","),
            rst = args.map(function (arg) {
                return arg.replace(space, emptyString).replace(zeropixel, zero);
            });
        return "(" + rst.join(",") + ")";
    },

    normColors = function (match) {
        var c = Color(match);
        if (c.alpha() ) { c.alpha(Math.round(c.alpha() * 10) / 10); }
        return c.rgbString();
    },

    normalize = function (val) {
        return val.replace(space, whitespace)
            .replace(matchColors, normColors)
            .replace(matchParenthesis, normArgs);
    };

module.exports = function (val) {
    if (val === null || val === undefined) return emptyString;
    return window.isNaN(val) ? normalize(val) : val.toString();
};

},{"color":6}],134:[function(require,module,exports){
'use strict';

var prefix = require('vendor-prefix'),
    normalizeTransformValue = require('./normalize-transform-value'),
    normalizeTimingFunction = require('./normalize-timing-function'),
    transition = prefix.dash('transition'),
    el = document.createElement('div'),
    test = 'opacity 100ms linear 0s',
    normalizedTest = normalizeTransformValue(test),
    shorthand = function shorthand(v, d, t) {
        return v + " " + d + "ms " + (t || "linear");
    };

el.style[transition] = normalizedTest;

if(normalizeTransformValue(el.style[transition]) === normalizedTest) {
    shorthand = function (v, d, t) {
        return v + " " + d + "ms " + (normalizeTimingFunction(t) || "linear") + " 0s";
    };
}

module.exports = shorthand;

},{"./normalize-timing-function":132,"./normalize-transform-value":133,"vendor-prefix":130}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = backbutton;

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _utils = require('./utils');

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stack = [];

function backbutton() {
  var b = stack.pop();
  if ((0, _isFunction2.default)(b)) {
    b('backbutton');
    _mithril2.default.redraw();
  } else if (!/^\/$/.test(_mithril2.default.route())) {
    // if playing a game as anon ask for confirmation
    if (/^\/game\/[a-zA-Z0-9]{12}/.test(_mithril2.default.route())) {
      navigator.notification.confirm((0, _i18n2.default)('thereIsAGameInProgress'), function (i) {
        if (i === 1) (0, _utils.backHistory)();
      });
    } else {
      (0, _utils.backHistory)();
    }
  } else {
    window.navigator.app.exitApp();
  }
};

backbutton.stack = stack;

},{"./i18n":138,"./utils":210,"lodash/isFunction":97,"mithril":114}],136:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var defaults = {
  apiVersion: 1,
  fetchTimeoutMs: 10000
};

var config = Object.assign({}, defaults, window.oyunkeyf);

exports.default = config;

},{}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apiVersion = exports.SESSION_ID_KEY = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.fetchJSON = fetchJSON;

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _spinner = require('./spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _querystring = require('./utils/querystring');

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SESSION_ID_KEY = exports.SESSION_ID_KEY = 'sessionId';

var baseUrl = _config2.default.apiEndPoint;

function addQueryString(url, queryString) {
  var prefix = url.indexOf('?') < 0 ? '?' : '&';
  var res = url + prefix + queryString;
  return res;
}

function request(url, type, opts, feedback) {

  var timeoutId = void 0;

  function onComplete() {
    clearTimeout(timeoutId);
    if (feedback) _spinner2.default.stop();
  }

  if (opts && opts.query) {
    var query = (0, _querystring.buildQueryString)(opts.query);
    if (query !== '') {
      url = addQueryString(url, query);
    }
    delete opts.query;
  }

  var cfg = {
    method: 'GET',
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Accept': 'application/vnd.oyunkeyf.v' + _config2.default.apiVersion + '+json'
    }
  };

  (0, _merge2.default)(cfg, opts);

  var init = _extends({}, cfg, {
    credentials: 'include',
    headers: new Headers(cfg.headers)
  });

  if ((init.method === 'POST' || init.method === 'PUT') && !init.headers.get('Content-Type')) {
    init.headers.append('Content-Type', 'application/json; charset=UTF-8');
    if (!init.body) {
      init.body = '{}';
    }
  }

  var sid = _storage2.default.get(SESSION_ID_KEY);
  if (sid !== null) {
    init.headers.append(SESSION_ID_KEY, sid);
  }

  var fullUrl = url.indexOf('http') > -1 ? url : baseUrl + url;

  var timeoutPromise = new Promise(function (_, reject) {
    timeoutId = setTimeout(function () {
      return reject(new Error('Request timeout'));
    }, _config2.default.fetchTimeoutMs);
  });

  var respOrTimeout = Promise.race([fetch(fullUrl, init), timeoutPromise]);

  if (feedback) {
    _spinner2.default.spin();
  }

  return new Promise(function (resolve, reject) {
    respOrTimeout.then(function (r) {
      onComplete();
      if (r.ok) {
        resolve(r[type]());
      } else {
        r.text().then(function (bodyText) {
          try {
            reject({
              status: r.status,
              body: JSON.parse(bodyText)
            });
          } catch (_) {
            reject({
              status: r.status,
              body: r.statusText
            });
          }
        });
      }
    }).catch(function (err) {
      console.log('error ' + err);
      onComplete();
      reject({
        status: 0,
        body: err.message
      });
    });
  });
}

function fetchJSON(url, opts) {
  var feedback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return request(url, 'json', opts, feedback);
}

var apiVersion = exports.apiVersion = 1;

// const baseUrl = window.oyunkeyf.apiEndPoint;

function onSuccess(data) {
  _spinner2.default.stop();
  return data;
}

function onError(data) {
  _spinner2.default.stop();
  throw data;
}

function xhrConfig(xhr) {
  xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
  xhr.setRequestHeader('Accept', 'application/vnd.oyunkeyf.v' + apiVersion + '+json');
  xhr.withCredentials = true;
  xhr.timeout = 8000;
}

// convenient wrapper around m.request
// export function request(url, opts, feedback, xhrConf) {
//   var cfg = {
//     url: baseUrl + url,
//     method: 'GET',
//     data: { },
//     config: xhrConf || xhrConfig,
//     deserialize: function(text) {
//       try {
//         return JSON.parse(text);
//       } catch (e) {
//         throw { response: { error: 'Cannot read data from the server' }};
//       }
//     },
//     unwrapError: function(response, xhr) {
//       return { response, status: xhr.status };
//     }
//   };
//   merge(cfg, opts);

//   if (cfg.method === 'GET') {
//     cfg.data._ = Date.now();
//   }

//   var promise = m.request(cfg);

//   if (feedback) {
//     spinner.spin(document.body);
//     return promise.then(onSuccess, onError);
//   } else {
//     return promise;
//   }
// }

},{"./config":136,"./spinner":151,"./storage":152,"./utils/querystring":211,"lodash/merge":105}],138:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLang = getLang;
exports.default = i18n;
exports.loadPreferredLanguage = loadPreferredLanguage;
exports.loadLanguage = loadLanguage;

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultCode = 'tr-TR';

var lang = defaultCode;
var messages = {};

var untranslated = {};

function getLang() {
  return lang;
}

function i18n(key) {
  var str = messages[key] || untranslated[key] || key;

  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  args.forEach(function (a) {
    str = str.replace('%s', String(a));
  });

  return str;
}

function loadPreferredLanguage() {
  var fromSettings = _settings2.default.general.lang();
  if (fromSettings) {
    return loadLanguage(fromSettings);
  }

  return new Promise(function (resolve) {
    window.navigator.globalization.getPreferredLanguage(function (l) {
      return resolve(l.value.split('-')[0]);
    }, function () {
      return resolve(defaultCode);
    });
  }).then(function (code) {
    _settings2.default.general.lang(code);
    return code;
  }).then(loadFile).then(loadMomentLocale);
}

function loadLanguage(lang) {
  return loadFile(lang).then(loadMomentLocale);
}

function loadFile(code) {
  return (0, _utils.loadLocalJsonFile)('i18n/' + code + '.json').then(function (data) {
    lang = code;
    messages = data;
    return code;
  }).catch(function (error) {
    if (code === defaultCode) throw new Error(error);
    return loadFile(defaultCode);
  });
}

// export function getAvailableLanguages() {
//   return m.request({
//     url: 'i18n/refs.json',
//     method: 'GET'
//   }).then(data => { return data; }, error => {
//     // same workaround for iOS as above
//     if (error && error[0][0] === 'tr')
//       return error;
//     else
//       throw { error: 'Cannot load languages' };
//   });
// }


// export function loadFromSettings() {
//   return loadFile(settings.general.lang()).then(loadMomentLocale);
// }

// function loadFile(code) {
//   return m.request({
//     url: 'i18n/' + code + '.json',
//     method: 'GET',
//     deserialize: function(text) {
//       try {
//         return JSON.parse(text);
//       } catch (e) {
//         throw { error: 'Lang not available' };
//       }
//     }
//   }).then(function(data) {
//     messages = data;
//     return code;
//   }, function(error) {
//     // workaround for iOS: because xhr for local file has a 0 status it will
//     // reject the promise and still have the response object
//     if (error && error.playWithAFriend) {
//       messages = error;
//       return code;
//     } else {
//       if (code === defaultCode) throw new Error(error);
//       return loadFile(defaultCode);
//     }
//   });
// }

function loadMomentLocale(code) {
  if (code !== 'en') {
    var script = document.createElement('script');
    script.src = 'moment/locale/' + code + '.js';
    document.head.appendChild(script);
  }
  window.moment.locale(code);
  return code;
}

},{"./settings":148,"./utils":210}],139:[function(require,module,exports){
'use strict';

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

var _session = require('./session');

var _session2 = _interopRequireDefault(_session);

var _redraw = require('./utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _i18n = require('./i18n');

var _xhr = require('./xhr');

var xhr = _interopRequireWildcard(_xhr);

var _helper = require('./ui/helper');

var helper = _interopRequireWildcard(_helper);

var _backbutton = require('./backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _socket = require('./socket');

var _socket2 = _interopRequireDefault(_socket);

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _appMode = require('./utils/appMode');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.moment = _moment2.default; /* application entry point */

// import './polyfills';


// for moment a global object makes loading locales easier


var firstConnection = true;

function main() {
  _routes2.default.init();
  // cache viewport dims
  helper.viewportDim();

  // pull session data once (to log in user automatically thanks to cookie)
  // and also listen to online event in case network was disconnected at app
  // startup
  if (utils.hasNetwork()) {
    onOnline();
  }

  document.addEventListener('online', onOnline, false);
  document.addEventListener('offline', onOffline, false);
  document.addEventListener('resume', onResume, false);
  document.addEventListener('pause', onPause, false);
  document.addEventListener('backbutton', _router2.default.backbutton, false);
  window.addEventListener('unload', function () {
    _socket2.default.destroy();
    _socket2.default.terminate();
  });
  window.addEventListener('resize', onResize, false);

  if (cordova.platformId === 'android') {
    window.StatusBar.backgroundColorByHexString('#151A1E');
  }

  setTimeout(function () {
    window.navigator.splashscreen.hide();
    window.StatusBar.hide();
    // xhrStatus();
  }, 500);
}

function onOnline() {
  if ((0, _appMode.isForeground)()) {
    if (firstConnection) {
      firstConnection = false;
      // xhr.status();

      _session2.default.rememberLogin().then(function (user) {
        var serverLang = user.language && user.language.split('-')[0];
        if (serverLang) {
          (0, _i18n.ensureLangIsAvailable)(serverLang).then(function (lang) {
            _settings2.default.general.lang(lang);
            (0, _i18n.loadLanguage)(lang);
          });
        }
        (0, _redraw2.default)();
      }).catch(function () {
        console.log('connected as anonymous');
      });
    } else {
      _socket2.default.connect();
      _session2.default.refresh();
    }
  }
}

function onOffline() {
  if ((0, _appMode.isForeground)() && !hasNetwork()) {
    _socket2.default.disconnect();
    (0, _redraw2.default)();
  }
}

function onResize() {
  helper.clearCachedViewportDim();
  (0, _redraw2.default)();
}

function onResume() {
  (0, _appMode.setForeground)();
  _session2.default.refresh();
  _socket2.default.connect();
  (0, _redraw2.default)();
}

function onPause() {
  (0, _appMode.setBackground)();
  _socket2.default.disconnect();
}

// function handleError(event, source, fileno, columNumber) {
//   var description = event + ' at ' + source + ' [' + fileno + ', ' + columNumber + ']';
// }

// window.onerror = handleError;

document.addEventListener('deviceready', function () {
  return (0, _i18n.loadPreferredLanguage)().then(main);
}, false);

},{"./backbutton":135,"./i18n":138,"./router":145,"./routes":146,"./session":147,"./settings":148,"./socket":150,"./ui/helper":157,"./utils":210,"./utils/appMode":208,"./utils/redraw":212,"./xhr":215,"moment":123}],140:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _status = require('./status');

var _status2 = _interopRequireDefault(_status);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function playable(data) {
  return data.game.status.id < _status2.default.ids.aborted;
}

function isPlayerPlaying(data) {
  return playable(data) && !data.player.spectator;
}

function isPlayerTurn(data) {
  return isPlayerPlaying(data) && data.game.player === data.player.side;
}

function getPlayer(data, side) {
  return ['player', 'opponentLeft', 'opponentRight', 'opponentUp'].map(function (k) {
    return data[k];
  }).filter(function (player) {
    return player.side === side;
  })[0];
}

function result(data) {
  if (_status2.default.aborted(data)) {
    return (0, _i18n2.default)('gameAborted');
  } else if (_status2.default.finished(data)) {
    return (0, _i18n2.default)('gameFinished');
  }
};

var sides = ["east", "north", "west", "south"];

function sideByPly(ply) {
  return sides[ply % 4];
}

function setOnGame(data, side, onGame) {
  var player = getPlayer(data, side);
  player.onGame = onGame;
}

// function roundsOrScores(game) {
//   if (game.rounds) {
//     return data.
//   } else if (data.scores) {

//   } else {
//     return '';
//   }
// }

function title(data) {
  var text;
  if (isPlayerTurn(data)) {
    text = (0, _i18n2.default)('yourTurn');
  } else {
    text = (0, _i18n2.default)('waitingForOpponent');
  }
  // const variant = getVariant(data.game.variant.key);
  // const name = variant ? (variant.shortName || variant.name) : '';
  return text;
}

exports.default = {
  isPlayerPlaying: isPlayerPlaying,
  isPlayerTurn: isPlayerTurn,
  getPlayer: getPlayer,
  sideByPly: sideByPly,
  playable: playable,
  setOnGame: setOnGame,
  title: title,
  result: result
};

},{"../i18n":138,"./status":143}],141:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.playerName = playerName;
exports.aiName = aiName;

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function playerName(player) {
  if (player.name || player.username || player.user) {
    var name = player.name || player.username || player.user.username;
    return name;
  }
  if (player.ai) {
    return aiName(player);
  }
  return 'Anonymous';
}

function aiName(player) {
  return (0, _i18n2.default)('aiBot', 1);
}

},{"../i18n":138}],142:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.humanSetupFromSettings = humanSetupFromSettings;
function humanSetupFromSettings(settingsObj) {
  return {
    mode: settingsObj.mode(),
    variant: settingsObj.variant(),
    rounds: settingsObj.rounds()
  };
}

},{}],143:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ids = {
  created: 10,
  started: 20,
  aborted: 25,
  middleEnd: 30,
  normalEnd: 40,
  variantEnd: 70
}; // scalaokey/src/main/scala/Status.scala

function started(data) {
  return data.game.status.id >= ids.started;
}

function finished(data) {
  return data.game.status.id >= ids.middleEnd;
}

function aborted(data) {
  return data.game.status.id === ids.aborted;
}

function middleEnd(data) {
  return data.game.status.id === ids.middleEnd;
}

function playing(data) {
  return started(data) && !finished(data) && !aborted(data);
}

function toLabel(status, winner, variant) {
  switch (status) {
    case 'started':
      return (0, _i18n2.default)('playingRightNow');
    case 'aborted':
      return (0, _i18n2.default)('gameAborted');
    case 'middleEnd':
      return (0, _i18n2.default)('gameMiddleFinished');
    case 'normalEnd':
      return (0, _i18n2.default)('gameFinished');
    case 'variantEnd':
      return (0, _i18n2.default)('gameFinished');
  }
};

exports.default = {
  ids: ids,
  started: started,
  finished: finished,
  aborted: aborted,
  playing: playing,
  middleEnd: middleEnd,
  toLabel: toLabel
};

},{"../i18n":138}],144:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVariant = getVariant;
var variantMap = {
  yuzbir: {
    name: 'Yüzbir',
    id: 1
  },
  yuzbirtest: {
    name: 'Yuzbir Test',
    id: 2
  },
  duzokey: {
    name: 'Düz Okey',
    id: 3
  },
  duzokeytest: {
    name: 'Düz Okey Test',
    id: 4
  }
};

function getVariant(key) {
  return variantMap[key];
}

},{}],145:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defineRoutes = defineRoutes;

var _rliteRouter = require('rlite-router');

var _rliteRouter2 = _interopRequireDefault(_rliteRouter);

var _render = require('mithril/render');

var RenderService = _interopRequireWildcard(_render);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _vnode = require('mithril/render/vnode');

var _vnode2 = _interopRequireDefault(_vnode);

var _signals = require('./signals');

var _signals2 = _interopRequireDefault(_signals);

var _redraw = require('./utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var router = new _rliteRouter2.default();

var currentStateId = 0;
var viewSlideDirection = 'fwd';

var previousPath = '/';

var uid = function () {
  var id = 0;
  return function () {
    return id++;
  };
}();

var backbutton = function () {
  var x = function x() {

    var b = x.stack.length === 0 ? null : x.stack.pop();

    if ((0, _isFunction2.default)(b)) {
      b('backbutton');
      (0, _redraw2.default)();
    } else if (!/^\/$/.test(get())) {
      backHistory();
    } else {
      window.navigator.app.exitApp();
    }
  };

  x.stack = [];

  return x;
}();

function defineRoutes(mountPoint, routes) {
  var _loop = function _loop(route) {
    var component = routes[route];
    router.add(route, function onRouteMatch(_ref) {
      var params = _ref.params;

      var RouteComponent = {
        view: function view() {
          var node = (0, _vnode2.default)(component, undefined, params);
          return node;
        }
      };

      function redraw() {
        RenderService.render(mountPoint, (0, _vnode2.default)(RouteComponent));
      }

      _signals2.default.redraw.removeAll();
      _signals2.default.redraw.add(redraw);
      try {
        redraw();
      } catch (e) {
        _signals2.default.redraw.removeAll();
        throw e;
      }
    });
  };

  for (var route in routes) {
    _loop(route);
  }
  window.addEventListener('popstate', processQuerystring);
  processQuerystring();
}

function processQuerystring(e) {
  if (e && e.state) {
    if (e.state.id < currentStateId) {
      viewSlideDirection = 'bwd';
    } else {
      viewSlideDirection = 'fwd';
    }
    currentStateId = e.state.id;
  }
  previousPath = get();
  var qs = window.location.search || '?=';
  var matched = router.run(qs.slice(2));
  if (!matched) router.run('/');
}

function assignState(state, path) {
  try {
    var newState = state ? Object.assign({}, window.history.state, state) : window.history.state;

    if (path !== undefined) {
      window.history.replaceState(newState, '', '?=' + path);
    } else {
      window.history.replaceState(newState, '');
    }
  } catch (e) {
    console.error(e);
  }
}

function replacePath(path) {
  assignState(undefined, path);
}

function doSet(path) {
  var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  backbutton.stack = [];
  previousPath = get();
  if (replace) {
    replacePath(path);
  } else {
    var stateId = uid();
    currentStateId = stateId;
    viewSlideDirection = 'fwd';
    try {
      window.history.pushState({ id: stateId }, '', '?=' + path);
    } catch (e) {
      console.error(e);
    }
  }
  var matched = router.run(path);
  if (!matched) router.run('/');
}

function set(path) {
  var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  setTimeout(function () {
    return doSet(path, replace);
  }, 0);
}

function get() {
  var path = window.location.search || '?=/';
  return decodeURIComponent(path.substring(2));
}

function backHistory() {
  window.history.go(-1);
}

exports.default = {
  get: get,
  set: set,
  backbutton: backbutton,
  backHistory: backHistory
};

},{"./signals":149,"./utils/redraw":212,"lodash/isFunction":97,"mithril/render":115,"mithril/render/vnode":120,"rlite-router":127}],146:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _home = require('./ui/home');

var _home2 = _interopRequireDefault(_home);

var _game = require('./ui/game');

var _game2 = _interopRequireDefault(_game);

var _user = require('./ui/user');

var _user2 = _interopRequireDefault(_user);

var _players = require('./ui/players');

var _players2 = _interopRequireDefault(_players);

var _detail = require('./ui/masa/detail');

var _detail2 = _interopRequireDefault(_detail);

var _masa = require('./ui/masa');

var _masa2 = _interopRequireDefault(_masa);

var _todo = require('./ui/todo');

var _todo2 = _interopRequireDefault(_todo);

var _settings = require('./ui/settings');

var _settings2 = _interopRequireDefault(_settings);

var _lang = require('./ui/settings/lang');

var _lang2 = _interopRequireDefault(_lang);

var _router = require('./router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  init: function init() {
    (0, _router.defineRoutes)(document.body, {
      '': _home2.default,
      '@/:id': _user2.default,
      'players': _players2.default,
      'game/:id': _game2.default,
      'masa/:masaId/game/:id': _game2.default,
      'masas': _masa2.default,
      'masa/:id': _detail2.default,
      'settings': _settings2.default,
      'settings/lang': _lang2.default,
      'todo': _todo2.default
    });
  }
};

},{"./router":145,"./ui/game":153,"./ui/home":159,"./ui/masa":169,"./ui/masa/detail":165,"./ui/players":175,"./ui/settings":179,"./ui/settings/lang":180,"./ui/todo":203,"./ui/user":204}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _http = require('./http');

var _utils = require('./utils');

var _redraw = require('./utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var session = void 0;

function isConnected() {
  return session !== undefined;
}

function getSession() {
  return session;
}

function isSession(data) {
  return data.id !== undefined;
}

function storeSession(d) {}

function login(username, password) {
  return (0, _http.fetchJSON)('/login', {
    method: 'POST',
    body: JSON.stringify({
      username: username,
      password: password
    })
  }, true).then(function (data) {
    if (isSession(data)) {
      session = data;
      if (session.sessionId) {
        _storage2.default.set(_http.SESSION_ID_KEY, session.sessionId);
      }
      // storeSession(data);
      return session;
    }
    return false;
  });
}

function signup(username, email, password) {
  return (0, _http.fetchJSON)('/signup', {
    method: 'POST',
    body: JSON.stringify({
      username: username,
      email: email,
      password: password
    })
  }, true).then(function (d) {
    if (isSession(d)) {
      session = d;
      if (session.sessionId) {
        _storage2.default.set(_http.SESSION_ID_KEY, session.sessionId);
      }
    }
    return d;
  });
}

function rememberLogin() {
  return (0, _http.fetchJSON)('/account/info').then(function (data) {
    session = data;
    storeSession(data);
    return data;
  });
}

function refresh() {
  return (0, _http.fetchJSON)('/account/info', { cache: 'reload' }).then(function (data) {
    session = data;
    storeSession(data);
    (0, _redraw2.default)();
  }).catch(function (err) {
    if (session !== undefined && err.status === 401) {
      session = undefined;
      onLogout();
      (0, _redraw2.default)();
      window.plugins.toast.show((0, _i18n2.default)('signedOut'), 'short', 'center');
    }
  });
}

function onLogout() {
  _storage2.default.remove(_http.SESSION_ID_KEY);
  signals.afterLogout.dispatch();
}

function logout() {
  return (0, _http.fetchJSON)('/logout', { method: 'GET' }, true).then(function () {
    session = undefined;
    (0, _redraw2.default)();
  }).catch(_utils.handleXhrError);
};

exports.default = {
  isConnected: isConnected,
  signup: signup,
  logout: logout,
  login: (0, _throttle2.default)(login, 1000),
  rememberLogin: (0, _throttle2.default)(rememberLogin, 1000),
  get: getSession,
  refresh: (0, _throttle2.default)(refresh, 1000)
};

},{"./http":137,"./i18n":138,"./settings":148,"./storage":152,"./utils":210,"./utils/redraw":212,"lodash/throttle":109}],148:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

var _range = require('lodash/range');

var _range2 = _interopRequireDefault(_range);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function tupleOf(x) {
  return [x.toString(), x.toString()];
}

exports.default = {
  general: {
    lang: _storage2.default.prop('settings.lang', null),
    theme: {
      background: _storage2.default.prop('settings.bgTheme', 'dark')
    }
  },
  game: {
    supportedVariants: ['standard', 'yuzbir', 'duzokey']
  },
  gameSetup: {
    availableRounds: [1, 5, 10, 15, 20, 25, 30].map(tupleOf),
    isRoundValid: function isRoundValid(gameSettings) {
      return gameSettings.rounds() !== '0';
    },
    human: {
      availableVariants: [['101 Okey', '1'], ['Düz Okey', '3']],
      variant: _storage2.default.prop('settings.game.human.variant', '1'),
      rounds: _storage2.default.prop('settings.game.human.rounds', '1'),
      mode: _storage2.default.prop('settings.game.human.mode', '0'),
      membersOnly: _storage2.default.prop('settings.game.human.membersOnly', false)
    }
  }
};

},{"./storage":152,"lodash/range":107}],149:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _signals = require('signals');

exports.default = {

  redraw: new _signals.Signal(),

  afterLogin: new _signals.Signal(),

  afterLogout: new _signals.Signal(),

  sessionRestored: new _signals.Signal()

};

},{"signals":128}],150:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _redraw = require('./utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

var _http = require('./http');

var _utils = require('./utils');

var _worker = require('./utils/worker');

var _session = require('./session');

var _session2 = _interopRequireDefault(_session);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function setupConnection(setup, socketHandlers) {
  var sid = _storage2.default.get(_http.SESSION_ID_KEY);
  if (sid !== null) {
    if (setup.opts.params) {
      setup.opts.params[_http.SESSION_ID_KEY] = sid;
    } else {
      setup.opts.params = _defineProperty({}, _http.SESSION_ID_KEY, sid);
    }
  } else if (setup.opts.params) {
    delete setup.opts.params.sessionId;
  }
  setup.opts.options.isAuth = !!sid;
  worker.onmessage = function (msg) {
    switch (msg.data.topic) {
      case 'onOpen':
        if (socketHandlers.onOpen) socketHandlers.onOpen();
        break;
      case 'disconnected':
        onDisconnected();
        break;
      case 'connected':
        onConnected();
        break;
      case 'onError':
        if (socketHandlers.onError) socketHandlers.onError();
        break;
      case 'handle':
        var h = socketHandlers.events[msg.data.payload.t];
        if (h) h(msg.data.payload.d, msg.data.payload);
        break;
    }
  };

  (0, _worker.tellWorker)(worker, 'create', setup);
}

function onConnected() {
  if (!connectedWS) {
    connectedWS = true;
    (0, _redraw2.default)();
  }
}

function onDisconnected() {
  if (connectedWS) {
    connectedWS = false;
    (0, _redraw2.default)();
  }
}

function reconnectCurrent() {}

var connectedWS = false;

var worker = new Worker('lib/socketWorker.js');
var defaultHandlers = {};

function createLobby(name, _onOpen, handlers) {
  var socketHandlers = {
    onOpen: function onOpen() {
      _session2.default.refresh();
      _onOpen();
    },
    events: Object.assign({}, defaultHandlers, handlers)
  };
  var opts = {
    options: {
      name: name,
      debug: _config2.default.mode === 'dev',
      pingDelay: 2000,
      sendOnOpen: [],
      registeredEvents: Object.keys(socketHandlers.events)
    }
  };
  var setup = {
    clientId: (0, _utils.newSri)(),
    socketEndPoint: _config2.default.socketEndPoint,
    url: '/lobby/socket/v' + _config2.default.apiVersion,
    opts: opts
  };
  setupConnection(setup, socketHandlers);
}

function createMasa(masaId, version, handlers) {
  var url = '/masa/' + masaId + ('/socket/v' + _config2.default.apiVersion);
  var socketHandlers = {
    events: Object.assign({}, defaultHandlers, handlers),
    onOpen: _session2.default.backgroundRefresh
  };
  var opts = {
    options: {
      name: 'masa',
      debug: _config2.default.mode === 'dev',
      pingDelay: 2000,
      registeredEvents: Object.keys(socketHandlers.events)
    }
  };
  var setup = {
    clientId: (0, _utils.newSri)(),
    socketEndPoint: _config2.default.socketEndPoint,
    url: url,
    version: version,
    opts: opts
  };
  setupConnection(setup, socketHandlers);
}

function createGame(url, version, handlers, gameUrl) {
  var socketHandlers = {
    onOpen: _session2.default.backgroundRefresh,
    events: Object.assign({}, defaultHandlers, handlers)
  };
  var opts = {
    options: {
      name: 'game',
      debug: _config2.default.mode === 'dev',
      sendOnOpen: [],
      registeredEvents: Object.keys(socketHandlers.events)
    }
  };
  var setup = {
    clientId: (0, _utils.newSri)(),
    socketEndPoint: _config2.default.socketEndPoint,
    url: url,
    version: version,
    opts: opts
  };

  setupConnection(setup, socketHandlers);
}

exports.default = {
  createGame: createGame,
  createLobby: createLobby,
  createMasa: createMasa,
  reconnectCurrent: reconnectCurrent,
  setVersion: function setVersion(version) {
    (0, _worker.tellWorker)(worker, 'setVersion', version);
  },

  send: function send(t, data, opts) {
    (0, _worker.tellWorker)(worker, 'send', [t, data, opts]);
  },
  isConnected: function isConnected() {
    return connectedWS;
  },
  connect: function connect() {
    (0, _worker.tellWorker)(worker, 'connect');
  },
  destroy: function destroy() {
    (0, _worker.tellWorker)(worker, 'destroy');
  }
};

/// OLD


// const worker = new Worker('lib/socketWorker.js');

// let socketHandlers;
// let errorDetected = false;
// let connectedWS = true;

// let alreadyWarned = false;
// let redrawOnDisconnectedTimeoutID;
// let proxyFailTimeoutID;
// const proxyFailMsg = "Oyunkeyf sunucularına bağlantı koptu. Problem sürekli yaşanıyorsa proxy yada network'la ilgili olabilir.";

// const defaultHandlers = {
// };

// function createGame(url, version, handlers, gameUrl) {
//   errorDetected = false;
//   socketHandlers = {
//     onError: function() {
//       // we can't get socket error, so we send an xhr to test whether the
//       // rejection is an authorization issue
//       if (!errorDetected) {
//         // just to be sure that we don't send an xhr every second when the
//         // websocket is trying to reconnect
//         errorDetected = true;
//         xhr.game(gameUrl.substring(1)).then(function() {}, function(err) {
//           if (err.status === 401) {
//             window.plugins.toast.show(i18n('unauthorizedError'), 'short', 'center');
//             m.route('/');
//           }
//         });
//       }
//     },
//     events: Object.assign({}, defaultHandlers, handlers)
//   };

//   const opts = {
//     options: {
//       name: 'game',
//       debug: false,
//       registeredEvents: Object.keys(socketHandlers.events)
//     }
//   };
//   tellWorker(worker, 'create', {
//     clientId: oyunkeyfSri,
//     socketEndPoint: window.oyunkeyf.socketEndPoint,
//     url,
//     version,
//     opts
//   });
// }

// function createMasa(masaId, version, handlers) {
//   let url = '/masa/' + masaId + '/socket/v1';

//   socketHandlers = {
//     events: Object.assign({}, defaultHandlers, handlers)
//   };
//   const opts = {
//     options: {
//       name: 'masa',
//       debug: false,
//       pingDelay: 2000,
//       registeredEvents: Object.keys(socketHandlers.events)
//     }
//   };
//   tellWorker(worker, 'create', {
//     clientId: oyunkeyfSri,
//     socketEndPoint: window.oyunkeyf.socketEndPoint,
//     url,
//     version,
//     opts
//   });
// }

// function createMasaHome(handlers) {
//   let url = '/socket';

//   socketHandlers = {
//     events: Object.assign({}, defaultHandlers, handlers)
//   };
//   const opts = {
//     params: { flag: 'masa' },
//     options: {
//       name: 'masaHome',
//       debug: false,
//       pingDelay: 2000,
//       registeredEvents: Object.keys(socketHandlers.events)
//     }
//   };
//   tellWorker(worker, 'create', {
//     clientId: oyunkeyfSri,
//     socketEndPoint: window.oyunkeyf.socketEndPoint,
//     url,
//     version: 0,
//     opts
//   });
// }

// function createLobby(lobbyVersion, onOpen, handlers) {
//   socketHandlers = {
//     onOpen,
//     events: Object.assign({}, defaultHandlers, handlers)
//   };
//   const opts = {
//     options: {
//       name: 'lobby',
//       debug: false,
//       pingDelay: 2000,
//       registeredEvents: Object.keys(socketHandlers.events)
//     }
//   };
//   tellWorker(worker, 'create', {
//     clientId: oyunkeyfSri,
//     socketEndPoint: window.oyunkeyf.socketEndPoint,
//     url: '/lobby/socket/v1',
//     version: lobbyVersion,
//     opts
//   });
// }


// function createDefault() {
//   // default socket is useless when anon.?
//   if (hasNetwork()) {
//     socketHandlers = {
//       events: defaultHandlers
//     };
//     const opts = {
//       options: {
//         name: 'default',
//         debug: false,
//         pingDelay: 2000,
//         registeredEvents: Object.keys(socketHandlers.events)
//       }
//     };
//     tellWorker(worker, 'create', {
//       clientId: oyunkeyfSri,
//       socketEndPoint: window.oyunkeyf.socketEndPoint,
//       url: '/socket',
//       version: 0,
//       opts
//     });
//   }
// }

// function onConnected() {
//   const wasOff = !connectedWS;
//   connectedWS = true;
//   clearTimeout(proxyFailTimeoutID);
//   clearTimeout(redrawOnDisconnectedTimeoutID);
//   if (wasOff) m.redraw();
// }

// function onDisconnected() {
//   const wasOn = connectedWS;
//   connectedWS = false;
//   if (wasOn) redrawOnDisconnectedTimeoutID = setTimeout(function() {
//     m.redraw();
//   }, 2000);
//   if (wasOn && !alreadyWarned && !storage.get('donotshowproxyfailwarning')) proxyFailTimeoutID = setTimeout(() => {
//     // check if disconnection lasts, it could mean a proxy prevents
//     // establishing a tunnel
//     if (hasNetwork() && !connectedWS) {
//       alreadyWarned = true;
//       window.navigator.notification.alert(proxyFailMsg, function() {
//         storage.set('donotshowproxyfailwarning', true);
//       });
//     }
//   }, 20000);
// }

// worker.addEventListener('message', function(msg) {
//   switch(msg.data.topic) {
//   case 'onOpen':
//     if (socketHandlers.onOpen) socketHandlers.onOpen();
//     break;
//   case 'disconnected':
//     onDisconnected();
//     break;
//   case 'connected':
//     onConnected();
//     break;
//   case 'onError':
//     if (socketHandlers.onError) socketHandlers.onError();
//     break;
//   case 'handle':
//     var h = socketHandlers.events[msg.data.payload.t];
//     if (h) h(msg.data.payload.d || null, msg.data.payload);
//     break;
//   }
// });

// // export default {
// //   createDefault,
// //   createMasa,
// //   createMasaHome,
// //   createGame,
// //   createLobby,
// //   setVersion(version) {
// //     tellWorker(worker, 'setVersion', version);
// //   },
// //   send(type, data, opts) {
// //     tellWorker(worker, 'send', [type, data, opts]);
// //   },
// //   connect() {
// //     tellWorker(worker, 'connect');
// //   },
// //   disconnect() {
// //     tellWorker(worker, 'disconnect');
// //   },
// //   isConnected() {
// //     return connectedWS;
// //   },
// //   destroy() {
// //     tellWorker(worker, 'destroy');
// //   },
// //   terminate() {
// //     if (worker) worker.terminate();
// //   }
// // };

},{"./config":136,"./http":137,"./session":147,"./storage":152,"./utils":210,"./utils/redraw":212,"./utils/worker":214}],151:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var timeoutId;

exports.default = {
  spin: function spin() {
    if (timeoutId || document.getElementsByClassName('globalSpinner').length > 0) {
      return false;
    }

    var spinner = document.createElement('div');
    spinner.className = 'spinner globalSpinner';
    var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('viewBox', '0 0 40 40');
    var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    circle.setAttribute('cx', '20');
    circle.setAttribute('cy', '20');
    circle.setAttribute('r', '18');
    circle.setAttribute('fill', 'none');
    svg.appendChild(circle);
    spinner.appendChild(svg);

    timeoutId = setTimeout(function () {
      return document.body.appendChild(spinner);
    }, 200);
  },
  stop: function stop() {
    clearTimeout(timeoutId);
    timeoutId = null;
    var spinners = document.getElementsByClassName('globalSpinner');
    if (spinners.length) {
      setTimeout(function () {
        while (spinners[0]) {
          document.body.removeChild(spinners[0]);
        }
      }, 500);
    }
  },
  getVdom: function getVdom(classes) {
    return h(
      'div',
      { 'class': 'spinner ' + classes },
      h(
        'svg',
        { viewBox: '0 0 40 40' },
        h('circle', { cx: '20', cy: '20', r: '18', fill: 'none' })
      )
    );
  }
};

},{"mithril/hyperscript":113}],152:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
function withStorage(f) {
  // can throw an exception if storage is full
  try {
    return !!window.localStorage ? f(window.localStorage) : null;
  } catch (e) {}
}

function get(k) {
  return withStorage(function (s) {
    return JSON.parse(s.getItem(k));
  });
}
function remove(k) {
  return withStorage(function (s) {
    s.removeItem(k);
  });
}
function set(k, v) {
  return withStorage(function (s) {
    s.removeItem(k);
    s.setItem(k, JSON.stringify(v));
  });
}

function prop(key, initialValue) {
  return function () {
    if (arguments.length) set(key, arguments[0]);
    var ret = get(key);
    return ret !== null && ret !== undefined ? ret : initialValue;
  };
}

exports.default = {
  get: get,
  set: set,
  remove: remove,
  prop: prop
};

},{}],153:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _socket = require('../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _router = require('../../router');

var _router2 = _interopRequireDefault(_router);

var _utils = require('../../utils');

var _xhr = require('../../xhr');

var _sleep = require('../../utils/sleep');

var sleepUtils = _interopRequireWildcard(_sleep);

var _OnlineRound = require('../shared/round/OnlineRound');

var _OnlineRound2 = _interopRequireDefault(_OnlineRound);

var _roundView = require('../shared/round/view/roundView');

var _roundView2 = _interopRequireDefault(_roundView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
  oninit: function oninit(_ref) {
    var _this = this;

    var attrs = _ref.attrs;

    var gameData = void 0;

    sleepUtils.keepAwake();

    if ((0, _utils.hasNetwork)()) {
      (0, _xhr.game)(attrs.id).then(function (data) {
        gameData = data;

        setTimeout(function () {
          _this.round = new _OnlineRound2.default(attrs.id, data);
        }, 400);
      }).catch(function (error) {
        (0, _utils.handleXhrError)(error);
        _router2.default.set('/');
      });
    }
  },
  oncreate: function oncreate(vnode) {
    if (vnode.dom) helper.elFadeIn(vnode.dom);
  },
  onremove: function onremove() {
    sleepUtils.allowSleepAgain();
    _socket2.default.destroy();
    if (this.round) {
      this.round.unload();
    }
  },
  view: function view(_ref2) {
    var attrs = _ref2.attrs;

    if (this.round) return (0, _roundView2.default)(this.round);

    return null;
  }
};

},{"../../i18n":138,"../../router":145,"../../socket":150,"../../utils":210,"../../utils/sleep":213,"../../xhr":215,"../helper":157,"../shared/round/OnlineRound":192,"../shared/round/view/roundView":199}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _popup = require('./shared/popup');

var _popup2 = _interopRequireDefault(_popup);

var _form = require('./shared/form');

var _form2 = _interopRequireDefault(_form);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _newGameForm = require('./newGameForm');

var _newGameForm2 = _interopRequireDefault(_newGameForm);

var _helper = require('./helper');

var _helper2 = _interopRequireDefault(_helper);

var _iscroll = require('iscroll');

var _iscroll2 = _interopRequireDefault(_iscroll);

var _settings = require('../settings');

var _settings2 = _interopRequireDefault(_settings);

var _session = require('../session');

var _session2 = _interopRequireDefault(_session);

var _backbutton = require('../backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _lobby = require('./lobby');

var _lobby2 = _interopRequireDefault(_lobby);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

var _ViewOnlyBoard = require('./shared/ViewOnlyBoard');

var _ViewOnlyBoard2 = _interopRequireDefault(_ViewOnlyBoard);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scroller = null;

var gamesMenu = {};

gamesMenu.isOpen = false;

gamesMenu.open = function () {
  _backbutton2.default.stack.push(gamesMenu.close);
  gamesMenu.isOpen = true;
  setTimeout(function () {
    if (utils.hasNetwork() && scroller) scroller.goToPage(1, 0);
  }, 400);
  _session2.default.refresh();
};

gamesMenu.close = function (fromBB) {
  if (fromBB !== 'backbutton' && gamesMenu.isOpen) _backbutton2.default.stack.pop();
  gamesMenu.isOpen = false;
};

function joinGame(g) {
  gamesMenu.close();
  _mithril2.default.route('/game/' + g.fullId);
}

function cardDims() {
  var vp = _helper2.default.viewportDim();

  // if we're here it's a phone
  var width = 200;
  var height = width / (4 / 3);
  var margin = 10;
  return {
    w: width + margin * 2,
    h: height + 70,
    innerW: width,
    margin: margin
  };
}

function renderViewOnlyBoard(cDim, fen, orientation, variant) {
  var innerH = cDim ? cDim.innerW / (4 / 3) : 0;
  var innerW = cDim ? cDim.innerW : 0;
  var style = cDim ? { height: innerH + 'px' } : {};
  var bounds = cDim ? { width: innerW, height: innerH } : null;
  return h(
    'div',
    { className: 'boardWrapper', style: style },
    _mithril2.default.component(_ViewOnlyBoard2.default, { bounds: bounds, fen: fen, orientation: orientation, variant: variant })
  );
}

function timeLeft(g) {
  if (!g.isMyTurn) return (0, _i18n2.default)('waitingForOpponent');
  return (0, _i18n2.default)('yourTurn');
}

function renderGame(g, cDim, cardStyle) {
  var icon = utils.gameIcon(g.perf);
  var cardClass = ['card', 'standard'].join(' ');

  var timeClass = ['timeIndication', g.isMyTurn ? 'myTurn' : 'opponentTurn'].join(' ');
  var config = _helper2.default.ontouchX(function () {
    return joinGame(g);
  });

  return h(
    'div',
    { className: cardClass, key: 'game.' + g.gameId, style: cardStyle,
      config: config },
    renderViewOnlyBoard(cDim, g.fen, g.side, g.variant),
    h(
      'div',
      { className: 'infos' },
      h(
        'div',
        { className: 'description' },
        h(
          'p',
          null,
          h(
            'span',
            { className: 'variant' },
            g.variant.name
          ),
          h(
            'span',
            { className: timeClass },
            timeLeft(g)
          )
        )
      )
    )
  );
}

function renderAllGames(cDim) {
  var nowPlaying = _session2.default.nowPlaying(); // .concat(session.nowPlaying());
  var cardStyle = cDim ? {
    width: cDim.w - cDim.margin * 2 + 'px',
    height: cDim.h + 'px',
    marginLeft: cDim.margin + 'px',
    marginRight: cDim.margin + 'px'
  } : {};

  var nbCards = utils.hasNetwork() ? nowPlaying.length + 1 : 0;

  var wrapperStyle = void 0,
      wrapperWidth = void 0;
  if (cDim) {
    // scroller wrapper width
    // calcul is:
    // ((cardWidth + visible part of adjacent card) * nb of cards) +
    // wrapper's marginLeft
    wrapperWidth = (cDim.w + cDim.margin * 2) * nbCards + cDim.margin * 2;
    wrapperStyle = {
      width: wrapperWidth + 'px',
      marginLeft: cDim.margin * 3 + 'px'
    };
  }

  var allCards = nowPlaying.map(function (g) {
    return renderGame(g, cDim, cardStyle);
  });

  if (!_helper2.default.isWideScreen()) {

    var newGameCard = h(
      'div',
      { className: 'card standard', key: 'game.new-game', style: cardStyle,
        config: _helper2.default.ontouchX(function () {
          gamesMenu.close();_newGameForm2.default.open();
        }) },
      renderViewOnlyBoard(cDim),
      h(
        'div',
        { className: 'infos' },
        h(
          'div',
          { className: 'description' },
          h(
            'h2',
            { className: 'title' },
            (0, _i18n2.default)('createAGame')
          ),
          h(
            'p',
            null,
            (0, _i18n2.default)('newOpponent')
          )
        )
      )
    );
    if (utils.hasNetwork()) allCards.unshift(newGameCard);
  }

  return (0, _mithril2.default)('div#all_games', { style: wrapperStyle }, allCards);
}

gamesMenu.view = function () {
  if (!gamesMenu.isOpen) return null;

  var vh = _helper2.default.viewportDim().vh;
  var cDim = cardDims();
  var wrapperStyle = _helper2.default.isWideScreen() ? {} : { top: (vh - cDim.h) / 2 + 'px' };
  var wrapperConfig = _helper2.default.isWideScreen() ? utils.noop : function (el, isUpdate, context) {
    if (!isUpdate) {
      scroller = new _iscroll2.default(el, {
        scrollX: true,
        scrollY: false,
        momentum: false,
        snap: '.card',
        snapSpeed: 400,
        preventDefaultException: {
          tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|LABEL)$/
        }
      });

      context.unonload = function () {
        if (scroller) {
          scroller.destroy();
          scroller = null;
        }
      };
    }
    // see https://github.com/cubiq/iscroll/issues/412
    scroller.options.snap = el.querySelectorAll('.card');
    scroller.refresh();
  };

  var isWideScreen = _helper2.default.isWideScreen();

  var wrapperClass = isWideScreen ? 'overlay_popup' : '';

  return h(
    'div',
    { id: 'games_menu', className: 'overlay_popup_wrapper' },
    h('div', { className: 'wrapper_overlay_close',
      config: _helper2.default.ontouch(_helper2.default.fadesOut(gamesMenu.close, '.overlay_popup_wrapper')) }),
    h(
      'div',
      { id: 'wrapper_games', className: wrapperClass, style: wrapperStyle, config: wrapperConfig },
      isWideScreen ? h(
        'header',
        null,
        (0, _i18n2.default)('nbGamesInPlay', _session2.default.nowPlaying().length)
      ) : null,
      isWideScreen ? h(
        'div',
        { className: 'popup_content' },
        renderAllGames(null)
      ) : renderAllGames(cDim)
    )
  );
};

exports.default = gamesMenu;

},{"../backbutton":135,"../i18n":138,"../session":147,"../settings":148,"../utils":210,"./helper":157,"./lobby":161,"./newGameForm":174,"./shared/ViewOnlyBoard":185,"./shared/form":187,"./shared/popup":191,"iscroll":7,"mithril":114,"mithril/hyperscript":113}],155:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = animator;

var _utils = require('../../utils');

var animating = false;

// Author Barney Caroll
// taken from https://gist.github.com/barneycarroll/c69fbe0786e37c941baf

// Define an animator consisting of optional incoming and outgoing animations.
// alwaysAnimate is false unless specified as true: false means an incoming animation will only trigger if an outgoing animation is also in progress.
// forcing dontClone to true means the outward animation will use the original element rather than a clone. This could improve performance by recycling elements, but can lead to trouble: clones have the advantage of being stripped of all event listeners.
function animator(incoming, outgoing, alwaysAnimate, dontClone) {
  // The resulting animator can be applied to any number of components
  return function animate(x, y, z) {
    var config;
    var parent;
    var next;

    // When used as a config function
    if (x.nodeType) {
      return animationConfig(x, y, z);
    }
    // When passed a virtual DOM node (the output of m)
    else if (x.attrs) {
        return bindConfigTo(x);
      }
      // When applied to a Mithril module / component
      else if (x.view) {
          return {
            controller: x.controller || _utils.noop,
            view: function animatedView(ctrl) {
              return bindConfigTo(x.view(ctrl));
            }
          };
        }

    function bindConfigTo(node) {
      if (!node) return null;

      config = node.attrs.config;

      node.attrs.config = animationConfig;

      return node;
    }

    function animationConfig(el, init, context) {
      var output;
      var onunload;

      if (config) {
        output = config(el, init, context);
        // If the root element already has a config, it may also have an onunload which we should take care to preserve
        onunload = context.onunload;
      }

      if (!init) {
        if (incoming && alwaysAnimate || animating) {
          incoming(el, _utils.noop, context);
        }

        context.onunload = outgoing ? onunload ? function onunloadWrapper() {
          teardown();
          onunload();
        } : teardown : onunload;

        parent = el.parentElement;
        next = el.nextSibling;
      }

      return output;

      function teardown() {
        var insertion = dontClone ? el : el.cloneNode(true);
        var reference = null;

        if (next && parent && next.parentNode === parent) {
          reference = next;
        }

        animating = true;

        setTimeout(function resetAnimationFlag() {
          animating = false;
        }, 0);

        parent.insertBefore(insertion, reference);

        outgoing(insertion, function destroy() {
          if (parent.contains(insertion)) {
            parent.removeChild(insertion);
          }
        }, context);
      }
    }
  };
}

},{"../../utils":210}],156:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ButtonHandler;

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HOLD_DURATION = 600;
var REPEAT_RATE = 20;
var SCROLL_TOLERANCE = 8;
var ACTIVE_CLASS = 'active';

function hasContextMenu() {
  return window.cordova.platformId !== 'ios';
}

function ButtonHandler(el, tapHandler, holdHandler, repeatHandler, scrollX, scrollY, touchEndFeedback) {

  var startX = void 0,
      startY = void 0,
      boundaries = void 0,
      active = void 0,
      holdTimeoutID = void 0,
      repeatTimeoutId = void 0,
      repeatIntervalID = void 0;

  if (typeof tapHandler !== 'function') throw new Error('ButtonHandler 2nd argument must be a function!');

  if (holdHandler && typeof holdHandler !== 'function') throw new Error('ButtonHandler 3rd argument must be a function!');

  if (repeatHandler && typeof repeatHandler !== 'function') throw new Error('ButtonHandler 4rd argument must be a function!');

  // http://ejohn.org/blog/how-javascript-timers-work/
  function onRepeat() {
    var res = repeatHandler();
    repeatIntervalID = setTimeout(onRepeat, REPEAT_RATE);
    if (!res) clearTimeout(repeatIntervalID);
    _mithril2.default.redraw();
  }

  function onTouchStart(e) {
    var touch = e.changedTouches[0];
    var boundingRect = el.getBoundingClientRect();
    startX = touch.clientX;
    startY = touch.clientY;
    boundaries = {
      minX: boundingRect.left,
      maxX: boundingRect.right,
      minY: boundingRect.top,
      maxY: boundingRect.bottom
    };
    active = true;
    setTimeout(function () {
      if (active) el.classList.add(ACTIVE_CLASS);
    }, 200);
    if (!hasContextMenu()) holdTimeoutID = setTimeout(onHold, HOLD_DURATION);
    clearTimeout(repeatIntervalID);
    if (repeatHandler) repeatTimeoutId = setTimeout(function () {
      repeatIntervalID = setTimeout(onRepeat, REPEAT_RATE);
    }, 150);
  }

  function onTouchMove(e) {
    // if going out of bounds, no way to reenable the button
    if (active) {
      var touch = e.changedTouches[0];
      active = isActive(touch);
      if (!active) {
        clearTimeout(holdTimeoutID);
        clearTimeout(repeatTimeoutId);
        clearTimeout(repeatIntervalID);
        el.classList.remove(ACTIVE_CLASS);
      }
    }
  }

  function onTouchEnd(e) {
    if (e.cancelable) e.preventDefault();
    clearTimeout(repeatTimeoutId);
    clearTimeout(repeatIntervalID);
    if (active) {
      clearTimeout(holdTimeoutID);
      if (touchEndFeedback) el.classList.add(ACTIVE_CLASS);
      tapHandler(e);
      active = false;
      setTimeout(function () {
        return el.classList.remove(ACTIVE_CLASS);
      }, 80);
    }
  }

  function onTouchCancel() {
    clearTimeout(holdTimeoutID);
    clearTimeout(repeatTimeoutId);
    clearTimeout(repeatIntervalID);
    active = false;
    el.classList.remove(ACTIVE_CLASS);
  }

  function onContextMenu(e) {
    e.preventDefault();
    e.stopPropagation();
    if (holdTimeoutID === undefined) onHold();
  }

  function onHold() {
    if (holdHandler) {
      holdHandler();
      active = false;
      el.classList.remove(ACTIVE_CLASS);
    }
  }

  function isActive(touch) {
    var x = touch.clientX,
        y = touch.clientY,
        b = boundaries,
        d = 0;
    if (scrollX) d = Math.abs(x - startX);
    if (scrollY) d = Math.abs(y - startY);
    return x < b.maxX && x > b.minX && y < b.maxY && y > b.minY && d < SCROLL_TOLERANCE;
  }

  el.addEventListener('touchstart', onTouchStart, false);
  el.addEventListener('touchmove', onTouchMove, false);
  el.addEventListener('touchend', onTouchEnd, false);
  el.addEventListener('touchcancel', onTouchCancel, false);
  el.addEventListener('contextmenu', onContextMenu, false);
}

},{"mithril":114}],157:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ontap = ontap;
exports.ontapXY = ontapXY;
exports.slidesInUp = slidesInUp;
exports.slidesOutDown = slidesOutDown;
exports.elFadeIn = elFadeIn;
exports.getButton = getButton;
exports.viewportDim = viewportDim;
exports.findParentBySelector = findParentBySelector;
exports.getLI = getLI;
exports.classSet = classSet;
exports.clearCachedViewportDim = clearCachedViewportDim;

var _zanimo = require('zanimo');

var _zanimo2 = _interopRequireDefault(_zanimo);

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _redraw = require('../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

var _animator = require('./animator');

var _animator2 = _interopRequireDefault(_animator);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var animDuration = 250;

function createTapHandler(tapHandler, holdHandler, repeatHandler, scrollX, scrollY, getElement, preventEndDefault) {
  return function (vnode) {
    (0, _button2.default)(vnode.dom, function (e) {
      tapHandler(e);
      (0, _redraw2.default)();
    }, holdHandler ? function (e) {
      return utils.autoredraw(function () {
        return holdHandler(e);
      });
    } : undefined, repeatHandler, scrollX, scrollY, getElement, preventEndDefault);
  };
}

function ontap(tapHandler, holdHandler, repeatHandler, getElement) {
  return createTapHandler(tapHandler, holdHandler, repeatHandler, false, false, getElement);
}

function ontapXY(tapHandler, holdHandler, getElement) {
  var preventEndDefault = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  return createTapHandler(tapHandler, holdHandler, undefined, true, true, getElement, preventEndDefault);
}

function slidesInUp(vnode) {
  var el = vnode.dom;
  el.style.transform = 'translateY(100%)';
  vnode.state.lol = el.offsetHeight;
  return (0, _zanimo2.default)(el, 'transform', 'translateY(0)', 250, 'ease-out').catch(console.log.bind(console));
}

function slidesOutDown(callback, elID) {
  return function (fromBB) {
    var el = document.getElementById(elID);
    return (0, _zanimo2.default)(el, 'transform', 'translateY(100%)', 250, 'ease-out').then(function () {
      return utils.autoredraw(function () {
        return callback(fromBB);
      });
    }).catch(console.log.bind(console));
  };
}

// el fade in transition, can be applied to any element
function elFadeIn(el) {
  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : animDuration;
  var origOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0.5';
  var endOpacity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '1';

  var tId = void 0;

  el.style.opacity = origOpacity;
  el.style.transition = 'opacity ' + duration + 'ms ease-out';

  setTimeout(function () {
    el.style.opacity = endOpacity;
  });

  function after() {
    clearTimeout(tId);
    if (el) {
      el.removeAttribute('style');
      el.removeEventListener('transitionend', after, false);
    }
  }

  el.addEventListener('transitionend', after, false);
  // in case transitionend does not fire
  tId = setTimeout(after, duration + 10);
}

function getButton(e) {
  var target = e.target;
  return target.tagName === 'BUTTON' ? target : findParentBySelector(target, 'button');
}

// OLD

//store temporarily last route to disable animations on same route
// TODO find a better way cause this is ugly
var lastRoute = void 0;

// this must be cached because of the access to document.body.style
var cachedTransformProp = void 0;
var cachedViewportDim = null;

function viewSlideIn(el, callback) {
  if (_mithril2.default.route() === lastRoute) {
    callback();
    return;
  }

  lastRoute = _mithril2.default.route();

  function after() {
    utils.setViewSlideDirection('fwd');
    el.removeAttribute('style');
    callback();
  }

  var direction = utils.getViewSlideDirection() === 'fwd' ? '100%' : '-100%';
  el.style.transform = 'translate3d(' + direction + ',0,0)';
  el.style.transition = 'transform 200ms ease-out';

  setTimeout(function () {
    el.style.transform = 'translate3d(0%,0,0)';
  });

  el.addEventListener('transitionend', after, false);
}

function viewSlideOut(el, callback) {
  if (_mithril2.default.route() === lastRoute) {
    callback();
    return;
  }

  function after() {
    utils.setViewSlideDirection('fwd');
    callback();
  }

  var direction = utils.getViewSlideDirection() === 'fwd' ? '-100%' : '100%';
  el.style.transform = 'translate3d(0%,0,0)';
  el.style.transition = 'transform 200ms ease-out';

  setTimeout(function () {
    el.style.transform = 'translate3d(' + direction + ',0,0)';
  });

  el.addEventListener('transitionend', after, false);
}

function viewFadesIn(el, callback) {
  var tId;

  el.style.opacity = '0.5';
  el.style.transition = 'opacity 200ms ease-out';

  setTimeout(function () {
    el.style.opacity = '1';
  });

  function after() {
    clearTimeout(tId);
    if (el) {
      el.removeAttribute('style');
      el.removeEventListener('transitioned', after, false);
    }
    callback();
  }

  el.addEventListener('transitioned', after, false);

  // in case transitioned does not fire
  // TODO find a way to avoid it
  tId = setTimeout(after, 250);
}

function viewFadesOut(el, callback) {
  var tId;

  el.style.opacity = '1';
  el.style.transition = 'opacity 200ms ease-out, visibility 0s linear 200ms';

  setTimeout(function () {
    el.style.opacity = '0';
    el.style.visibility = 'hidden';
  });

  function after() {
    clearTimeout(tId);
    callback();
  }

  el.addEventListener('transitioned', after, false);

  // in case transitioned does not fire
  // TODO find a way to avoid it
  tId = setTimeout(after, 250);
}

function collectionHas(coll, el) {
  for (var i = 0, len = coll.length; i < len; i++) {
    if (coll[i] === el) return true;
  }
  return false;
}

function findParentBySelector(el, selector) {
  var matches = document.querySelectorAll(selector);
  var cur = el.parentNode;
  while (cur && !collectionHas(matches, cur)) {
    cur = cur.parentNode;
  }
  return cur;
}

function ontouch(tapHandler, holdHandler, repeatHandler, scrollX, scrollY, touchEndFeedback) {
  return function (el, isUpdate) {
    if (!isUpdate) {
      (0, _button2.default)(el, function (e) {
        _mithril2.default.startComputation();
        try {
          tapHandler(e);
        } finally {
          _mithril2.default.endComputation();
        }
      }, holdHandler ? function () {
        return utils.autoredraw(holdHandler);
      } : null, repeatHandler, scrollX, scrollY, touchEndFeedback);
    }
  };
}

function computeTransformProp() {
  return 'transform' in document.body.style ? 'transform' : 'webkitTransform' in document.body.style ? 'webkitTransform' : 'mozTransform' in document.body.style ? 'mozTransform' : 'oTransform' in document.body.style ? 'oTransform' : 'msTransform';
}

function viewportDim() {
  if (cachedViewportDim) return cachedViewportDim;

  var e = document.documentElement;
  var vpd = cachedViewportDim = {
    vw: e.clientWidth,
    vh: e.clientHeight
  };
  return vpd;
}

function collectionHas(coll, el) {
  for (var i = 0, len = coll.length; i < len; i++) {
    if (coll[i] === el) return true;
  }
  return false;
}

function findParentBySelector(el, selector) {
  var matches = document.querySelectorAll(selector);
  var cur = el;
  while (cur && !collectionHas(matches, cur)) {
    cur = cur.parentNode;
  }
  return cur;
}

function getLI(e) {
  var target = e.target;
  return target.tagName === 'LI' ? target : findParentBySelector(target, 'LI');
}

function classSet(classes) {
  var arr = [];
  for (var i in classes) {
    if (classes[i]) arr.push(i);
  }
  return arr.join(' ');
}

function clearCachedViewportDim() {
  cachedViewportDim = null;
}

// export default {
//   slidingPage: animator(viewSlideIn, viewSlideOut),
//   fadingPage: animator(viewFadesIn, viewFadesOut),
//   viewportDim,
//   clearCachedViewportDim() {
//     cachedViewportDim = null;
//   },

//   transformProp: function() {
//     if (!cachedTransformProp) cachedTransformProp = computeTransformProp();
//     return cachedTransformProp;
//   },

//   slidesInUp: function(el, isUpdate, context) {
//     if (!isUpdate) {
//       el.style.transform = 'translateY(100%)';
//       // force reflow back
//       context.lol = el.offsetHeight;
//       Zanimo(el, 'transform', 'translateY(0)', 250, 'ease-out')
//         .catch(console.log.bind(console));
//     }
//   },
//   slidesOutDown: function(callback, elID) {
//     return function() {
//       const el = document.getElementById(elID);
//       m.redraw.strategy('none');
//       return Zanimo(el, 'transform', 'translateY(100%)', 250, 'ease-out')
//         .then(utils.autoredraw.bind(null, callback))
//         .catch(callback);
//     };
//   },

//   fadesOut: function(callback, selector, time = 150) {
//     return function(e) {
//       e.stopPropagation();
//       var el = selector ? findParentBySelector(e.target, selector) : e.target;
//       m.redraw.strategy('none');
//       return Zanimo(el, 'opacity', 0, time)
//         .then(() => utils.autoredraw(callback))
//         .catch(console.log.bind(console));
//     };
//   },

//   ontouch: function(tapHandler, holdHandler, repeatHandler, touchEndFeedback = true) {
//     return ontouch(tapHandler, holdHandler, repeatHandler, false, false, touchEndFeedback);
//   },
//   ontouchX: function(tapHandler, holdHandler, touchEndFeedback = true) {
//     return ontouch(tapHandler, holdHandler, null, true, false, touchEndFeedback);
//   },
//   ontouchY: function(tapHandler, holdHandler, touchEndFeedback = true) {
//     return ontouch(tapHandler, holdHandler, null, false, true, touchEndFeedback);
//   },
//   classSet: function(classes) {
//     var arr = [];
//     for (var i in classes) {
//       if (classes[i]) arr.push(i);
//     }
//     return arr.join(' ');
//   },

//   isWideScreen: function() {
//     return viewportDim().vw >= 600;
//   },
//   isIpadLike: function() {
//     const { vh, vw } = viewportDim();
//     return vh >= 700 && vw <= 1050;
//   },
//   isPortrait: function() {
//     return window.matchMedia('(orientation: portrait)').matches;
//   },
//   isLandscape: function() {
//     return window.matchMedia('(orientation: landscape)').matches;
//   },
//   progress: function (p) {
//     if (p === 0) return null;
//     return m('span', {
//       className: 'progress ' + (p > 0 ? 'positive' : 'negative'),
//       'data-icon': p > 0 ? 'N' : 'M'
//     }, Math.abs(p));
//   }
// };

},{"../../utils":210,"../../utils/redraw":212,"./animator":155,"./button":156,"mithril":114,"zanimo":131}],158:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

exports.body = body;

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _helper = require('../helper');

var _helper2 = _interopRequireDefault(_helper);

var _newGameForm = require('../newGameForm');

var _newGameForm2 = _interopRequireDefault(_newGameForm);

var _common = require('../shared/common');

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function body(ctrl) {
  var nbPlayers = (0, _i18n2.default)('nbConnectedPlayers', ctrl.nbConnectedPlayers() || '?');
  var nbGames = (0, _i18n2.default)('nbGamesInPlay', ctrl.nbGamesInPlay() || '?');

  return h(
    'div',
    { className: 'native_scroller page' },
    h(
      'div',
      { className: 'home' },
      h(
        'section',
        { className: 'stats' },
        h(
          'div',
          { className: 'numPlayers' },
          nbPlayers
        ),
        h(
          'div',
          { className: 'numGames' },
          nbGames
        )
      ),
      renderQuickGame()
    )
  );

  // const header = headerWidget.bind(null, 'oyunkeyf.net');

  // return layout.free(header, body);
}

function renderQuickGame() {
  return h('div.homeCreate', [h('h2.homeTitle', 'Hemen oyna'), (0, _newGameForm.renderQuickSetup)(function () {
    return _newGameForm2.default.openRealtime('custom');
  })]);
}

},{"../../i18n":138,"../helper":157,"../layout":160,"../newGameForm":174,"../shared/common":186,"mithril":114,"mithril/hyperscript":113}],159:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stream = require('mithril/stream');

var _stream2 = _interopRequireDefault(_stream);

var _socket = require('../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _utils = require('../../utils');

var _redraw = require('../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _appMode = require('../../utils/appMode');

var _common = require('../shared/common');

var _homeView = require('./homeView');

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oninit: function oninit() {
    var nbConnectedPlayers = (0, _stream2.default)();
    var nbGamesInPlay = (0, _stream2.default)();

    function init() {
      if ((0, _appMode.isForeground)()) {
        _socket2.default.createLobby('homeLobby', _utils.noop, {
          n: function n(_, d) {
            nbConnectedPlayers(d.d);
            nbGamesInPlay(d.r);
            (0, _redraw2.default)();
          }
        });
      }
    }

    function onResume() {
      (0, _appMode.setForeground)();
      init();
    }

    if ((0, _utils.hasNetwork)()) {
      init();
    }

    document.addEventListener('online', init);
    document.addEventListener('resume', onResume);

    this.ctrl = {
      nbConnectedPlayers: nbConnectedPlayers,
      nbGamesInPlay: nbGamesInPlay,
      init: init,
      onResume: onResume
    };
  },
  onremove: function onremove() {
    _socket2.default.destroy();
    document.removeEventListener('online', this.ctrl.init);
    document.removeEventListener('resume', this.ctrl.onResume);
  },
  view: function view() {
    var header = (0, _common.dropShadowHeader)('oyunkeyf.net');

    return _layout2.default.free(header, (0, _homeView.body)(this.ctrl));
  }
};

},{"../../socket":150,"../../utils":210,"../../utils/appMode":208,"../../utils/redraw":212,"../layout":160,"../shared/common":186,"./homeView":158,"mithril/stream":121}],160:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _menu = require('./menu');

var menu = _interopRequireWildcard(_menu);

var _menuView = require('./menu/menuView');

var _menuView2 = _interopRequireDefault(_menuView);

var _MainBoard = require('./shared/layout/MainBoard');

var _MainBoard2 = _interopRequireDefault(_MainBoard);

var _gamesMenu = require('./gamesMenu');

var _gamesMenu2 = _interopRequireDefault(_gamesMenu);

var _newGameForm = require('./newGameForm');

var _newGameForm2 = _interopRequireDefault(_newGameForm);

var _loginModal = require('./loginModal');

var _loginModal2 = _interopRequireDefault(_loginModal);

var _signupModal = require('./signupModal');

var _signupModal2 = _interopRequireDefault(_signupModal);

var _helper = require('./helper');

var _helper2 = _interopRequireDefault(_helper);

var _settings = require('../settings');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var background;

exports.default = {

  board: function board(header, content, overlay) {
    background = background;

    return (0, _hyperscript2.default)('div.view-container', { className: bgClass(background) }, [(0, _hyperscript2.default)(_MainBoard2.default, { header: header }, content),
    // h(MenuView),
    overlay]);
  },

  free: function free(header, content, footer, overlay) {
    background = background || _settings2.default.general.theme.background();

    return (0, _hyperscript2.default)('div.view-container', { className: bgClass(background) }, [(0, _hyperscript2.default)('main#page', { oncreate: handleMenuOpen }, [(0, _hyperscript2.default)('header.main_header', header), (0, _hyperscript2.default)('div#free_content.content.native_scroller', content), footer ? (0, _hyperscript2.default)('footer.main_footer', footer) : null, (0, _hyperscript2.default)('div#menu-close-overlay.menu-backdrop', { oncreate: menu.backdropCloseHandler })]), (0, _hyperscript2.default)(_menuView2.default), _loginModal2.default.view(), _signupModal2.default.view(), _newGameForm2.default.view(), overlay]);
  }
};


function handleMenuOpen() {}

function bgClass(bgTheme) {
  return bgTheme === 'dark' || bgTheme === 'light' ? bgTheme : 'transp ' + bgTheme;
}

},{"../settings":148,"./gamesMenu":154,"./helper":157,"./loginModal":162,"./menu":172,"./menu/menuView":173,"./newGameForm":174,"./shared/layout/MainBoard":189,"./signupModal":202,"mithril/hyperscript":113}],161:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _redraw = require('../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _router = require('../router');

var _router2 = _interopRequireDefault(_router);

var _xhr = require('../xhr');

var xhr = _interopRequireWildcard(_xhr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
  startSeeking: function startSeeking(conf) {
    doStartSeeking(conf);
  }
};


function doStartSeeking(conf) {
  // router.backbutton.stack.push(userCancelSeeking);

  sendHook(conf);
}

function sendHook(setup) {
  xhr.seekGame(setup).then(function (data) {
    // console.log(data);
    _router2.default.set('/masa/' + data.id);
  }).catch(utils.handleXhrError);
}

// import * as utils from '../utils';
// import * as xhr from '../xhr';
// import m from 'mithril';

// let nbPlayers = 0;
// let nbGames = 0;

// const lobby = {};
// lobby.isOpen = false;

// lobby.startSeeking = function() {
//   xhr.newGame().then(function(data) {
//     // analytics
//     m.route('/masa/' + data.id);
//   }, function(error) {
//     utils.handleXhrError(error);
//     throw error;
//   });
// };


// export default lobby;

},{"../router":145,"../utils":210,"../utils/redraw":212,"../xhr":215}],162:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _redraw = require('../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _session = require('../session');

var _session2 = _interopRequireDefault(_session);

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _signals = require('../signals');

var _signals2 = _interopRequireDefault(_signals);

var _helper = require('./helper');

var helper = _interopRequireWildcard(_helper);

var _backbutton = require('../backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _signupModal = require('./signupModal');

var _signupModal2 = _interopRequireDefault(_signupModal);

var _icons = require('./shared/icons');

var _router = require('../router');

var _router2 = _interopRequireDefault(_router);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isOpen = false;
var formError = null;

exports.default = {
  open: open,
  close: close,
  view: function view() {
    if (!isOpen) return null;

    return (0, _hyperscript2.default)('div.modal#loginModal', { oncreate: helper.slidesInUp }, [(0, _hyperscript2.default)('header', [(0, _hyperscript2.default)('button.modal_close', {
      oncreate: helper.ontap(helper.slidesOutDown(close, 'loginModal'))
    }, _icons.closeIcon), (0, _hyperscript2.default)('h2', (0, _i18n2.default)('signIn'))]), (0, _hyperscript2.default)('div.modal_content', [(0, _hyperscript2.default)('form.login', {
      onsubmit: function onsubmit(e) {
        e.preventDefault();
        submit(e.target);
      }
    }, [formError ? (0, _hyperscript2.default)('div.form-error', formError) : null, (0, _hyperscript2.default)('div.field', [(0, _hyperscript2.default)('input#username', {
      type: 'text',
      className: formError ? 'form-error' : '',
      placeholder: (0, _i18n2.default)('username'),
      autocomplete: 'off',
      autocapitalize: 'off',
      autocorrect: 'off',
      spellcheck: false,
      required: true
    })]), (0, _hyperscript2.default)('div.field', [(0, _hyperscript2.default)('input#password', {
      type: 'password',
      className: formError ? 'form-error' : '',
      placeholder: (0, _i18n2.default)('password'),
      required: true
    })]), (0, _hyperscript2.default)('div.submit', [(0, _hyperscript2.default)('button.submitButton[data-icon=F]', (0, _i18n2.default)('signIn'))])]), (0, _hyperscript2.default)('div.signup', [(0, _i18n2.default)('newToOyunkeyf') + ' ', (0, _hyperscript2.default)('br'), (0, _hyperscript2.default)('a', {
      oncreate: helper.ontap(_signupModal2.default.open)
    }, [(0, _i18n2.default)('signUp')])])])]);
  }
};


function open() {
  _router2.default.backbutton.stack.push(helper.slidesOutDown(close, 'loginModal'));
  isOpen = true;
  formError = null;
}

function close(fromBB) {
  window.Keyboard.hide();
  if (fromBB !== 'backbutton' && isOpen) _router2.default.backbutton.stack.pop();
  isOpen = false;
}

function submit(form) {
  var username = form['username'].value;
  var password = form['password'].value;
  if (!username || !password) return;

  (0, _redraw2.default)();
  window.Keyboard.hide();
  _session2.default.login(username, password).then(function () {
    close();
    window.plugins.toast.show((0, _i18n2.default)('loginSuccessful'), 'short', 'center');
    _signals2.default.afterLogin.dispatch();
    (0, _redraw2.default)();
    socket.reconnectCurrent();
    _session2.default.refresh();
  }).catch(function (err) {
    if (err.status !== 400 && err.status !== 401) (0, _utils.handleXhrError)(err);else {
      if (err.body.global) {
        formError = err.body.global[0];
        (0, _redraw2.default)();
      }
    }
  });
}

// OLD

var loginModal = {};

function submitOLD(form) {
  var login = form[0].value.trim();
  var pass = form[1].value;
  if (!login || !pass) return false;
  window.cordova.plugins.Keyboard.close();
  return _session2.default.login(login, pass).then(function () {
    loginModal.close();
    window.plugins.toast.show((0, _i18n2.default)('loginSuccessful'), 'short', 'center');
    // push.register();
    _session2.default.refresh().catch(function (err) {
      if (err.status === 401) {
        // https://github.com/veloce/lichobile/blob/master/project/src/js/ui/loginModal.js#L28
        window.navigator.notification.alert('oyunkeyfAuthenticationCannotWorkWithoutCookies');
      }
    });
  }).catch(utils.handleXhrError);
}

loginModal.open = function () {
  _backbutton2.default.stack.push(helper.slidesOutDown(loginModal.close, 'loginModal'));
  isOpen = true;
};

loginModal.close = function (fromBB) {
  window.cordova.plugins.Keyboard.close();
  if (fromBB !== 'backbutton' && isOpen) _backbutton2.default.stack.pop();
  isOpen = false;
};

loginModal.view = function () {
  if (!isOpen) return null;

  return m('div.modal#loginModal', { config: helper.slidesInUp }, [m('header', [m('button.modal_close[data-icon=L]', {
    config: helper.ontouch(helper.slidesOutDown(loginModal.close, 'loginModal'))
  }), m('h2', (0, _i18n2.default)('signIn'))]), m('div.modal_content', [m('form.login', {
    onsubmit: function onsubmit(e) {
      e.preventDefault();
      return submit(e.target);
    }
  }, [m('input#pseudo[type=text]', {
    placeholder: (0, _i18n2.default)('username'),
    autocomplete: 'off',
    autocapitalize: 'off',
    autocorrect: 'off',
    spellcheck: 'false',
    required: true
  }), m('input#password[type=password]', {
    placeholder: (0, _i18n2.default)('password'),
    required: true
  }), m('button.fat', (0, _i18n2.default)('signIn'))]), m('div.signup', [m('a', {
    config: helper.ontouch(_signupModal2.default.open)
  }, [(0, _i18n2.default)('newToOyunkeyf'), ' ', (0, _i18n2.default)('signUp')])])])]);
};

// export default loginModal;

},{"../backbutton":135,"../i18n":138,"../router":145,"../session":147,"../signals":149,"../utils":210,"../utils/redraw":212,"./helper":157,"./shared/icons":188,"./signupModal":202,"mithril/hyperscript":113}],163:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MasasListCtrl;

var _redraw = require('../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _utils = require('../../utils');

var _masaXhr = require('./masaXhr');

var xhr = _interopRequireWildcard(_masaXhr);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MasasListCtrl(defaultTab) {
  var _this = this;

  this.currentTab = defaultTab || 0;

  this.refresh = function () {
    xhr.currentMasas().then(function (data) {
      _this.masas = data;
      (0, _redraw2.default)();
    }).catch(_utils.handleXhrError);
  };

  this.refresh();

  this.onTabChange = function (tabIndex) {
    var loc = window.location.search.replace(/\?tab\=\w+$/, '');

    try {
      window.history.replaceState(window.history.state, '', loc + '?tab=' + tabIndex);
    } catch (e) {
      console.error(e);
    }
    _this.currentTab = tabIndex;
    (0, _redraw2.default)();
  };
}

},{"../../utils":210,"../../utils/redraw":212,"./masaXhr":170}],164:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MasaCtrl;

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _socket = require('../../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _redraw = require('../../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _utils = require('../../../utils');

var utils = _interopRequireWildcard(_utils);

var _masaXhr = require('../masaXhr');

var xhr = _interopRequireWildcard(_masaXhr);

var _faq = require('../faq');

var _faq2 = _interopRequireDefault(_faq);

var _socketHandler = require('./socketHandler');

var _socketHandler2 = _interopRequireDefault(_socketHandler);

var _router = require('../../../router');

var _router2 = _interopRequireDefault(_router);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function MasaCtrl(id) {
  var _this = this;

  this.id = id;

  this.faqCtrl = _faq2.default.controller(this);

  xhr.masa(id).then(function (data) {
    _this.masa = data;
    _this.seatId = data.seatId;

    _this.startsAt = window.moment(data.startsAt).calendar();
    loadCurrentPage(_this.masa.standing);
    _this.hasJoined = !!(data.me && !data.me.withdraw);

    _socket2.default.createMasa(_this.id, _this.masa.socketVersion, (0, _socketHandler2.default)(_this));

    (0, _redraw2.default)();
  }).catch(function (err) {
    if (err.status === 404) {
      _this.notFound = true;
      (0, _redraw2.default)();
    } else {
      utils.handleXhrError(err);
    }
  });

  this.invite = (0, _throttle2.default)(function () {
    xhr.invite(_this.masa.id).then(function () {
      (0, _redraw2.default)();
    }).catch(utils.handleXhrError);
  }, 1000);

  this.join = (0, _throttle2.default)(function () {
    xhr.join(_this.masa.id).then(function () {
      _this.hasJoined = true;
      (0, _redraw2.default)();
    }).catch(utils.handleXhrError);
  }, 1000);

  this.withdraw = (0, _throttle2.default)(function () {
    xhr.withdraw(_this.masa.id).then(function () {
      _this.hasJoined = false;
      (0, _redraw2.default)();
    }).catch(utils.handleXhrError);
  }, 1000);

  this.reload = (0, _throttle2.default)(function () {
    xhr.reload(_this.id).then(onReload).catch(onXhrError);
  }, 2000);

  this.unload = function () {
    document.removeEventListener('resume', _this.reload);
  };

  var onReload = function onReload(data) {
    var oldData = _this.masa;
    _this.masa = data;
    _this.seatId = data.seatId;
    loadCurrentPage(data.standing);
    _this.hasJoined = !!(data.me && !data.me.withdraw);
    redirectToMyGame();
    (0, _redraw2.default)();
  };

  var redirectToMyGame = function redirectToMyGame() {
    var gameId = myCurrentGameId(_this);
    if (gameId) _router2.default.set('/masa/' + _this.masa.id + '/game/' + gameId, true);
  };

  var myCurrentGameId = function myCurrentGameId(ctrl) {
    var ids = {
      created: 10,
      started: 20,
      aborted: 25
    };

    var seatId = ctrl.seatId;
    if (!seatId) return null;
    var pairing = ctrl.masa.pairings.filter(function (p) {
      return p.s < ids.aborted && p.u.filter(function (id) {
        return id.toLowerCase() === seatId.toLowerCase();
      })[0];
    })[0];
    return pairing ? pairing.id : null;
  };

  var onXhrError = function onXhrError(err) {
    if (err.status === 404) {
      _this.notFound = true;
    }
    (0, _redraw2.default)();
  };

  var loadCurrentPage = function loadCurrentPage(data) {
    _this.currentPageResults = data.players;
  };
}

},{"../../../router":145,"../../../socket":150,"../../../utils":210,"../../../utils/redraw":212,"../faq":168,"../masaXhr":170,"./socketHandler":167,"lodash/throttle":109}],165:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _socket = require('../../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _i18n = require('../../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _common = require('../../shared/common');

var _helper = require('../../helper');

var helper = _interopRequireWildcard(_helper);

var _layout = require('../../layout');

var _layout2 = _interopRequireDefault(_layout);

var _masaView = require('./masaView');

var _MasaCtrl = require('./MasaCtrl');

var _MasaCtrl2 = _interopRequireDefault(_MasaCtrl);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oninit: function oninit(_ref) {
    var attrs = _ref.attrs;

    this.ctrl = new _MasaCtrl2.default(attrs.id);
  },

  oncreate: helper.viewSlideIn,
  onremove: function onremove() {
    _socket2.default.destroy();
    this.ctrl.unload();
  },
  view: function view() {
    if (this.ctrl.notFound) {
      return _layout2.default.free((0, _common.dropShadowHeader)(null, (0, _common.backButton)((0, _i18n2.default)('masaNotFound'))), (0, _hyperscript2.default)('div.masaNotFound', { key: 'masa-not-found' }, [(0, _hyperscript2.default)('p', (0, _i18n2.default)('masaDoesNotExist')), (0, _hyperscript2.default)('p', (0, _i18n2.default)('masaMayHaveBeenCanceled'))]));
    }

    var masa = this.ctrl.masa;
    var header = void 0;

    if (masa) {
      header = (0, _common.dropShadowHeader)(null, (0, _common.backButton)((0, _hyperscript2.default)('div.main_header_title.withSub', [(0, _hyperscript2.default)('h1', [(0, _hyperscript2.default)('span.fa.fa-trophy'), this.ctrl.masa.fullName]), (0, _hyperscript2.default)('h2.header-subTitle.masa-subTitle', !masa.isFinished && !masa.isStarted ? (0, _masaView.timeInfo)('created', masa.playersToStart, 'Oyuncu bekleniyor') : (0, _masaView.timeInfo)('started', masa.roundsToFinish, ''))])));
    } else {
      header = (0, _common.connectingDropShadowHeader)();
    }

    var body = (0, _masaView.masaBody)(this.ctrl);
    var footer = (0, _masaView.renderFooter)(this.ctrl);
    var faqOverlay = (0, _masaView.renderFAQOverlay)(this.ctrl);
    var overlay = [faqOverlay];

    return _layout2.default.free(header, body, footer, overlay);
  }
};

},{"../../../i18n":138,"../../../socket":150,"../../helper":157,"../../layout":160,"../../shared/common":186,"./MasaCtrl":164,"./masaView":166,"mithril/hyperscript":113}],166:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderFAQOverlay = renderFAQOverlay;
exports.masaBody = masaBody;
exports.renderFooter = renderFooter;
exports.timeInfo = timeInfo;

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _router = require('../../../router');

var _router2 = _interopRequireDefault(_router);

var _session = require('../../../session');

var _session2 = _interopRequireDefault(_session);

var _i18n = require('../../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _helper = require('../../helper');

var helper = _interopRequireWildcard(_helper);

var _settings = require('../../../settings');

var _settings2 = _interopRequireDefault(_settings);

var _variant = require('../../../oyunkeyf/variant');

var variantApi = _interopRequireWildcard(_variant);

var _faq = require('../faq');

var _faq2 = _interopRequireDefault(_faq);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function renderFAQOverlay(ctrl) {
  return [_faq2.default.view(ctrl.faqCtrl)];
}

function masaBody(ctrl) {
  var data = ctrl.masa;
  if (!data) return null;

  return (0, _hyperscript2.default)('div.masaContainer.native_scroller.page', [masaHeader(data, ctrl), data.podium ? masaPodium(data.podium) : null, masaLeaderboard(ctrl)]);
}

function renderFooter(ctrl) {
  var m = ctrl.masa;
  if (!m) return null;
  var mUrl = 'https://oyunkeyf.net/masa/' + m.id;

  return (0, _hyperscript2.default)(
    'div',
    { className: 'actions_bar' },
    (0, _hyperscript2.default)(
      'button',
      { key: 'faq', className: 'action_bar_button', oncreate: helper.ontap(ctrl.faqCtrl.open) },
      (0, _hyperscript2.default)('span', { className: 'fa fa-question-circle' }),
      'SSS'
    ),
    ctrl.hasJoined ? withdrawButton(ctrl, m) : joinButton(ctrl, m)
  );
}

function timeInfo(key, rounds, preceedingText) {
  if (rounds === undefined) return null;

  return [preceedingText ? preceedingText + ' ' : null];
}

function masaHeader(data, ctrl) {
  return (0, _hyperscript2.default)(
    'div',
    { key: 'header', className: 'masaHeader' },
    masaTimeInfo(data),
    masaCreatorInfo(data, ctrl.startsAt)
  );
}

function masaTimeInfo(data) {
  var variant = variantApi.getVariant(data.variant).name;
  var control = data.scores ? data.scores + ' ' + (0, _i18n2.default)('scores') : data.rounds + ' ' + (0, _i18n2.default)('rounds');
  return (0, _hyperscript2.default)(
    'div',
    { className: 'masaTimeInfo' },
    (0, _hyperscript2.default)(
      'strong',
      { className: 'masaInfo withIcon' },
      variant + ' • ' + control
    )
  );
}

function masaCreatorInfo(data, startsAt) {
  return (0, _hyperscript2.default)(
    'div',
    { className: 'masaCreatorInfo' },
    (0, _i18n2.default)('by', data.createdBy),
    '\xA0\u2022\xA0',
    startsAt
  );
}

function joinButton(ctrl, m) {
  if (!_session2.default.isConnected() || m.isFinished) {
    return null;
  }
  var action = function action() {
    return ctrl.join();
  };
  return (0, _hyperscript2.default)(
    'button',
    { key: 'join', className: 'action_bar_button', oncreate: helper.ontap(action) },
    (0, _hyperscript2.default)('span', { className: 'fa fa-play' }),
    (0, _i18n2.default)('join')
  );
}

function withdrawButton(ctrl, m) {
  if (m.isFinished) {
    return null;
  }
  return (0, _hyperscript2.default)(
    'button',
    { key: 'withdraw', className: 'action_bar_button', oncreate: helper.ontap(ctrl.withdraw) },
    (0, _hyperscript2.default)('span', { className: 'fa fa-flag' }),
    (0, _i18n2.default)('withdraw')
  );
}

function masaLeaderboard(ctrl) {

  var data = ctrl.masa;
  var players = ctrl.currentPageResults;
  var user = _session2.default.get();
  var userName = user ? user.username : '';

  return (0, _hyperscript2.default)(
    'div',
    { key: 'leaderboard', className: 'masaLeaderboard' },
    data.nbPlayers > 0 ? (0, _hyperscript2.default)(
      'p',
      { className: 'masaTitle' },
      ' ',
      (0, _i18n2.default)("leaderboard"),
      ' (',
      (0, _i18n2.default)('nbConnectedPlayers', data.nbPlayers),
      ')'
    ) : null,
    (0, _hyperscript2.default)(
      'ul',
      { className: 'masaStandings' },
      players.map(function (p) {
        return renderPlayerEntry(ctrl, userName, p);
      })
    )
  );
}

function renderPlayerEntry(ctrl, userName, player) {
  var isMe = player.name === userName;

  return !player.active ? (0, _hyperscript2.default)(
    'li',
    { key: player.id, className: 'list-item masa-list-player' },
    (0, _hyperscript2.default)(
      'div',
      { className: 'masaPlayer' },
      (0, _hyperscript2.default)(
        'span',
        { className: 'flagRank', 'data-icon': player.withdraw ? 'b' : '' },
        ' ',
        player.withdraw ? '' : player.rank + '. '
      ),
      (0, _hyperscript2.default)(
        'span',
        null,
        ' ',
        (0, _i18n2.default)('emptySeat')
      ),
      (0, _hyperscript2.default)(
        'button',
        { oncreate: helper.ontap(ctrl.invite) },
        (0, _i18n2.default)('inviteBot')
      )
    ),
    (0, _hyperscript2.default)(
      'span',
      { className: 'masaPoints ', 'data-icon': 'Q' },
      player.score
    )
  ) : (0, _hyperscript2.default)(
    'li',
    { className: 'list-item masa-list-player ' + (isMe ? 'masa-me' : '') },
    (0, _hyperscript2.default)(
      'div',
      { className: 'masaPlayer' },
      (0, _hyperscript2.default)(
        'span',
        { className: 'flagRank', 'data-icon': player.withdraw ? 'b' : '' },
        ' ',
        player.withdraw ? '' : player.rank + '. '
      ),
      (0, _hyperscript2.default)(
        'span',
        null,
        ' ',
        !player.name ? 'Anonymous' : player.name + ' (' + player.rating + ') '
      )
    ),
    (0, _hyperscript2.default)(
      'span',
      { className: 'masaPoints ', 'data-icon': 'Q' },
      player.score
    )
  );
}

},{"../../../i18n":138,"../../../oyunkeyf/variant":144,"../../../router":145,"../../../session":147,"../../../settings":148,"../../helper":157,"../faq":168,"mithril/hyperscript":113}],167:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ctrl) {
  return {
    reload: ctrl.reload,
    redirect: function redirect(gameId) {
      // doesn't fire for new join
      console.log("redirect" + gameId);
    }
  };
};

var _redraw = require('../../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _router = require('../../../router');

var _router2 = _interopRequireDefault(_router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"../../../router":145,"../../../utils/redraw":212}],168:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _backbutton = require('../../backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _router = require('../../router');

var _router2 = _interopRequireDefault(_router);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  controller: function controller(masa) {
    var _isOpen = false;

    function open() {
      _router2.default.backbutton.stack.push(close);
      _isOpen = true;
    }
    function close(fromBB) {
      if (fromBB !== 'backbutton' && _isOpen) _router2.default.backbutton.stack.pop();
      _isOpen = false;
    }

    return {
      open: open,
      close: close,
      isOpen: function isOpen() {
        return _isOpen;
      },
      masa: masa
    };
  },
  view: function view(ctrl) {
    if (!ctrl.isOpen()) return null;
    var masa = ctrl.masa;

    if (!masa) return null;

    return h(
      'div',
      { className: 'modal', id: 'masaFaqModal', config: helper.slidesInUp },
      h(
        'header',
        null,
        h('button', { className: 'modal_close', 'data-icon': 'L',
          oncreate: helper.ontap(helper.slidesOutDown(ctrl.close, "masaFaqModal")) }),
        h(
          'h2',
          null,
          (0, _i18n2.default)('masaFAQ')
        )
      ),
      h(
        'div',
        { className: 'modal_content' },
        h(
          'div',
          { className: 'masaFaq' },
          h(
            'h2',
            null,
            'Puanl\u0131 m\u0131?'
          ),
          masa.rated === undefined ? 'Bazı masalar puanlıdır ve reytinginizi etkiler.' : masa.rated ? 'Bu masa puanlıdır ve reytinginizi etkiler.' : 'Bu masa puanlı *değildir* ve reytinginizi *etkilemez*.',
          h(
            'h2',
            null,
            ' Puanlar nas\u0131l hesaplan\u0131r? '
          ),
          'Masaya kat\u0131l\u0131mda her oyuncu ortaya el say\u0131s\u0131 kadar puan\u0131n\u0131 koyar. Masa sonunda ortadaki puanlar \u015F\xF6yle da\u011F\u0131t\u0131l\u0131r:',
          h(
            'ul',
            null,
            h(
              'li',
              null,
              '1. %50 puan'
            ),
            h(
              'li',
              null,
              '2. %25 puan'
            ),
            h(
              'li',
              null,
              '3. %15 puan'
            ),
            h(
              'li',
              null,
              '4. %10 puan'
            )
          ),
          '\xD6rne\u011Fin 10 ellik bir oyunda oyuncular\u0131n puanlar\u0131 1500 olsun. Masaya kat\u0131ld\u0131klar\u0131nda puanlar\u0131 1490 olur. Ortada toplam 40 puan vard\u0131r, ve \u015F\xF6yle da\u011F\u0131t\u0131l\u0131r:',
          h(
            'ul',
            null,
            h(
              'li',
              null,
              '1. +20 = 1510'
            ),
            h(
              'li',
              null,
              '2. +10 = 1500'
            ),
            h(
              'li',
              null,
              '3. +6 = 1496'
            ),
            h(
              'li',
              null,
              '4. +4 = 1494'
            )
          ),
          'Masa bitmeden ayr\u0131lan oyuncu puan alamaz.',
          h(
            'h2',
            null,
            ' Kazanan nas\u0131l belirlenir? '
          ),
          'Masada b\xFCt\xFCn eller oynand\u0131ktan sonra en az cezas\u0131 olan oyuncu galip ilan edilir.',
          h(
            'h2',
            null,
            ' Masada eslestirme nasil yapilir? '
          ),
          'Masaya 4 oyuncu katildiginda el baslar. Bir el bittikten sonra yeni el baslar, yeni ele katilmak icin oyuncular masaya geri donmelidir.',
          h(
            'h2',
            null,
            ' Masa ne zaman biter? '
          ),
          'Masada el say\u0131s\u0131 kadar oyun oynand\u0131\u011F\u0131nda masa biter.',
          h(
            'h2',
            null,
            ' Oyundan ayr\u0131lma '
          ),
          'Oyun devam ederken oyundan ayrilan oyuncu masadan atilir, ve o el iptal olur. Masa bitmeden masadan ayr\u0131lan oyuncu puan alamaz.',
          h(
            'h2',
            null,
            ' Di\u011Fer \xF6nemli kurallar '
          ),
          'Siraniz geldiginde, oyanama s\xFCrenizi a\u015Farsan\u0131z sistem sizin yerinize oynar.'
        )
      )
    );
  }
};

},{"../../backbutton":135,"../../i18n":138,"../../router":145,"../helper":157,"mithril/hyperscript":113}],169:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _session = require('../../session');

var _session2 = _interopRequireDefault(_session);

var _utils = require('../../utils');

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _common = require('../shared/common');

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _MasasListCtrl = require('./MasasListCtrl');

var _MasasListCtrl2 = _interopRequireDefault(_MasasListCtrl);

var _masasListView = require('./masasListView');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {

  oncreate: helper.viewFadeIn,

  oninit: function oninit(_ref) {
    var attrs = _ref.attrs;

    // socket.createDefault()

    this.ctrl = new _MasasListCtrl2.default((0, _utils.safeStringToNum)(attrs.tab));
  },
  view: function view() {
    var ctrl = this.ctrl;

    var body = (0, _masasListView.renderMasasList)(ctrl);
    var footer = (0, _masasListView.renderFooter)(ctrl);
    var overlay = null;

    return _layout2.default.free((0, _common.header)((0, _i18n2.default)('masas')), body, footer, overlay);
  }
};

},{"../../i18n":138,"../../session":147,"../../utils":210,"../helper":157,"../layout":160,"../shared/common":186,"./MasasListCtrl":163,"./masasListView":171}],170:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.currentMasas = currentMasas;
exports.masa = masa;
exports.reload = reload;
exports.join = join;
exports.invite = invite;
exports.withdraw = withdraw;

var _http = require('../../http');

function currentMasas() {
  return (0, _http.fetchJSON)('/masa', {}, true);
}

function masa(id) {
  return (0, _http.fetchJSON)('/masa/' + id, { query: { socketVersion: 1 } }, true);
}

function reload(id, page) {
  return (0, _http.fetchJSON)('/masa/' + id, { method: 'GET', query: page ? { page: page } : {} });
}

function join(id) {
  return (0, _http.fetchJSON)('/masa/' + id + '/join', { method: 'POST' }, true);
}

function invite(id) {
  return (0, _http.fetchJSON)('/masa/' + id + '/invite', { method: 'POST' }, true);
}

function withdraw(id) {
  return (0, _http.fetchJSON)('/masa/' + id + '/withdraw', { method: 'POST' }, true);
}

// import { request } from '../../http';

// export function currentMasas() {
//   return request('/masa', {}, true);
// }

// export function masa(id) {
//   return request('/masa/' + id, { data: {socketVersion: 1}}, true);
// }

// export function reload(id) {
//   return request('/masa/' + id,
//                  {
//                    method: 'GET',
//                    data: {},
//                    background: true
//                  });
// }

// export function join(id, side) {
//   side = side ? `?side=${side}`: '';
//   return request('/masa/' + id + '/join' + side, { method: 'POST' }, true);
// }

// export function withdraw(id) {
//   return request('/masa/' + id + '/withdraw', { method: 'POST' }, true);
// }

},{"../../http":137}],171:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderMasasList = renderMasasList;
exports.renderMasaList = renderMasaList;
exports.renderFooter = renderFooter;

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _router = require('../../router');

var _router2 = _interopRequireDefault(_router);

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _utils = require('../../utils');

var _newGameForm = require('../newGameForm');

var _newGameForm2 = _interopRequireDefault(_newGameForm);

var _TabNavigation = require('../shared/TabNavigation');

var _TabNavigation2 = _interopRequireDefault(_TabNavigation);

var _TabView = require('../shared/TabView');

var _TabView2 = _interopRequireDefault(_TabView);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TABS = [{
  label: 'Açık'
}, {
  label: 'Oynanan'
}, {
  label: 'Biten'
}];

function onMasaTap(e) {
  var el = helper.getLI(e);
  var ds = el.dataset;
  if (el && ds.id) {
    _router2.default.set('/masa/' + ds.id);
  }
}

function renderMasasList(ctrl) {
  if (!ctrl.masas) return null;

  var tabsContent = [ctrl.masas['created'], ctrl.masas['started'], ctrl.masas['finished']];

  return [(0, _hyperscript2.default)('div.tabs-nav-header.subHeader', (0, _hyperscript2.default)(_TabNavigation2.default, {
    buttons: TABS,
    selectedIndex: ctrl.currentTab,
    onTabChange: ctrl.onTabChange
  }), (0, _hyperscript2.default)('div.main_header_drop_shadow')), (0, _hyperscript2.default)(_TabView2.default, {
    className: 'masaTabsWrapper',
    selectedIndex: ctrl.currentTab,
    content: tabsContent,
    renderer: renderMasaList,
    onTabChange: ctrl.onTabChange
  })];
}

function renderMasaList(list) {
  return (0, _hyperscript2.default)('ul.native_scroller.masaList', {
    oncreate: helper.ontapXY(onMasaTap, undefined, helper.getLI)
  }, list.map(renderMasaListItem));
}

function renderMasaListItem(masa, index) {
  var mode = masa.rated ? (0, _i18n2.default)('rated') : (0, _i18n2.default)('casual');
  var variant = (0, _utils.capitalize)(masa.variant.short);
  var evenOrOdd = index % 2 === 0 ? ' even ' : ' odd ';
  var scores = masa.scores;
  var rounds = masa.rounds;

  return (0, _hyperscript2.default)(
    'li',
    { key: masa.id,
      className: 'list_item masa_item' + evenOrOdd,
      'data-id': masa.id
    },
    (0, _hyperscript2.default)(
      'div',
      { className: 'masaListName' },
      (0, _hyperscript2.default)(
        'div',
        { className: 'fullName' },
        masa.fullName
      ),
      (0, _hyperscript2.default)(
        'small',
        { className: 'infos' },
        variant,
        ' ',
        mode,
        ' \u2022 ',
        scores ? scores + ' ' + (0, _i18n2.default)('points') : (0, _i18n2.default)('rounds', rounds)
      )
    ),
    (0, _hyperscript2.default)(
      'div',
      { className: 'masaListTime' },
      (0, _hyperscript2.default)(
        'small',
        { className: 'nbUsers withIcon', 'data-icon': 'r' },
        masa.nbPlayers
      )
    )
  );
}

function renderFooter(ctrl) {
  return (0, _hyperscript2.default)(
    'div',
    { className: 'actions_bar' },
    (0, _hyperscript2.default)(
      'button',
      { key: 'createMasa', className: 'action_create_button', oncreate: helper.ontap(_newGameForm2.default.openRealtime) },
      (0, _hyperscript2.default)('span', { className: 'fa fa-plus-circle' }),
      (0, _i18n2.default)('createANewMasa')
    ),
    (0, _hyperscript2.default)(
      'button',
      { key: 'refreshMasa', className: 'action_refresh_button',
        oncreate: helper.ontap(ctrl.refresh) },
      (0, _hyperscript2.default)('span', { className: 'fa fa-refresh' }),
      (0, _i18n2.default)('refresh')
    )
  );
}

},{"../../i18n":138,"../../router":145,"../../utils":210,"../helper":157,"../newGameForm":174,"../shared/TabNavigation":183,"../shared/TabView":184,"mithril/hyperscript":113}],172:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backdropCloseHandler = exports.mainMenuCtrl = exports.profileMenuOpen = undefined;
exports.route = route;
exports.popup = popup;

var _stream = require('mithril/stream');

var _stream2 = _interopRequireDefault(_stream);

var _zanimo = require('zanimo');

var _zanimo2 = _interopRequireDefault(_zanimo);

var _backbutton = require('../../backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _router = require('../../router');

var _router2 = _interopRequireDefault(_router);

var _redraw = require('../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

var _SideMenuCtrl = require('../shared/sideMenu/SideMenuCtrl');

var _SideMenuCtrl2 = _interopRequireDefault(_SideMenuCtrl);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var profileMenuOpen = exports.profileMenuOpen = (0, _stream2.default)(false);

function onMenuOpen() {}

function onMenuClose() {}

var mainMenuCtrl = exports.mainMenuCtrl = new _SideMenuCtrl2.default('left', 'side_menu', 'menu-close-overlay', onMenuOpen, onMenuClose);

function route(route) {
  return function () {
    return mainMenuCtrl.close().then(function () {
      return _router2.default.set(route);
    });
  };
}

function popup(action) {
  return function () {
    return mainMenuCtrl.close().then(function () {
      action();
      (0, _redraw2.default)();
    });
  };
}

var backdropCloseHandler = exports.backdropCloseHandler = (0, _helper.ontap)(function () {
  mainMenuCtrl.close();
});

var menu = {};

/* properties */
menu.isOpen = false;
// menu.headerOpen = m.prop(false);

menu.route = function (route) {
  return function () {
    return menu.close().then(_mithril2.default.route.bind(null, route));
  };
};

menu.popup = function (action) {
  return function () {
    return menu.close().then(function () {
      action();
      _mithril2.default.redraw();
    });
  };
};

menu.toggle = function () {
  if (menu.isOpen) menu.close();else menu.open();
};

menu.open = function () {
  _backbutton2.default.stack.push(menu.close);
  menu.isOpen = true;
};

menu.willClose = false;
menu.close = function (fromBB) {
  var sideMenu = document.getElementById('side_menu');

  if (menu.willClose || !sideMenu) return Promise.resolve(null);

  menu.willClose = true;
  if (fromBB !== 'backbutton' && menu.isOpen) _backbutton2.default.stack.pop();
  _mithril2.default.redraw.strategy('none');
  return (0, _zanimo2.default)(sideMenu, 'transform', 'translate3d(-100%,0,0', 250, 'ease-out').then(function () {
    menu.headerOpen(false);
    menu.isOpen = false;
    menu.willClose = false;
    _mithril2.default.redraw();
  }).catch(function (err) {
    console.error(err);
    menu.headerOpen(false);
    menu.isOpen = false;
    menu.willClose = false;
    _mithril2.default.redraw();
  });
};

menu.toggleHeader = function () {
  return menu.headerOpen() ? menu.headerOpen(false) : menu.headerOpen(true);
};

exports.default = menu;

},{"../../backbutton":135,"../../router":145,"../../utils/redraw":212,"../helper":157,"../shared/sideMenu/SideMenuCtrl":200,"mithril":114,"mithril/stream":121,"zanimo":131}],173:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _session = require('../../session');

var _session2 = _interopRequireDefault(_session);

var _loginModal = require('../loginModal');

var _loginModal2 = _interopRequireDefault(_loginModal);

var _newGameForm = require('../newGameForm');

var _newGameForm2 = _interopRequireDefault(_newGameForm);

var _utils = require('../../utils');

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _zanimo = require('zanimo');

var _zanimo2 = _interopRequireDefault(_zanimo);

var _ = require('.');

var menu = _interopRequireWildcard(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  onbeforeupdate: function onbeforeupdate() {
    return menu.mainMenuCtrl.isOpen;
  },
  view: function view() {
    var user = _session2.default.get();

    return h(
      'aside',
      { id: 'side_menu' },
      renderHeader(user),
      h(
        'div',
        { className: 'native_scroller side_menu_scroller' },
        user && menu.profileMenuOpen() ? renderProfileActions(user) : renderLinks(user)
      )
    );
  }
};


function renderHeader(user) {
  var profileLink = user ? menu.route('/@/' + user.id) : _utils.noop;

  return h(
    'header',
    { className: 'side_menu_header' },
    (0, _utils.hasNetwork)() && !user ? h(
      'button',
      { className: 'signInButton', oncreate: helper.ontapXY(_loginModal2.default.open) },
      (0, _i18n2.default)('signIn')
    ) : null,
    user ? h(
      'h2',
      { className: 'username', oncreate: helper.ontapXY(profileLink) },
      user.username
    ) : null
  );
}

function slidesInUp(el, isUpdate, context) {
  if (!isUpdate) {
    el.style.transform = 'translate3d(-100%, 0, 0)';
    // force reflow back
    context.lol = el.offsetHeight;
    (0, _zanimo2.default)(el, 'transform', 'translate3d(0,0,0)', 250, 'ease-out');
  }
}

function renderLinks(user) {

  return h(
    'ul',
    { className: 'side_links',
      oncreate: helper.ontapXY(onLinkTap, undefined, helper.getLI) },
    h(
      'li',
      { className: 'side_link', 'data-route': '/' },
      h('span', { className: 'fa fa-home' }),
      (0, _i18n2.default)('home')
    ),
    (0, _utils.hasNetwork)() ? h(
      'li',
      { className: 'sep_link', key: 'sep_link_online' },
      (0, _i18n2.default)('playOnline')
    ) : null,
    (0, _utils.hasNetwork)() ? h(
      'li',
      { className: 'side_link', 'data-popup': 'createAGame' },
      h('span', { className: 'fa fa-plus-circle' }),
      (0, _i18n2.default)('createAGame')
    ) : null,
    (0, _utils.hasNetwork)() ? h(
      'li',
      { className: 'side_link', 'data-route': '/masas' },
      h('span', { className: 'fa fa-trophy' }),
      (0, _i18n2.default)('masas')
    ) : null,
    (0, _utils.hasNetwork)() ? h(
      'li',
      { className: 'side_link', 'data-route': '/todo' },
      h('span', { className: 'fa fa-at' }),
      (0, _i18n2.default)('players')
    ) : null,
    (0, _utils.hasNetwork)() ? h(
      'li',
      { className: 'side_link', 'data-route': '/todo' },
      h('span', { className: 'fa fa-cubes' }),
      (0, _i18n2.default)('leaderboard')
    ) : null,
    h('li', { className: 'hr' }),
    h(
      'li',
      { className: 'side_link', 'data-route': '/settings' },
      h('span', { className: 'fa fa-cog' }),
      (0, _i18n2.default)('settings')
    ),
    h(
      'li',
      { className: 'side_link', oncreate: helper.ontapXY(function () {
          _session2.default.logout();
          // menu.mainMenuCtrl.close(false);
        }) },
      h('span', { 'data-icon': 'w' }),
      (0, _i18n2.default)('logOut')
    )
  );
}

function renderProfileActions(user) {
  return h(
    'ul',
    { className: 'side_links profileActions' },
    h(
      'li',
      { className: 'side_link', config: helper.ontouch(menu.route('/@/' + user.id)) },
      h('span', { 'data-icon': 'r' }),
      (0, _i18n2.default)('profile')
    ),
    h(
      'li',
      { className: 'side_link', config: helper.ontouch(menu.route('/settings/preferences')) },
      h('span', { 'data-icon': '%' }),
      (0, _i18n2.default)('preferences')
    ),
    h(
      'li',
      { className: 'side_link', config: helper.ontouch(function () {
          _session2.default.logout();
          menu.headerOpen(false);
        }) },
      h('span', { 'data-icon': 'w' }),
      (0, _i18n2.default)('logOut')
    )
  );
}

var popupActionMap = {
  'createAGame': function createAGame() {
    return _newGameForm2.default.openRealtime();
  }
};

function onLinkTap(e) {
  var el = helper.getLI(e);
  var ds = el.dataset;
  if (el && ds.route) {
    menu.route(ds.route)();
  } else if (el && ds.popup) {
    menu.popup(popupActionMap[ds.popup])();
  }
}

// OLD

function renderProfileActionsOLD(user) {
  return h(
    'ul',
    { className: 'side_links profileActions' },
    h(
      'li',
      { className: 'side_link', config: helper.ontapXY(menu.route('/@/' + user.id)) },
      h('span', { className: 'fa fa-user' }),
      (0, _i18n2.default)('profile')
    ),
    h(
      'li',
      { className: 'side_link', config: helper.ontapXY(menu.route('/settings/preferences')) },
      h('span', { 'data-icon': '%' }),
      (0, _i18n2.default)('preferences')
    ),
    h(
      'li',
      { className: 'side_link', config: helper.ontapXY(function () {
          _session2.default.logout();
          menu.profileMenuOpen(false);
        }) },
      h('span', { 'data-icon': 'w' }),
      (0, _i18n2.default)('logOut')
    )
  );
}

function renderMenu() {
  var user = _session2.default.get();
  return h(
    'div',
    { className: 'native_scroller' },
    renderHeader(user),
    user && menu.headerOpen() ? renderProfileActions(user) : renderLinks(user)
  );
}

},{".":172,"../../i18n":138,"../../session":147,"../../utils":210,"../helper":157,"../loginModal":162,"../newGameForm":174,"mithril/hyperscript":113,"zanimo":131}],174:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderQuickSetup = renderQuickSetup;

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _helper = require('./helper');

var helper = _interopRequireWildcard(_helper);

var _setup = require('../oyunkeyf/setup');

var _popup = require('./shared/popup');

var _popup2 = _interopRequireDefault(_popup);

var _form = require('./shared/form');

var _form2 = _interopRequireDefault(_form);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _router = require('../router');

var _router2 = _interopRequireDefault(_router);

var _settings = require('../settings');

var _settings2 = _interopRequireDefault(_settings);

var _session = require('../session');

var _session2 = _interopRequireDefault(_session);

var _backbutton = require('../backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _xhr = require('../xhr');

var xhr = _interopRequireWildcard(_xhr);

var _lobby = require('./lobby');

var _lobby2 = _interopRequireDefault(_lobby);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isOpen = false;

var humanSetup = _settings2.default.gameSetup.human;

exports.default = {
  open: open,
  close: close,
  openRealtime: function openRealtime() {
    open();
  },
  view: function view() {
    return (0, _popup2.default)('new_game_form_popup game_form_popup', undefined, renderContent, isOpen, close);
  }
};


function open() {
  _router2.default.backbutton.stack.push(close);
  isOpen = true;
}

function close(fromBB) {
  if (fromBB !== 'backbutton' && isOpen) _router2.default.backbutton.stack.pop();
  isOpen = false;
}

function renderContent() {
  var conf = humanSetup;

  return (0, _hyperscript2.default)('div', [(0, _hyperscript2.default)('div.newGame-preset_switch', [renderCustomSetup('human', conf, conf.availableVariants)])]);
}

function renderCustomSetup(formName, settingsObj, variants) {
  var generalFieldset = [(0, _hyperscript2.default)('div.select_input', {
    key: formName + 'variant'
  }, _form2.default.renderSelect('variant', formName + 'variant', variants, settingsObj.variant))];

  var modes = [['casual', '0'], ['rated', '1']];

  generalFieldset.push((0, _hyperscript2.default)('div.select_input', {
    key: formName + 'mode'
  }, _form2.default.renderSelect('mode', formName + 'mode', modes, settingsObj.mode)));

  var timeFieldset = [];

  timeFieldset.push((0, _hyperscript2.default)('div.select_input.inline', {
    key: formName + 'round'
  }, _form2.default.renderSelect('rounds', formName + 'rounds', _settings2.default.gameSetup.availableRounds, settingsObj.rounds, false)));

  return (0, _hyperscript2.default)('form.game_form', {
    key: 'customSetup',
    onsubmit: function onsubmit(e) {
      e.preventDefault();
      close();
      goSeek((0, _setup.humanSetupFromSettings)(settingsObj));
    }
  }, [(0, _hyperscript2.default)('fieldset', generalFieldset), (0, _hyperscript2.default)('fieldset', timeFieldset), (0, _hyperscript2.default)('div.popupActionWrapper', [(0, _hyperscript2.default)('button[data-icon=E][type=submit].popupAction', (0, _i18n2.default)('createAGame'))])]);
}

function renderQuickSetup(onCustom) {
  return (0, _hyperscript2.default)('div.newGame-pools', { key: 'quickSetup' }, (0, _hyperscript2.default)('div.newGame-pool', {
    key: 'pool-custom',
    oncreate: helper.ontap(onCustom)
  }, (0, _hyperscript2.default)('div.newGame-custom', 'Özel')));
}

function goSeek(conf) {
  close();

  _lobby2.default.startSeeking(conf);
}

// export function renderQuickSetup() {
//   return h('div.newGame-pools', { key: 'quickSetup' },
//            xhr.cachedPools.map(p => renderPool(p))
//           );
// }

// function renderPool(p) {
//   return h('div.newGame-pool', {
//     key: 'pool-' + p.id,
//     oncreate: helper.ontap(() => {
//       console.log('oncreate');
//     })
//   }, [h('div.newGame-rounds', p.id),
//       h('div.newGame-perf', p.perf)
//      ]);
// }

// const newGameForm = {};

// newGameForm.isOpen = false;

// newGameForm.open = function() {
//   backbutton.stack.push(newGameForm.close);
//   newGameForm.isOpen = true;
// };

// newGameForm.close = function(fromBB) {
//   if (fromBB !== 'backbutton' && newGameForm.isOpen) backbutton.stack.pop();
//   newGameForm.isOpen = false;
// };

// newGameForm.openRealtime = function() {
//   newGameForm.open();
// };

// function seekHumanGame() {
//   newGameForm.close();
//   lobby.startSeeking();
// }

// function renderForm(formName, action, settingsObj, variants) {
//   var generalFieldset = [
//     m('div.select_input', {
//       key: formName + 'variant'
//     }, [
//       formWidgets.renderSelect('variant', formName + ' variant', variants, settingsObj.variant)
//     ])
//   ];


//   // Human only
//   if (settingsObj.mode) {
//     var modes = (session.isConnected()) ? [
//       ['casual', '0'],
//       ['rated', '1']
//     ] : [ ['casual', '0'] ];

//     generalFieldset.push(m('div.select_input', {
//       key: formName + 'mode'
//     }, [
//       formWidgets.renderSelect('mode', formName + 'mode', modes, settingsObj.mode)
//     ]));

//     if (session.isConnected() && settingsObj.mode() === '0') {
//       generalFieldset.push(
//         formWidgets.renderCheckbox(i18n('membersOnly'), 'membersOnly', settingsObj.membersOnly));
//     }
//   }

//   // both human
//   var roundFieldset = [
//     // m('div.select_input', {
//     //   key: formName + 'rounds'
//     // }, [
//     //   formWidgets.renderSelect('round', formName + 'rounds', roundModes, settingsObj.roundMode)
//     // ])
//   ];

//   if (true) {
//     roundFieldset.push(
//       m('div.select_input', {
//         key: formName + 'rounds'
//       }, [
//         formWidgets.renderSelect('rounds', formName + 'round',
//                                  settings.gameSetup.availableRounds, settingsObj.rounds, false)
//       ])
//     );
//   }

//   return m('form#new_game_form.game_form', {
//     onsubmit: function(e) {
//       e.preventDefault();
//       if (!settings.gameSetup.isRoundValid(settingsObj)) return;
//       newGameForm.close();
//       action();
//     }
//   }, [
//     m('fieldset', [
//     ]),
//     m('fieldset', generalFieldset),
//     m('fieldset#round', roundFieldset),
//     m('button[data-icon=E][type=submit].newGameButton', i18n('createAGame'))
//   ]);
// }

// newGameForm.view = function() {
//   function form() {
//     return renderForm(
//       'human',
//       seekHumanGame,
//       settings.gameSetup.human,
//       settings.gameSetup.human.availableVariants);
// };

//   return popupWidget(
//     'new_game_form_popup game_form_popup',
//     null,
//     form,
//     newGameForm.isOpen,
//     newGameForm.close
//   );
// };

// export default newGameForm;

},{"../backbutton":135,"../i18n":138,"../oyunkeyf/setup":142,"../router":145,"../session":147,"../settings":148,"../xhr":215,"./helper":157,"./lobby":161,"./shared/form":187,"./shared/popup":191,"mithril":114,"mithril/hyperscript":113}],175:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _playersCtrl = require('./playersCtrl');

var _playersCtrl2 = _interopRequireDefault(_playersCtrl);

var _playersView = require('./playersView');

var _playersView2 = _interopRequireDefault(_playersView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  controller: _playersCtrl2.default,
  view: _playersView2.default
};

},{"./playersCtrl":177,"./playersView":178}],176:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onlinePlayers = onlinePlayers;

var _http = require('../../http');

function onlinePlayers() {
  return (0, _http.request)('/player/online', {}, true);
}

},{"../../http":137}],177:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = controller;

var _socket = require('../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _playerXhr = require('./playerXhr');

var xhr = _interopRequireWildcard(_playerXhr);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function controller() {
  _socket2.default.createDefault();

  var players = _mithril2.default.prop([]);

  xhr.onlinePlayers().then(players, function (err) {
    return utils.handleXhrError(err);
  });

  return {
    players: players,
    goToProfile: function goToProfile(u) {
      _mithril2.default.route('/@/' + u);
    },

    onunload: function onunload() {}
  };
}

},{"../../socket":150,"../../utils":210,"./playerXhr":176,"mithril":114}],178:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

exports.default = view;

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _helper = require('../helper');

var _helper2 = _interopRequireDefault(_helper);

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _common = require('../shared/common');

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function view(ctrl) {

  var headerCtrl = header.bind(null, ctrl);
  var bodyCtrl = body.bind(null, ctrl);

  return _layout2.default.free(headerCtrl, bodyCtrl, null);
}

function header(ctrl) {
  return (0, _helper2.default)(
    'nav',
    null,
    (0, _common.menuButton)(),
    (0, _helper2.default)(
      'h1',
      null,
      (0, _i18n2.default)('players')
    ),
    (0, _helper2.default)(
      'div',
      { className: 'buttons' },
      (0, _helper2.default)('button', { className: 'main_header_button', key: 'searchPlayers', 'data-icon': 'y' })
    )
  );
}

function body(ctrl) {
  return (0, _helper2.default)(
    'ul',
    { className: 'playersSuggestion native_scroller_page' },
    ctrl.players().map(renderPlayer)
  );
}

function renderPlayer(user) {
  // find best perf
  var perf = Object.keys(user.perfs).reduce(function (prev, curr) {
    if (!prev) return curr;
    if (user.perfs[prev].rating < user.perfs[curr].rating) return curr;else return prev;
  });

  return (0, _helper2.default)(
    'li',
    { className: 'list_item playerSuggestion nav', config: _helper2.default.ontouchY(function () {
        return _mithril2.default.route('/@/' + user.id);
      }) },
    (0, _common.userStatus)(user),
    (0, _helper2.default)(
      'span',
      { className: 'rating', 'data-icon': utils.gameIcon(perf) },
      user.perfs[perf].rating
    )
  );
}

},{"../../i18n":138,"../../utils":210,"../helper":157,"../layout":160,"../shared/common":186,"mithril":114,"mithril/hyperscript":113}],179:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _helper = require('../helper');

var _helper2 = _interopRequireDefault(_helper);

var _common = require('../shared/common');

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _form = require('../shared/form');

var _form2 = _interopRequireDefault(_form);

var _settings = require('../../settings');

var _settings2 = _interopRequireDefault(_settings);

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _socket = require('../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
  controller: function controller() {
    _socket2.default.createDefault();
  },
  view: function view() {
    var header = utils.partialf(_common.header, null, (0, _common.backButton)((0, _i18n2.default)('settings')));

    return _layout2.default.free(header, renderBody);
  }
};


function renderBody() {
  return (0, _mithril2.default)('div', {
    style: { width: '100%', height: '100%' }
  }, [(0, _mithril2.default)('ul.settings_list.general.native_scroller.page', [(0, _mithril2.default)('li.list_item.nav', {
    key: 'lang',
    config: _helper2.default.ontouchY(utils.f(_mithril2.default.route, '/settings/lang'))
  }, (0, _i18n2.default)('language')), (0, _mithril2.default)('li.list_item.settingsChoicesInline', {
    key: 'backgroundTheme'
  }, [(0, _mithril2.default)('label', (0, _i18n2.default)('background')), (0, _mithril2.default)('fieldset', [(0, _mithril2.default)('div.nice-radio', _form2.default.renderRadio((0, _i18n2.default)('dark'), 'bgTheme', 'dark', _settings2.default.general.theme.background() === 'dark', function (e) {
    _settings2.default.general.theme.background(e.target.value);
    _layout2.default.onBackgroundChange(e.target.value);
  })), (0, _mithril2.default)('div.nice-radio', _form2.default.renderRadio((0, _i18n2.default)('light'), 'bgTheme', 'light', _settings2.default.general.theme.background() === 'light', function (e) {
    _settings2.default.general.theme.background(e.target.value);
    _layout2.default.onBackgroundChange(e.target.value);
  }))])])]), window.oyunkeyf.version ? (0, _mithril2.default)('section.app_version', 'v' + window.oyunkeyf.version) : null]);
}

},{"../../i18n":138,"../../settings":148,"../../socket":150,"../../utils":210,"../helper":157,"../layout":160,"../shared/common":186,"../shared/form":187,"mithril":114}],180:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _common = require('../shared/common');

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _form = require('../shared/form');

var _form2 = _interopRequireDefault(_form);

var _settings = require('../../settings');

var _settings2 = _interopRequireDefault(_settings);

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _xhr = require('../../xhr');

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
  controller: function controller() {
    var langs = _mithril2.default.prop([]);
    (0, _i18n.getAvailableLanguages)().then(langs);

    return {
      langs: langs
    };
  },
  view: function view(ctrl) {
    var header = utils.partialf(_common.header, null, (0, _common.backButton)((0, _i18n2.default)('language')));

    function renderLang(l) {
      return h(
        'li',
        { className: 'list_item' },
        _form2.default.renderRadio(l[1], 'lang', l[0], _settings2.default.general.lang() === l[0], function (e) {
          _settings2.default.general.lang(e.target.value);
          (0, _xhr.setServerLang)(e.target.value);
          (0, _i18n.loadFromSettings)();
        })
      );
    }

    function renderBody() {
      return h(
        'ul',
        { className: 'native_scroller page settings_list radio_list' },
        ctrl.langs().map(function (l) {
          return renderLang(l);
        })
      );
    }
    return _layout2.default.free(header, renderBody);
  }
};

},{"../../i18n":138,"../../settings":148,"../../utils":210,"../../xhr":215,"../layout":160,"../shared/common":186,"../shared/form":187,"mithril":114,"mithril/hyperscript":113}],181:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _settings = require('../../settings');

var _settings2 = _interopRequireDefault(_settings);

var _redraw = require('../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oninit: function oninit(vnode) {
    var okeyground = vnode.attrs.okeyground;


    this.wrapperOnCreate = function (_ref) {
      var dom = _ref.dom;
    };

    this.boardOnCreate = function (_ref2) {
      var dom = _ref2.dom;

      okeyground.attach(dom);
    };

    this.boardOnRemove = function () {
      okeyground.detach();
    };
  },
  view: function view(vnode) {
    var bounds = vnode.attrs.bounds;


    var boardClass = ['display_board'].join(' ');

    var wrapperClass = 'game_board_wrapper';

    var wrapperStyle = bounds ? {
      height: bounds.height + 'px',
      width: bounds.width + 'px'
    } : {};

    return h(
      'section',
      { oncreate: this.wrapperOnCreate, className: wrapperClass, style: wrapperStyle },
      h('div', { className: boardClass,
        oncreate: this.boardOnCreate,
        onremove: this.boardOnRemove })
    );
  }
};

// function renderTopMenu() {
//   return (
//     <div class="display_menu">
//       {menuButton()}
//     </div>
//   );
// }

// function renderPlayerInfo(ctrl, player, position) {
//   const wrapperClass = helper.classSet({
//     'playerInfos': true,
//   }) + ` ${position}`;

//   const playerName = player.ai ?
//                      i18n('aiBot', player.ai) :
//                      utils.playerName(player);
//   const playerOnGame = (player.onGame || player.ai ?
//                         <span className="ongame yes" data-icon="3"/> :
//                         <span className="ongame no" data-icon="0"/>
//   );

//   const togglePopup = ctrl.toggleUserPopup.bind(ctrl, position, player.user);
//   const vConf = helper.ontouch(togglePopup);

//   const runningSide = ctrl.isClockRunning() ? ctrl.data.game.player : null;
//   const running = ctrl.data.game.player === player.side;

//   const opens = ctrl.data.game.oscores ? ctrl.data.game.oscores[player.side] : null;
//   const opensHint = opens ? (opens.series ? 'openedSeries' : 'openedPairs') : null;
//   const opensClass = "opens" + ((opens && opens.new) ? " new" : "");

//   return (
//     <div className={wrapperClass} config={vConf}>
//       <div class="wrap_info">
//         {opens ?
//          <div class={opensClass}>
//            {(opens.series ? opens.series : opens.pairs)}
//            {' '}
//            {i18n(opensHint).split(' ')[0]}
//          </div>: null
//         }
//       </div>
//       <div class="wrap_user">
//         <h2 className="playerUser">
//           {playerName}
//           {playerOnGame}
//         </h2>
//         { (ctrl.clock && running) ?
//           renderClock(ctrl.clock, player.side, runningSide, position) : null
//         }
//       </div>
//     </div>
//   );
// }

// export default function(
//   ctrl,
//   okeygroundCtrl,
//   bounds,
//   isPortrait,
//   wrapperClasses) {
//     const data = ctrl.data;

//     const boardClass = [
//       'display_board',
//     ].join(' ');

//     const key = 'board' + (isPortrait ? 'portrait' : 'landscape');
//     let wrapperClass = 'game_board_wrapper';

//     if (wrapperClasses) {
//       wrapperClass += ' ' + wrapperClasses;
//     }

//     const wrapperStyle = bounds ? {
//       height: bounds.height + 'px',
//       width: bounds.width + 'px'
//     } : {};


//     function wrapperConfig(el, isUpdate) {
//       if (!isUpdate) {
//       }
//     }

//     function boardConfig(el, isUpdate) {
//       if (!isUpdate) {
//         if (!bounds) {
//         }
//         okeyground.render(el, okeygroundCtrl);
//       }
//     }

//     okeygroundCtrl.data.topHooks = [
//       // renderTopMenu(),
//       renderPlayerInfo(ctrl, data.opponentUp, 'top'),
//       renderPlayerInfo(ctrl, data.opponentLeft, 'left'),
//       renderPlayerInfo(ctrl, data.player, 'bottom'),
//       renderPlayerInfo(ctrl, data.opponentRight, 'right')
//     ];


//     return (
//       <section className={wrapperClass} config={wrapperConfig}
//                style={wrapperStyle} key={key}>
//         <div className={boardClass} config={boardConfig} />
//       </section>
//     );
// }

},{"../../settings":148,"../../utils/redraw":212,"mithril/hyperscript":113}],182:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  view: function view(_ref) {
    var attrs = _ref.attrs;


    var title = 'gameApi.title(data)';

    return (0, _hyperscript2.default)('div.main_header_title', {}, [(0, _hyperscript2.default)('h1.header-gameTitle', [(0, _hyperscript2.default)('span', title)])]);
  }
};

},{"mithril/hyperscript":113}],183:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
  oninit: function oninit(_ref) {
    var attrs = _ref.attrs;

    this.onTap = function (e) {
      var el = helper.getButton(e);
      var i = void 0;
      if (el && (i = el.dataset.index)) {
        attrs.onTabChange(Number(i));
      }
    };
  },
  view: function view(vnode) {
    var _vnode$attrs = vnode.attrs,
        buttons = _vnode$attrs.buttons,
        selectedIndex = _vnode$attrs.selectedIndex,
        noIndicator = _vnode$attrs.noIndicator,
        wrapperClass = _vnode$attrs.wrapperClass;


    var iWidth = 100 / buttons.length;
    var shift = selectedIndex * (iWidth * buttons.length);

    var indicatorStyle = {
      width: iWidth + '%',
      transform: 'translateX(' + shift + '%)'
    };

    var buttonStyle = {
      width: iWidth + '%'
    };

    function renderTab(b, i) {
      var className = ['tab-button', selectedIndex === i ? 'selected' : '', b.className].join(' ');
      return h(
        'button',
        { 'data-index': i, className: className, style: buttonStyle },
        b.label,
        b.chip !== undefined ? h(
          'span',
          { className: 'chip' },
          b.chip
        ) : null
      );
    }
    return h(
      'div',
      { className: 'tabs-navigation' + (wrapperClass ? ' ' + wrapperClass : ''),
        oncreate: helper.ontap(this.onTap) },
      buttons.map(renderTab),
      noIndicator ? null : h('div', { className: 'tabIndicator', style: 'indicatorStyle' })
    );
  }
};

},{"../helper":157,"mithril/hyperscript":113}],184:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oncreate: function oncreate(_ref) {
    var attrs = _ref.attrs,
        dom = _ref.dom;
  },
  view: function view(_ref2) {
    var attrs = _ref2.attrs;

    var curIndex = attrs.selectedIndex;
    var vw = (0, _helper.viewportDim)().vw;
    var width = attrs.content.length * 100;
    var shift = -(curIndex * vw);

    var style = {
      width: width + 'vw',
      transform: 'translateX(' + shift + 'px)'
    };

    return (0, _hyperscript2.default)('div.tabs-view-wrapper', (0, _hyperscript2.default)('div.tabs-view', {
      style: style,
      className: attrs.className
    }, attrs.content.map(function (_, index) {
      return (0, _hyperscript2.default)('div.tab-content', {
        'data-index': index,
        className: curIndex === index ? 'current' : ''
      }, curIndex === index ? (0, _hyperscript2.default)(Tab, _extends({ index: index }, attrs)) : null);
    })));
  }
};


var Tab = {
  onbeforeupdate: function onbeforeupdate(_ref3, _ref4) {
    var attrs = _ref3.attrs;
    var oldattrs = _ref4.attrs;

    return attrs.content[attrs.index] !== oldattrs.content[oldattrs.index];
  },
  view: function view(_ref5) {
    var attrs = _ref5.attrs;

    return attrs.renderer(attrs.content[attrs.index], attrs.index);
  }
};

},{"../helper":157,"mithril/hyperscript":113}],185:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _okeygroundMobile = require('okeyground-mobile');

var _okeygroundMobile2 = _interopRequireDefault(_okeygroundMobile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  view: function view(_, args) {
    var boardClass = ['display_board', args.variant ? args.variant.key : ''].join(' ');

    function boardConf(el, isUpdate, context) {
      var config = makeConfig(args);
      if (context.ground) {
        context.ground.set(config);
      } else {
        // TODO try to avoid that
        if (!config.bounds) {
          // console.log('no board bounds');
          // config.bounds = el.getBoundingClientRect();
        }
        context.ground = (0, _okeygroundMobile2.default)(el, config);
      }
    }
    return h('div', { className: boardClass, config: boardConf });
  }
};


function makeConfig(args) {
  var fen = args.fen,
      orientation = args.orientation,
      bounds = args.bounds;

  var conf = {
    viewOnly: true,
    minimalDom: true,
    fen: fen
  };

  // if (bounds) conf.bounds = bounds;

  return conf;
}

},{"mithril/hyperscript":113,"okeyground-mobile":1}],186:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

exports.menuButton = menuButton;
exports.headerBtns = headerBtns;
exports.dropShadowHeader = dropShadowHeader;
exports.connectingDropShadowHeader = connectingDropShadowHeader;
exports.backButton = backButton;
exports.gamesButton = gamesButton;
exports.header = header;
exports.viewOnlyBoardContent = viewOnlyBoardContent;
exports.empty = empty;
exports.userStatus = userStatus;

var _menu = require('../menu');

var menu = _interopRequireWildcard(_menu);

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _gamesMenu = require('../gamesMenu');

var _gamesMenu2 = _interopRequireDefault(_gamesMenu);

var _newGameForm = require('../newGameForm');

var _newGameForm2 = _interopRequireDefault(_newGameForm);

var _session = require('../../session');

var _session2 = _interopRequireDefault(_session);

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _router = require('../../router');

var _router2 = _interopRequireDefault(_router);

var _icons = require('./icons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function menuButton() {
  return h('button.fa.fa-navicon.main_header_button.menu_button', {
    key: 'main-menu',
    oncreate: helper.ontap(menu.mainMenuCtrl.toggle)
  });
}

function headerBtns() {

  if (utils.hasNetwork() && _session2.default.isConnected()) {
    return h('div', { key: 'buttons', className: 'buttons' });
  } else {
    return h('div', { key: 'buttons', className: 'buttons' });
  }
}

function dropShadowHeader(title, leftButton) {

  return [h('nav', [leftButton ? leftButton : menuButton(), title ? h(
    'div',
    { className: 'main_header_title', key: 'title' },
    title
  ) : null, headerBtns()]), h('div.main_header_drop_shadow')];
}

function connectingDropShadowHeader(title) {
  return [h('nav', [menuButton(), h('div.main_header_title.reconnecting', {
    className: title ? 'withTitle' : '',
    key: 'connecting-title'
  }), title ? h('div.main_header_title', { key: 'title' }, title) : null, headerBtns()]), h('div.main_header_drop_shadow')];
}

function backButton(title) {
  return h('div.back_button', { key: 'default-history-backbutton' }, [h('button', { oncreate: helper.ontap(_router2.default.backHistory) }, _icons.backArrow), title !== undefined ? typeof title === 'string' ? h('div.main_header_title', title) : title : null]);
}

// export function menuButton() {
//   return (
//       <button key="main-menu" className="fa fa-navicon main_header_button menu_button" config={helper.ontouch(menu.toggle)}>
//     </button>
//   );
// }

// export function backButton(title) {
//   return (
//       <button key="default-history-backbutton" className="back_button main_header_button" config={helper.ontouch(utils.backHistory)}>
//       <span className="fa fa-arrow-left"/>
//       {title ? <div className="title">{title}</div> : null }
//     </button>
//   );
// }

function gamesButton() {
  var key = void 0,
      action = void 0;

  key = 'games-menu';

  if (_session2.default.nowPlaying().length) {
    key = 'games-menu';
    action = _gamesMenu2.default.open;
  } else {
    key = 'new-game-form';
    action = _newGameForm2.default.open;
  }

  var className = ['main_header_button', 'game_menu_button', !utils.hasNetwork() ? 'invisible' : ''].join(' ');

  var longAction = function longAction() {
    return window.plugins.toast.show(i18n('nbGamesInPlay', _session2.default.nowPlaying().length), 'short', 'top');
  };

  return h('button', { key: key, className: className, config: helper.ontouch(action, longAction) });
}

// export function headerBtns() {
//   return (
//     <div key="buttons" className="buttons">
//       {gamesButton()}
//     </div>
//   );
// }

function header(title, leftButton) {
  return h(
    'nav',
    null,
    leftButton ? leftButton : menuButton(),
    title ? h(
      'h1',
      { key: 'title' },
      title
    ) : null,
    headerBtns()
  );
}

function viewOnlyBoardContent() {
  var isPortrait = false;
  var _vw$vh = { vw: 10, vh: 10 },
      vw = _vw$vh.vw,
      vh = _vw$vh.vh;

  var boardStyle = isPortrait ? { width: vw + 'px', height: vw + 'px' } : {};
  var boardKey = 'viewonlyboard';
  var className = 'board_wrapper';
  var board = h(
    'section',
    { key: boardKey, className: className, style: boardStyle },
    m.component(ViewOnlyBoard)
  );
  return [board];
}

function empty() {
  return [];
}

function userStatus(user) {
  var status = user.online ? 'online' : 'offline';
  return h(
    'div',
    { className: 'user' },
    h('span', { className: 'userStatus ' + status, 'data-icon': 'r' }),
    user.username
  );
}

},{"../../router":145,"../../session":147,"../../utils":210,"../gamesMenu":154,"../helper":157,"../menu":172,"../newGameForm":174,"./icons":188,"mithril/hyperscript":113}],187:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _redraw = require('../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  renderSelect: function renderSelect(label, name, options, settingsProp, isDisabled, onChangeCallback) {
    var prop = settingsProp();
    return [(0, _hyperscript2.default)('label', {
      'for': 'select_' + name
    }, (0, _i18n2.default)(label)), (0, _hyperscript2.default)('select', {
      id: 'select_' + name,
      disabled: isDisabled,
      onchange: function onchange(e) {
        var val = e.target.value;
        settingsProp(val);
        if (onChangeCallback) onChangeCallback(val);
        setTimeout(_redraw2.default, 10);
      }
    }, options.map(function (e) {
      return renderOption(e[0], e[1], prop, e[2], e[3]);
    }))];
  }
};


function renderOption(label, value, prop, labelArg, labelArg2) {
  var l = labelArg && labelArg2 ? (0, _i18n2.default)(label, labelArg, labelArg2) : labelArg ? (0, _i18n2.default)(label, labelArg) : (0, _i18n2.default)(label);
  return (0, _hyperscript2.default)('option', {
    key: value,
    value: value,
    selected: prop === value
  }, l);
}

// import i18n from '../../i18n';
// import m from 'mithril';

// function renderOption(label, value, storedValue, labelArg, labelArg2) {
//   return m('option', {
//     value: value,
//     selected: storedValue === value
//   }, i18n(label, labelArg, labelArg2));
// }

// export default {
//   renderRadio: function(label, name, value, checked, onchange) {
//     var id = name + '_' + value;
//     return [
//       m('input.radio[type=radio]', {
//         name,
//         id,
//         className: value,
//         value,
//         checked,
//         onchange
//       }),
//       m('label', {
//         'for': id
//       }, i18n(label))
//     ];
//   },

//   renderSelect: function(label, name, options, settingsProp, isDisabled, onChangeCallback) {
//     var storedValue = settingsProp();
//     return [
//       m('label', {
//         'for': 'select_' + name
//       }, i18n(label)),
//       m('select', {
//         id: 'select_' + name,
//         disabled: isDisabled,
//         config: function(el, isUpdate, context) {
//           if (!isUpdate) {
//             var onChange = function(e) {
//               settingsProp(e.target.value);
//               if (onChangeCallback) onChangeCallback(e.target.value);
//               setTimeout(function() {
//                 m.redraw();
//               }, 10);
//             };
//             el.addEventListener('change', onChange, false);
//             context.onunload = () => {
//               el.removeEventListener('change', onChange, false);
//             };
//           }
//         }
//       }, options.map(function(e) {
//         return renderOption(e[0], e[1], storedValue, e[2], e[3]);
//       }))
//     ];
//   },
//   renderCheckbox: function(label, name, settingsProp, callback, disabled) {
//     var isOn = settingsProp();
//     return m('div.check_container', {
//       className: disabled ? 'disabled': ''
//     }, [
//       m('label', {
//         'for': name
//       }, label),
//       m('input[type=checkbox]', {
//         name: name,
//         disabled,
//         checked: isOn,
//         onchange: function() {
//           const newVal = !isOn;
//           settingsProp(newVal);
//           if (callback) callback(newVal);
//         }
//       })
//     ]);
//   }
// };

},{"../../i18n":138,"../../utils/redraw":212,"../helper":157,"mithril/hyperscript":113}],188:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require("mithril/hyperscript");

var backArrow = exports.backArrow = h(
  "div",
  { className: "svg_icon" },
  h(
    "div",
    { className: "svg_icon_inner" },
    h(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24" },
      h("path", { d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" })
    )
  )
);

var closeIcon = exports.closeIcon = h(
  "div",
  { className: "svg_icon" },
  h(
    "div",
    { className: "svg_icon_inner" },
    h(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24" },
      h("path", { d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" })
    )
  )
);

},{"mithril/hyperscript":113}],189:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oninit: function oninit() {},
  view: function view(_ref) {
    var attrs = _ref.attrs,
        children = _ref.children;
    var header = attrs.header;


    return (0, _hyperscript2.default)('main#page', {}, [
    // h('header.main_header.board', header),
    (0, _hyperscript2.default)('div.content_round', children)]);
  }
};

},{"mithril/hyperscript":113}],190:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (key, name, perf, user) {
  var options = { className: 'profilePerf', 'data-icon': (0, _utils.gameIcon)(key) };

  if (variantPerfAvailable(key, perf)) {
    options.className += ' nav';
    options.config = _helper2.default.ontouchY(goToVariantPerf(user, key));
  }

  return (0, _mithril2.default)('div', options, [(0, _mithril2.default)('span.name', name), (0, _mithril2.default)('div.rating', [perf.rating, _helper2.default.progress(perf.prog), (0, _mithril2.default)('span.nb', '/ ' + perf.games)])]);
};

var _utils = require('../../utils');

var _helper = require('../helper');

var _helper2 = _interopRequireDefault(_helper);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function goToVariantPerf(user, key) {
  return function () {
    return _mithril2.default.route('/@/${user.id}/${key}/perf');
  };
}

function variantPerfAvailable(key, perf) {
  return perf.games > 0;
}

},{"../../utils":210,"../helper":157,"mithril":114}],191:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var h = require('mithril/hyperscript');

exports.default = popup;

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function popup(classes, headerF, contentF, isShowing, closef) {

  if (!isShowing) return null;

  var defaultClasses = {
    overlay_popup: true,
    native_scroller: true
  };

  var className = void 0;

  if ((typeof classes === 'undefined' ? 'undefined' : _typeof(classes)) === 'object') {
    className = helper.classSet(Object.assign({}, defaultClasses, classes));
  } else if (typeof classes === 'string') {
    className = helper.classSet(defaultClasses) + ' ' + classes;
  } else {
    throw new Error('First popup argument must be either a string or an object');
  }

  var contentClass = helper.classSet({
    'popup_content': true,
    'noheader': !headerF
  });

  return h(
    'div',
    { key: String(contentF), className: 'overlay_popup_wrapper fade-in',
      onbeforemove: function onbeforemove(vnode) {
        vnode.dom.classList.add('fading_out');
        return new Promise(function (resolve) {
          setTimeout(resolve, 500);
        });
      } },
    h('div', { className: 'popup_overlay_close',
      oncreate: closef ? helper.ontap(closef) : utils.noop }),
    h(
      'div',
      { className: className },
      headerF ? h(
        'header',
        null,
        headerF()
      ) : null,
      h(
        'div',
        { className: contentClass },
        contentF()
      )
    )
  );
}

// function styleConf(el) {
//   const vh = helper.viewportDim().vh;
//   const h = el.getBoundingClientRect().height;
//   const top = (vh - h) / 2;
//   // el.style.top = top + 'px';
// }

// export default function(classes, headerF, contentF, isShowing, closeF) {
//   if (!isShowing) return null;

//   const defaultClasses = {
//     overlay_popup: true,
//     native_scroller: true
//   };

//   let className;

//   if (typeof classes === 'object') {
//     className = helper.classSet(Object.assign({}, defaultClasses, classes));
//   } else if (typeof classes === 'string') {
//     className = helper.classSet(defaultClasses) + ' ' + classes;
//   } else
//     throw new Error('First popup argument must be either string or an object');

//   return (
//     <div className="overlay_popup_wrapper">
//       <div className="popup_overlay_close"
//            config={closeF ? helper.ontouch(helper.fadesOut(closeF, '.overlay_popup_wrapper')) : utils.noop } />
//       <div className={className} config={styleConf}>
//         {headerF ? <header>{headerF()}</header> : null }
//         <div className="popup_content">
//           {contentF()}
//         </div>
//       </div>
//     </div>
//   );
// }

},{"../../utils":210,"../helper":157,"mithril/hyperscript":113}],192:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnlineRound;

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _okeygroundMobile = require('okeyground-mobile');

var _okeygroundMobile2 = _interopRequireDefault(_okeygroundMobile);

var _router = require('../../../router');

var _router2 = _interopRequireDefault(_router);

var _socket = require('../../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _redraw = require('../../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _ground = require('./ground');

var _ground2 = _interopRequireDefault(_ground);

var _game = require('../../../oyunkeyf/game');

var _game2 = _interopRequireDefault(_game);

var _socketHandler = require('./socketHandler');

var _socketHandler2 = _interopRequireDefault(_socketHandler);

var _ClockCtrl = require('./clock/ClockCtrl');

var _ClockCtrl2 = _interopRequireDefault(_ClockCtrl);

var _roundXhr = require('./roundXhr');

var xhr = _interopRequireWildcard(_roundXhr);

var _masaXhr = require('../../masa/masaXhr');

var masaXhr = _interopRequireWildcard(_masaXhr);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var util = _okeygroundMobile2.default.util;
var wrapGroup = util.wrapGroup,
    wrapPiece = util.wrapPiece,
    wrapDrop = util.wrapDrop,
    partial = util.partial;
function OnlineRound(id, cfg) {
  var _this = this;

  var setData = function setData(cfg) {
    _this.data = cfg;
  };

  var onResume = function onResume() {
    xhr.reload(_this).then(function (data) {
      _socket2.default.setVersion(data.player.version);
      _this.onReload(data);
    });
  };

  this.onMove = function (key, piece) {
    if (key === _okeygroundMobile2.default.move.drawMiddle) {
      _this.sendMove(key);
    }
    if (key === _okeygroundMobile2.default.move.discard) {
      _this.vm.hasPlayedDiscard = true;
    }
  };

  this.onUserMove = function (key, move) {
    // TODO: why?
    if (key === _okeygroundMobile2.default.move.leaveTaken) {
      return;
    }
    _this.sendMove(key, move);
  };

  this.sendMove = function (key) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var move = args;
    args.key = key;

    _socket2.default.send('move', move, {
      ackable: true
    });
  };

  this.apiMove = function (o) {
    var d = _this.data,
        playing = _game2.default.isPlayerPlaying(d);

    d.game.turns = o.ply;
    d.game.player = _game2.default.sideByPly(o.ply);
    d.possibleMoves = d.player.side === d.game.player ? o.dests : [];
    if (true) {
      if (o.isMove) {
        if (o.drawmiddle) {
          _this.okeyground.apiMove(o.key, wrapPiece(o.drawmiddle.piece));
        } else if (o.discard) {
          if (!_this.vm.hasPlayedDiscard) {
            _this.okeyground.apiMove(o.key, wrapPiece(o.discard.piece));
          } else {}
          _this.vm.hasPlayedDiscard = false;
        } else if (o.opens) {
          _this.okeyground.apiMove(o.key, wrapGroup(o.opens.group));
        } else if (o.drop) {
          _this.okeyground.apiMove(o.key, wrapDrop(o.drop.piece, o.drop.pos));
        } else if (o.key === _okeygroundMobile2.default.move.collectOpen) {
          _this.restoreFen(o.fen, _okeygroundMobile2.default.move.collectOpen);
        } else if (o.key === _okeygroundMobile2.default.move.leaveTaken) {
          _this.okeyground.apiMove(o.key, wrapPiece(o.leavetaken.piece));
        } else {
          _this.okeyground.apiMove(o.key);
        }
      }

      _this.okeyground.set({
        turnSide: d.game.player,
        movable: {
          dests: playing ? d.possibleMoves : []
        }
      });
    }

    if (o.clock) {
      var c = o.clock;
      if (_this.clock) _this.clock.setClock(d, o.clock.east, o.clock.west, o.clock.south, o.clock.north);
    }

    document.addEventListener('resume', onResume);

    (0, _redraw2.default)();
  };

  this.outoftime = (0, _throttle2.default)(function () {
    _socket2.default.send('outoftime', _this.data.game.player);
  }, 500);

  this.endWithData = function (scores) {
    xhr.reload(_this).then(_this.onReload);
  };

  this.onReload = function (rCfg) {
    setData(rCfg);

    if (!_game2.default.playable(_this.data)) {
      _this.showActions();
    }
    (0, _redraw2.default)();
  };

  this.showActions = function () {
    _router2.default.backbutton.stack.push(_this.hideActions);
    _this.vm.showingActions = true;
  };

  this.hideActions = function (fromBB) {
    if (fromBB !== 'backbutton' && _this.vm.showingActions) _router2.default.backbutton.stack.pop();
    _this.vm.showingActions = false;
  };

  this.id = id;
  setData(cfg);

  this.vm = {
    scoresheetInfo: {}
  };

  this.okeyground = _ground2.default.make(this.data, this.onUserMove, this.onMove);

  this.clock = this.data.clock ? new _ClockCtrl2.default(this.data, {
    onFlag: this.outoftime
  }) : null;

  if (this.clock) {
    var tickNow = function tickNow() {
      _this.clock && _this.clock.tick();
      if (_game2.default.playable(_this.data)) _this.clockTimeoutId = setTimeout(tickNow, 100);
    };
    this.clockTimeoutId = setTimeout(tickNow, 100);
  }

  _socket2.default.createGame(this.data.url.socket, this.data.player.version, (0, _socketHandler2.default)(this), this.data.url.round);

  this.unload = function () {
    clearTimeout(_this.clockTimeoutId);
    document.removeEventListener('resume', onResume);
  };

  this.resign = function () {
    masaXhr.withdraw(_this.data.game.masaId);
  };

  this.leaveTaken = function () {
    _this.sendMove(_okeygroundMobile2.default.move.leaveTaken);
  };

  this.openSeries = function () {
    _this.okeyground.playOpenSeries();
  };

  this.openPairs = function () {
    _this.okeyground.playOpenPairs();
  };

  this.sortPairs = function () {
    _this.okeyground.sortPairs();
  };

  this.sortSeries = function () {
    _this.okeyground.sortSeries();
  };

  this.leaveTaken = function () {
    _this.sendMove(_okeygroundMobile2.default.move.leaveTaken);
  };

  this.collectOpen = function () {
    _this.sendMove(_okeygroundMobile2.default.move.collectOpen);
  };

  this.restoreFen = function (fen, hint) {
    _this.okeyground.set({
      fen: fen,
      animationHint: hint
    });
  };

  if (!_game2.default.playable(this.data)) {
    this.showActions();
  }
  (0, _redraw2.default)();
}

},{"../../../oyunkeyf/game":140,"../../../router":145,"../../../socket":150,"../../../utils/redraw":212,"../../masa/masaXhr":170,"./clock/ClockCtrl":193,"./ground":195,"./roundXhr":196,"./socketHandler":197,"lodash/throttle":109,"okeyground-mobile":1}],193:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ClockCtrl;

var _game = require('../../../../oyunkeyf/game');

var _game2 = _interopRequireDefault(_game);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ClockCtrl(d, opts) {
  var _this = this;

  this.setClock = function (d, east, west, south, north) {
    var isClockRunning = _game2.default.playable(d) && (d.game.turns >= 4 || d.clock && d.clock.running);

    _this.times = {
      east: east * 1000,
      west: west * 1000,
      north: north * 1000,
      south: south * 1000,
      activeSide: isClockRunning ? d.game.player : undefined,
      lastUpdate: performance.now()
    };
  };

  this.opts = opts;

  var cdata = d.clock;

  this.emergMs = cdata.emerg; // 1000 * Math.min(60, Math.max(10, cdata.emerg * .125));

  this.setClock(d, cdata.sides.east, cdata.sides.west, cdata.sides.south, cdata.sides.north);

  this.elements = {
    east: null,
    west: null,
    south: null,
    north: null
  };

  this.tick = function () {
    var side = _this.times.activeSide;
    if (!side) return;

    var now = performance.now();
    var millis = _this.times[side] - _this.elapsed(now);
    if (millis <= 0) _this.opts.onFlag();else _this.updateElement(side, millis);
  };

  this.updateElement = function (side, millis) {
    var el = _this.elements[side];
    if (el) {
      var width = Math.max(0, Math.min(100, millis / 30000 * 100)) + '%';
      el.style.width = width;
      if (millis < _this.emergMs * 4 * 1000) el.classList.add('emerg');else el.classList.remove('emerg');
    }
  };

  this.elapsed = function () {
    var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();
    return Math.max(0, now - _this.times.lastUpdate);
  };

  this.millisOf = function (side) {
    return _this.times.activeSide === side ? Math.max(0, _this.times[side] - _this.elapsed()) : _this.times[side];
  };

  this.isRunning = function () {
    return _this.times.activeSide !== undefined;
  };
}

},{"../../../../oyunkeyf/game":140}],194:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oninit: function oninit(_ref) {
    var attrs = _ref.attrs;
    var ctrl = attrs.ctrl,
        side = attrs.side;


    this.clockOnCreate = function (_ref2) {
      var dom = _ref2.dom;

      ctrl.elements[side] = dom;
      ctrl.updateElement(side, ctrl.millisOf(side));
    };
    this.clockOnUpdate = function (_ref3) {
      var dom = _ref3.dom;

      ctrl.elements[side] = dom;
      ctrl.updateElement(side, ctrl.millisOf(side));
    };
  },
  view: function view(_ref4) {
    var attrs = _ref4.attrs;


    return (0, _hyperscript2.default)('div', { className: 'bar' }, [(0, _hyperscript2.default)('span', {
      className: 'bar2',
      oncreate: this.clockOnCreate,
      onupdate: this.clockOnUpdate
    })]);
  }
};

},{"mithril/hyperscript":113}],195:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _game = require('../../../oyunkeyf/game');

var _game2 = _interopRequireDefault(_game);

var _okeygroundMobile = require('okeyground-mobile');

var _okeygroundMobile2 = _interopRequireDefault(_okeygroundMobile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeConfig(data) {
  var fen = data.game.fen;

  return {
    fen: fen,
    turnSide: data.game.player,
    povSide: data.player.side,
    spectator: data.player.spectator,
    withTore: !!data.game.variant.key.match(/duzokey/),
    movable: {
      free: false,
      board: _game2.default.isPlayerPlaying(data),
      dests: _game2.default.isPlayerPlaying(data) ? data.possibleMoves : []
    }
  };
}

function make(data, userMove, onMove) {
  var config = makeConfig(data);
  config.movable.events = {
    after: userMove
  };
  config.events = {
    move: onMove
  };

  return new _okeygroundMobile2.default(config);
}

function end(ground) {
  ground.stop();
}

exports.default = {
  make: make,
  end: end
};

},{"../../../oyunkeyf/game":140,"okeyground-mobile":1}],196:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reload = reload;

var _http = require('../../../http');

function reload(ctrl) {
  return (0, _http.fetchJSON)(ctrl.data.url.round);
}

},{"../../../http":137}],197:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ctrl) {
  function reload(o) {}

  var handlers = {
    crowd: function crowd(o) {
      ['east', 'west', 'north', 'south'].forEach(function (side) {
        _game2.default.setOnGame(ctrl.data, side, o[side]);
      });
      (0, _redraw2.default)();
    },
    move: function move(o) {
      o.isMove = true;
      ctrl.apiMove(o);
    },
    end: function end(scores) {
      ctrl.data.game.scores = scores.result;
      _ground2.default.end(ctrl.okeyground);
      ctrl.endWithData(scores);
    }
  };

  return handlers;
};

var _redraw = require('../../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _game = require('../../../oyunkeyf/game');

var _game2 = _interopRequireDefault(_game);

var _ground = require('./ground');

var _ground2 = _interopRequireDefault(_ground);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"../../../oyunkeyf/game":140,"../../../utils/redraw":212,"./ground":195}],198:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _i18n = require('../../../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _router = require('../../../../router');

var _router2 = _interopRequireDefault(_router);

var _helper = require('../../../helper');

var helper = _interopRequireWildcard(_helper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  resign: function resign(ctrl) {
    return h('button', {
      key: 'resign',
      className: 'resign',
      'data-icon': 'b',
      oncreate: helper.ontap(ctrl.resign)
    }, (0, _i18n2.default)('resign'));
  },
  returnToMasa: function returnToMasa(ctrl) {
    function handler() {
      ctrl.hideActions();
      var url = '/masa/' + ctrl.data.game.masaId;
      _router2.default.set(url, true);
    }
    return h(
      'button',
      { key: 'returnToMasa', oncreate: helper.ontap(handler) },
      h('span', { className: 'fa fa-throphy' }),
      (0, _i18n2.default)('backToMasa')
    );
  },
  openSeries: function openSeries(ctrl) {
    var className = "open-series";
    return h(
      'button',
      { className: className, key: 'openSeries',
        oncreate: helper.ontap(ctrl.openSeries) },
      (0, _i18n2.default)('openSeries')
    );
  },
  openPairs: function openPairs(ctrl) {
    var className = "open-pairs";
    return h(
      'button',
      { className: className, key: 'openPairs',
        oncreate: helper.ontap(ctrl.openPairs) },
      (0, _i18n2.default)('openPairs')
    );
  },
  sortPairs: function sortPairs(ctrl) {
    var className = "sort-series";
    return h(
      'button',
      { className: className, key: 'sortSeries',
        oncreate: helper.ontap(ctrl.sortPairs) },
      (0, _i18n2.default)('sortPairs')
    );
  },
  sortSeries: function sortSeries(ctrl) {
    var className = "sort-pairs";
    return h(
      'button',
      { className: className, key: 'sortSeries',
        oncreate: helper.ontap(ctrl.sortSeries) },
      (0, _i18n2.default)('sortSeries')
    );
  },
  collectOpen: function collectOpen(ctrl) {
    var className = "collect-open";
    return h(
      'button',
      { className: className, key: 'collectOpen',
        oncreate: helper.ontap(ctrl.collectOpen) },
      (0, _i18n2.default)('collectOpen')
    );
  },
  leaveTaken: function leaveTaken(ctrl) {
    var className = "leave-taken";
    return h(
      'button',
      { className: className, key: 'leaveTaken',
        oncreate: helper.ontap(ctrl.leaveTaken) },
      (0, _i18n2.default)('leaveTaken')
    );
  }
};

},{"../../../../i18n":138,"../../../../router":145,"../../../helper":157,"mithril/hyperscript":113}],199:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = view;

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _i18n = require('../../../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _layout = require('../../../layout');

var _layout2 = _interopRequireDefault(_layout);

var _socket = require('../../../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _helper = require('../../../helper');

var helper = _interopRequireWildcard(_helper);

var _player = require('../../../../oyunkeyf/player');

var playerApi = _interopRequireWildcard(_player);

var _game = require('../../../../oyunkeyf/game');

var _game2 = _interopRequireDefault(_game);

var _status = require('../../../../oyunkeyf/status');

var _status2 = _interopRequireDefault(_status);

var _popup = require('../../../shared/popup');

var _popup2 = _interopRequireDefault(_popup);

var _Board = require('../../../shared/Board');

var _Board2 = _interopRequireDefault(_Board);

var _GameTitle = require('../../../shared/GameTitle');

var _GameTitle2 = _interopRequireDefault(_GameTitle);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

var _clockView = require('../clock/clockView');

var _clockView2 = _interopRequireDefault(_clockView);

var _common = require('../../../shared/common');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function view(ctrl) {

  return _layout2.default.board(renderHeader(ctrl), renderContent(ctrl), overlay(ctrl));
}

function overlay(ctrl) {
  return [renderGamePopup(ctrl)];
}

function renderGameRunningActions(ctrl) {
  var gameControls = _button2.default.resign(ctrl);

  return (0, _hyperscript2.default)(
    'div',
    { className: 'game_controls' },
    gameControls
  );
}

function renderGameEndedActions(ctrl) {
  function utilPlayer(p, tag) {
    var fullName = p.user ? p.user.username : p.ai ? (0, _i18n2.default)('aiBot', p.ai) : 'Misafir';

    return (0, _hyperscript2.default)(
      'a',
      { className: 'user_link' },
      fullName
    );
  };
  function playerScoresheetTr(ctrl, _ref) {
    var player = _ref.player,
        scores = _ref.scores;

    var mySide = ctrl.data.player.side;

    return (0, _hyperscript2.default)(
      'tr',
      { key: player.side, className: player.side === mySide ? 'me' : '' },
      (0, _hyperscript2.default)(
        'th',
        { className: 'user' },
        utilPlayer(player)
      ),
      (0, _hyperscript2.default)(
        'th',
        { className: 'score' },
        scores.total
      )
    );
  }

  var result = _game2.default.result(ctrl.data);
  var resultDom = _status2.default.aborted(ctrl.data) ? [] : [(0, _hyperscript2.default)('strong', (0, _i18n2.default)(result)), (0, _hyperscript2.default)('br')];

  var buttons = void 0;
  var masaId = ctrl.data.game.masaId;
  if (masaId) {
    buttons = [_button2.default.returnToMasa(ctrl)];
  }

  var scores = ['east', 'west', 'north', 'south'].map(function (side) {
    return {
      player: _game2.default.getPlayer(ctrl.data, side),
      scores: ctrl.data.game.scores ? ctrl.data.game.scores[side] : { scores: [] }
    };
  });

  var endScores = (0, _hyperscript2.default)(
    'div',
    { className: 'crosstable' },
    (0, _hyperscript2.default)(
      'table',
      null,
      (0, _hyperscript2.default)(
        'thead',
        null,
        (0, _hyperscript2.default)('tr', null)
      ),
      (0, _hyperscript2.default)(
        'tbody',
        null,
        scores.map(playerScoresheetTr.bind(null, ctrl))
      )
    )
  );

  return (0, _hyperscript2.default)(
    'div',
    { className: 'game_controls' },
    (0, _hyperscript2.default)(
      'div',
      { className: 'endScores' },
      endScores
    ),
    (0, _hyperscript2.default)(
      'div',
      { className: 'control buttons' },
      buttons
    )
  );
}

function renderStatus(ctrl) {
  var result = _game2.default.result(ctrl.data);
  var winner = _game2.default.getPlayer(ctrl.data, ctrl.data.game.winner);
  var status = _status2.default.toLabel(ctrl.data.game.status.name, ctrl.data.game.winner) + (winner ? '. ' + 'winner' + '.' : '');

  return (_status2.default.aborted(ctrl.data) ? [] : [(0, _hyperscript2.default)('strong', result), (0, _hyperscript2.default)('br')]).concat([(0, _hyperscript2.default)('em.resultStatus', (0, _i18n2.default)(status))]);
}

function renderGamePopup(ctrl) {
  var header = !_game2.default.playable(ctrl.data) ? function () {
    return renderStatus(ctrl);
  } : undefined;

  return (0, _popup2.default)('player_controls', header, function () {
    return _game2.default.playable(ctrl.data) ? renderGameRunningActions(ctrl) : renderGameEndedActions(ctrl);
  }, ctrl.vm.showingActions, ctrl.hideActions);
}

function renderHeader(ctrl) {
  var children = void 0;

  children = [(0, _common.menuButton)(), renderTitle(ctrl)];

  children.push((0, _common.headerBtns)());

  return (0, _hyperscript2.default)('nav', {
    className: _socket2.default.isConnected() ? '' : 'reconnecting'
  }, children);
}

function renderTitle(ctrl) {
  var data = ctrl.data;
  var masa = ctrl.data.masa;

  return (0, _hyperscript2.default)(_GameTitle2.default, {
    key: 'playing-title',
    data: ctrl.data
  });
}

function renderContent(ctrl) {
  var player = renderPlayTable(ctrl, ctrl.data.player, 'player');
  var opponentLeft = renderPlayTable(ctrl, ctrl.data.opponentLeft, 'opponentLeft');
  var opponentRight = renderPlayTable(ctrl, ctrl.data.opponentRight, 'opponentRight');
  var opponentUp = renderPlayTable(ctrl, ctrl.data.opponentUp, 'opponentUp');

  //  const bounds = helper.getBoardBounds(helper.viewportDim());

  var board = (0, _hyperscript2.default)(_Board2.default, {
    variant: ctrl.data.game.variant.key,
    okeyground: ctrl.okeyground
    //    bounds
  });

  return _hyperscript2.default.fragment({}, [renderMenuActionsBar(ctrl), renderGameActionsBarRight(ctrl), player, opponentLeft, opponentRight, opponentUp, board]);
}

function renderGameActionsBarRight(ctrl) {
  var myTurn = _game2.default.isPlayerTurn(ctrl.data);

  var canOpenSeries = ctrl.okeyground.canOpenSeries();
  var canOpenPairs = ctrl.okeyground.canOpenPairs();
  var canLeaveTaken = ctrl.okeyground.canLeaveTaken();

  var canCollectOpen = ctrl.okeyground.canCollectOpen();

  return (0, _hyperscript2.default)(
    'section',
    { className: 'game_actions_bar right' },
    canLeaveTaken ? _button2.default.leaveTaken(ctrl) : null,
    canOpenPairs ? _button2.default.openPairs(ctrl) : _button2.default.sortPairs(ctrl),
    canOpenSeries ? _button2.default.openSeries(ctrl) : _button2.default.sortSeries(ctrl),
    canCollectOpen ? _button2.default.collectOpen(ctrl) : null
  );
}

function renderMenuActionsBar(ctrl) {
  var gmClass = ['fa', 'fa-ellipsis-v'].join(' ');

  var gmButton = (0, _hyperscript2.default)('button', { className: gmClass, key: 'gameMenu', oncreate: helper.ontap(ctrl.showActions) });

  return (0, _hyperscript2.default)(
    'section',
    { className: 'menu_actions_bar' },
    (0, _common.backButton)(),
    gmButton
  );
}

function renderPlayTable(ctrl, player, position) {

  var classN = 'playTable ' + position;

  return (0, _hyperscript2.default)(
    'section',
    { className: classN },
    renderAntagonistInfo(ctrl, player, position)
  );
}

function renderAntagonistInfo(ctrl, player, position) {
  // const runningSide = ctrl.isClockRunning() ? ctrl.data.game.player : undefined;
  var running = ctrl.data.game.player === player.side;
  var user = player.user;
  var playerName = playerApi.playerName(player);

  return (0, _hyperscript2.default)(
    'div',
    { className: 'antagonistInfos' },
    (0, _hyperscript2.default)(
      'h2',
      { className: 'antagonistUser' },
      (0, _hyperscript2.default)('span', { className: 'fa fa-circle status ' + (player.ai || player.onGame ? 'ongame' : 'offgame') }),
      playerName
    ),
    running ? renderClock(ctrl.clock, player.side) : null
  );
}

function renderClock(ctrl, side, runningSide) {
  return (0, _hyperscript2.default)(_clockView2.default, {
    ctrl: ctrl,
    side: side,
    runningSide: runningSide
  });
}

},{"../../../../i18n":138,"../../../../oyunkeyf/game":140,"../../../../oyunkeyf/player":141,"../../../../oyunkeyf/status":143,"../../../../socket":150,"../../../helper":157,"../../../layout":160,"../../../shared/Board":181,"../../../shared/GameTitle":182,"../../../shared/common":186,"../../../shared/popup":191,"../clock/clockView":194,"./button":198,"mithril/hyperscript":113}],200:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SideMenuCtrl;

var _zanimo = require('zanimo');

var _zanimo2 = _interopRequireDefault(_zanimo);

var _redraw = require('../../../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _router = require('../../../router');

var _router2 = _interopRequireDefault(_router);

var _ = require('.');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SideMenuCtrl(side, menuID, backdropID, onOpen, onClose) {
  var _this = this;

  this.isOpen = false;

  this.side = side;
  this.menuID = menuID;
  this.backdropID = backdropID;
  this.onOpen = onOpen;
  this.onClose = onClose;

  this.open = function () {
    _this.isOpen = true;
    _router2.default.backbutton.stack.push(_this.close);
    var el = document.getElementById(_this.menuID);
    var bd = document.getElementById(_this.backdropID);
    if (_this.onOpen) _this.onOpen();
    return Promise.all([(0, _zanimo2.default)(bd, 'visibility', 'visible', 0), (0, _zanimo2.default)(bd, 'opacity', _.BACKDROP_OPACITY, 250, 'linear'), (0, _zanimo2.default)(el, 'visibility', 'visible', 0), (0, _zanimo2.default)(el, 'transform', 'translate3d(0,0,0)', 250, 'ease-out')]).then(_redraw2.default).catch(console.log.bind(console));
  };

  this.close = function (fromBB) {
    if (fromBB !== 'backbutton' && _this.isOpen) _router2.default.backbutton.stack.pop();
    _this.isOpen = false;
    var el = document.getElementById(_this.menuID);
    var bd = document.getElementById(_this.backdropID);
    if (_this.onClose) _this.onClose();
    return Promise.all([(0, _zanimo2.default)(bd, 'opacity', 0, 250, 'linear'), (0, _zanimo2.default)(el, 'transform', _this.closeTranslate(), 250, 'ease-out')]).then(function () {
      Promise.all([(0, _zanimo2.default)(el, 'visibility', 'hidden', 0), (0, _zanimo2.default)(bd, 'visibility', 'hidden', 0)]);
    }).catch(console.log.bind(console));
  };

  this.toggle = function () {
    if (_this.isOpen) _this.close();else _this.open();
  };

  this.closeTranslate = function () {
    return _this.side === 'left' ? 'translate3d(-100%,0,0)' : 'translate3d(100%,0,0)';
  };
};

},{".":201,"../../../router":145,"../../../utils/redraw":212,"zanimo":131}],201:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var BACKDROP_OPACITY = exports.BACKDROP_OPACITY = 0.7;

},{}],202:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = require('mithril/hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _socket = require('../socket');

var _socket2 = _interopRequireDefault(_socket);

var _redraw = require('../utils/redraw');

var _redraw2 = _interopRequireDefault(_redraw);

var _session = require('../session');

var _session2 = _interopRequireDefault(_session);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _helper = require('./helper');

var helper = _interopRequireWildcard(_helper);

var _router = require('../router');

var _router2 = _interopRequireDefault(_router);

var _loginModal = require('./loginModal');

var _loginModal2 = _interopRequireDefault(_loginModal);

var _backbutton = require('../backbutton');

var _backbutton2 = _interopRequireDefault(_backbutton);

var _icons = require('./shared/icons');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isOpen = false;
var loading = false;

var formError = null;

exports.default = {
  open: open,
  close: close,
  view: function view() {
    if (!isOpen) return null;

    return (0, _hyperscript2.default)('div.modal#signupModal', { oncreate: helper.slidesInUp }, [(0, _hyperscript2.default)('header', [(0, _hyperscript2.default)('button.modal_close', {
      oncreate: helper.ontap(helper.slidesOutDown(close, 'signupModal'))
    }, _icons.closeIcon), (0, _hyperscript2.default)('h2', (0, _i18n2.default)('signUp'))]), (0, _hyperscript2.default)('div#signupModalContent.modal_content', {
      className: loading ? 'loading' : ''
    }, renderForm())]);
  }
};


function renderForm() {
  return [(0, _hyperscript2.default)('form.login', {
    onsubmit: function onsubmit(e) {
      e.preventDefault();
      return submit(e.target);
    }
  }, [(0, _hyperscript2.default)('div.field', [formError && formError.username ? (0, _hyperscript2.default)('div.form-error', formError.username[0]) : null, (0, _hyperscript2.default)('input#pseudo[type=text]', {
    className: formError && formError.username ? 'form-error' : '',
    placeholder: (0, _i18n2.default)('username'),
    autocomplete: 'off',
    autocapitalize: 'off',
    autocorrect: 'off',
    spellcheck: false,
    required: true,
    onfocus: scrollToTop
  })]), (0, _hyperscript2.default)('div.field', [formError && formError.email ? (0, _hyperscript2.default)('div.form-error', formError.email[0]) : null, (0, _hyperscript2.default)('input#email[type=email]', {
    onfocus: scrollToTop,
    className: formError && formError.email ? 'form-error' : '',
    placeholder: (0, _i18n2.default)('email'),
    autocapitalize: 'off',
    autocorrect: 'off',
    spellcheck: false,
    required: true
  })]), (0, _hyperscript2.default)('div.field', [formError && formError.password ? (0, _hyperscript2.default)('div.form-error', formError.password[0]) : null, (0, _hyperscript2.default)('input#password[type=password]', {
    onfocus: scrollToTop,
    className: formError && formError.password ? 'form-error' : '',
    placeholder: (0, _i18n2.default)('password'),
    required: true
  })]), (0, _hyperscript2.default)('div.submit', [(0, _hyperscript2.default)('button.submitButton[data-icon=F]', (0, _i18n2.default)('signUp'))])])];
}

function scrollToTop(e) {
  setTimeout(function () {
    var el = e.target;
    el.scrollIntoView(true);
  }, 300);
}

function submit(form) {
  var login = form[0].value.trim();
  var email = form[1].value.trim();
  var pass = form[2].value.trim();
  if (!login || !email || !pass) return;
  window.Keyboard.hide();
  loading = true;
  formError = null;
  (0, _redraw2.default)();
  _session2.default.signup(login, email, pass).then(function (d) {
    window.plugins.toast.show((0, _i18n2.default)('loginSuccessful'), 'short', 'center');
    _socket2.default.reconnectCurrent();
    (0, _redraw2.default)();
    _loginModal2.default.close();
    close();
  }).catch(function (error) {
    if (isSubmitError(error)) {
      loading = false;
      formError = error.body.error;
      (0, _redraw2.default)();
    } else {
      handleXhrError(error);
    }
  });
}

function isSubmitError(err) {
  return err.body.error !== undefined;
}

function open() {
  _router2.default.backbutton.stack.push(helper.slidesOutDown(close, 'signupModal'));
  formError = null;
  isOpen = true;
}

function close(fromBB) {
  window.Keyboard.hide();
  if (fromBB !== 'backbutton' && isOpen) _router2.default.backbutton.stack.pop();
  isOpen = false;
}

// const signupModal = {};

// var isOpen = false;

// function submit(form) {
//   var login = form[0].value.trim();
//   var email = form[1].value.trim();
//   var pass = form[2].value.trim();
//   if (!login || !email || !pass) return false;
//   window.cordova.plugins.Keyboard.close();
//   return session.signup(login, email, pass).then(function() {
//     signupModal.close();
//     loginModal.close();
//     window.plugins.toast.show(i18n('loginSuccessfull'), 'short', 'center');
//   }, function(error) {
//     var data = error.response;
//     if (data.error.username) {
//       window.plugins.toast.show(data.error.username[0], 'short', 'center');
//     } else if (data.error.password) {
//       window.plugins.toast.show(data.error.password[0], 'short', 'center');
//     }
//   });
// }

// signupModal.open = function() {
//   backbutton.stack.push(helper.slidesOutDown(signupModal.close, 'signupModal'));
//   isOpen = true;
// };

// signupModal.close = function(fromBB) {
//   window.cordova.plugins.Keyboard.close();
//   if (fromBB !== 'backbutton' && isOpen) backbutton.stack.pop();
//   isOpen = false;
// };

// signupModal.view = function() {
//   if (!isOpen) return null;

//   return m('div.modal#signupModal', { config: helper.slidesInUp }, [
//     m('header', [
//       m('button.modal_close[data-icon=L]', {
//         config: helper.ontouch(helper.slidesOutDown(signupModal.close, 'signupModal'))
//       }),
//       m('h2', i18n('signUp'))
//     ]),
//     m('div.modal_content', [
//       m('p.signupWarning.withIcon[data-icon=!]', [
//         i18n('computersAreNotAllowedToPlay')
//       ]),
//       m('p.tosWarning', [
//         i18n('byRegisteringYouAgreeToBeBoundByOur'),
//         m('a', {
//         }, i18n('termsOfService')), '.'
//       ]),
//       m('form.login', {
//         onsubmit: function(e) {
//           e.preventDefault();
//           return submit(e.target);
//         }
//       }, [
//         m('input#pseudo[type=text]', {
//           placeholder: i18n('username'),
//           autocomplete: 'off',
//           autocapitalize: 'off',
//           autocorrect: 'off',
//           spellcheck: 'false',
//           required: true
//         }),
//         m('input#email[type=email]', {
//           placeholder: i18n('email'),
//           autocomplete: 'off',
//           autocapitalize: 'off',
//           autocorrect: 'off',
//           spellcheck: 'false',
//           required: true
//         }),
//         m('input#password[type=password]', {
//           placeholder: i18n('password'),
//           required: true
//         }),
//         m('button.fat', i18n('signUp'))
//       ])
//     ])
//   ]);
// };

// export default signupModal;

},{"../backbutton":135,"../i18n":138,"../router":145,"../session":147,"../socket":150,"../utils/redraw":212,"./helper":157,"./loginModal":162,"./shared/icons":188,"mithril/hyperscript":113}],203:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _helper = require('../helper');

var helper = _interopRequireWildcard(_helper);

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _common = require('../shared/common');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  oncreate: helper.viewFadeIn,
  oninit: function oninit(_ref) {
    var attrs = _ref.attrs;
  },
  view: function view() {
    var body = h(
      'div',
      null,
      (0, _i18n2.default)('underConstruction')
    );

    return _layout2.default.free((0, _common.header)((0, _i18n2.default)('todo')), body, null, null);
  }
};

},{"../../i18n":138,"../helper":157,"../layout":160,"../shared/common":186,"mithril/hyperscript":113}],204:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _userCtrl = require('./userCtrl');

var _userCtrl2 = _interopRequireDefault(_userCtrl);

var _userView = require('./userView');

var _userView2 = _interopRequireDefault(_userView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  controller: _userCtrl2.default,
  view: _userView2.default
};

},{"./userCtrl":205,"./userView":206}],205:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = controller;

var _session = require('../../session');

var _session2 = _interopRequireDefault(_session);

var _userXhr = require('./userXhr');

var xhr = _interopRequireWildcard(_userXhr);

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _helper = require('../helper');

var _helper2 = _interopRequireDefault(_helper);

var _socket = require('../../socket');

var _socket2 = _interopRequireDefault(_socket);

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function controller() {
  _socket2.default.createDefault();

  var user = _mithril2.default.prop();

  xhr.user(_mithril2.default.route.param('id')).then(user, function (error) {
    utils.handleXhrError(error);
    _mithril2.default.route('/');
  }).then(_session2.default.refresh);

  return {
    user: user,
    isMe: function isMe() {
      return _session2.default.getUserId() === user().id;
    }
  };
}

},{"../../session":147,"../../socket":150,"../../utils":210,"../helper":157,"./userXhr":207,"mithril":114}],206:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var h = require('mithril/hyperscript');

exports.default = view;

var _perf = require('../shared/perf');

var _perf2 = _interopRequireDefault(_perf);

var _common = require('../shared/common');

var _layout = require('../layout');

var _layout2 = _interopRequireDefault(_layout);

var _i18n = require('../../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _helper = require('../helper');

var _helper2 = _interopRequireDefault(_helper);

var _session = require('../../session');

var _session2 = _interopRequireDefault(_session);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import userPerfs from '../../oyunkeyf/perfs';
function view(ctrl) {
  var user = ctrl.user();

  if (!user) return null;

  function header() {
    var title = user.username;
    return (0, _common.header)(null, (0, _common.backButton)(title));
  }

  function profile() {
    // TODO
    // stats
    // ratings
    // actions
    return h(
      'div',
      { id: 'userProfile', className: 'native_scroller page' },
      renderStatus(user),
      renderProfile(user),
      renderRatings(user),
      renderActions(ctrl)
    );
  }

  return _layout2.default.free(header, profile);
}

function renderStatus(user) {
  var status = user.online ? 'online' : 'offline';
  return h(
    'section',
    { className: 'onlineStatus' },
    h('span', { className: 'userStatus ' + status, 'data-icon': 'r' }),
    (0, _i18n2.default)(status)
  );
}

function renderProfile(user) {
  if (!user.profile) return null;

  var fullName = '';
  if (user.profile.firstName) fullName += user.profile.firstName;
  if (user.profile.lastName) fullName += (user.profile.firstName ? ' ' : '') + user.profile.lastName;
  // const country = countries[user.profile.country];
  var location = user.profile.location;
  var memberSince = (0, _i18n2.default)('memberSince') + ' ' + window.moment(user.createdAt).format('LL');
  var seenAt = user.seenAt ? (0, _i18n2.default)('lastLogin') + ' ' + window.moment(user.seenAt).calendar() : null;

  return h(
    'section',
    { classname: 'profile' },
    fullName ? h(
      'h3',
      { className: 'fullname' },
      fullName
    ) : null,
    user.profile.bio ? h(
      'p',
      { className: 'profileBio' },
      user.profile.bio
    ) : null,
    h(
      'div',
      { className: 'userInfos' },
      user.language ? h(
        'p',
        { className: 'language withIcon' },
        h(
          'span',
          { className: 'fa fa-comment-o' },
          getLanguageNativeName(user.language)
        )
      ) : null,
      h(
        'p',
        { className: 'location' },
        location
      ),
      h(
        'p',
        { className: 'memberSince' },
        memberSince
      ),
      seenAt ? h(
        'p',
        { className: 'lastSeen' },
        seenAt
      ) : null
    )
  );
}

function renderRatings(user) {
  function isShowing(p) {
    return ['yuzbir', 'duzokey'].indexOf(p.key) !== -1 || p.perf.games > 0;
  }

  return h(
    'section',
    { id: 'userProfileRatings', className: 'perfs' },
    '// ',
    userPerfs(user).filter(isShowing).map(function (p) {
      return (0, _perf2.default)(p.key, p.name, p.perf, user);
    })
  );
}

function renderActions(ctrl) {
  var user = ctrl.user();
  return h(
    'section',
    { id: 'userProfileActions', 'class': 'noPadding' },
    h(
      'div',
      { className: 'list_item_nav',
        config: _helper2.default.ontouchY(ctrl.goToGames),
        key: 'view_all_games' },
      (0, _i18n2.default)('viewAllNbGames', user.count.all)
    )
  );
}

},{"../../i18n":138,"../../session":147,"../helper":157,"../layout":160,"../shared/common":186,"../shared/perf":190,"mithril/hyperscript":113}],207:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.user = user;

var _http = require('../../http');

function user(id) {
  var url = '/api/user/' + id;
  return (0, _http.request)(url, {}, true);
}

},{"../../http":137}],208:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isForeground = isForeground;
exports.setForeground = setForeground;
exports.setBackground = setBackground;
var foreground = true;

function isForeground() {
  return foreground;
}

function setForeground() {
  foreground = true;
}

function setBackground() {
  foreground = false;
}

},{}],209:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchRequestAnimationFrame = batchRequestAnimationFrame;
var callbacks = new Set();
var batching = false;

function batchRequestAnimationFrame(callback) {
  callbacks.add(callback);
  if (!batching) {
    batching = true;
    requestAnimationFrame(function (ts) {
      var batch = callbacks;
      batching = false;
      callbacks = new Set();
      batch.forEach(function (f) {
        return f(ts);
      });
    });
  }
}

},{}],210:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.oyunkeyfSri = undefined;
exports.autoredraw = autoredraw;
exports.noop = noop;
exports.handleXhrError = handleXhrError;
exports.loadLocalJsonFile = loadLocalJsonFile;
exports.currentSri = currentSri;
exports.newSri = newSri;
exports.tellWorker = tellWorker;
exports.askWorker = askWorker;
exports.hasNetwork = hasNetwork;
exports.partialf = partialf;
exports.f = f;
exports.playerName = playerName;
exports.aiName = aiName;
exports.backHistory = backHistory;
exports.setViewSlideDirection = setViewSlideDirection;
exports.getViewSlideDirection = getViewSlideDirection;
exports.getBoardBounds = getBoardBounds;
exports.gameIcon = gameIcon;
exports.formatMasaDuration = formatMasaDuration;
exports.pad = pad;
exports.capitalize = capitalize;
exports.safeStringToNum = safeStringToNum;

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _redraw = require('./redraw');

var _redraw2 = _interopRequireDefault(_redraw);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function autoredraw(action) {
  var res = action();
  (0, _redraw2.default)();
  return res;
}

function noop() {}

function handleXhrError(error) {
  var status = error.status;
  var data = error.body;
  var message = void 0;

  if (!status || status === 0) {
    message = 'oyunkeyfIsUnreachable';
  } else if (status === 401) {
    message = 'unauthorizedError';
  } else if (status === 404) {
    message = 'resourceNotFoundError';
  } else if (status === 503) {
    message = 'oyunkeyfIsUnavailableError';
  } else {
    message = 'Error.';
  }

  message = (0, _i18n2.default)(message);

  if (typeof data === 'string') {
    message += ' ' + data;
  } else if (typeof data.error === 'string') {
    message += ' ' + (0, _i18n2.default)(data.global[0]);
  }
  window.plugins.toast.show(message, 'short', 'center');
}

function loadLocalJsonFile(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.overrideMimeType('application/json');
    xhr.open('GET', url, true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        if ((xhr.status === 0 || xhr.status === 200) && xhr.responseText !== '') {
          resolve(JSON.parse(xhr.responseText));
        } else {
          reject(xhr);
        }
      }
    };
    xhr.send(null);
  });
}

var sri = void 0;

function currentSri() {
  return sri || newSri();
}

function newSri() {
  sri = Math.random().toString(36).substring(2).slice(0, 10);
  return sri;
}

var oyunkeyfSri = exports.oyunkeyfSri = Math.random().toString(36).substring(2);

function tellWorker(worker, topic, payload) {
  if (payload !== undefined) {
    worker.postMessage({ topic: topic, payload: payload });
  } else {
    worker.postMessage({ topic: topic });
  }
}

function askWorker(worker, msg, callback) {
  return new Promise(function (resolve) {
    function listen(e) {
      if (e.data.topic === msg.topic) {
        worker.removeEventListener('message', listen);
        if (callback) {
          callback(e.data.payload);
        } else {
          resolve(e.data.payload);
        }
      }
    }
    worker.addEventListener('message', listen);
    worker.postMessage(msg);
  });
}

function hasNetwork() {
  return window.navigator.connection.type !== Connection.NONE;
}

// export function handleXhrError(error) {
//   var {response: data, status} = error;
//   if (!hasNetwork()) {
//     window.plugins.toast.show(i18n('noInternetConnection'), 'short', 'center');
//   } else {
//     let message;
//     if (!status || status === 0) {
//       message = 'oyunkeyfIsUnreachable';
//     } else if (status === 401) {
//       message = 'unauthorizedError';
//     } else if (status === 404) {
//       message = 'resourceNotFoundError';
//     } else if (status === 503) {
//       message = 'oyunkeyfIsUnavailableError';
//     } else if (status >= 500) {
//       message = 'serverError';
//     } else {
//       message = 'Error.';
//     }

//     message = i18n(message);

//     if (typeof data === 'string') {
//       message += ` ${data}`;
//     } else if (data.global && data.global.constructor === Array) {
//       message += ` ${data.global[0]}`;
//     } else if (typeof data.error === 'string') {
//       message += ` ${data.error}`;
//     }

//     window.plugins.toast.show(message, 'short', 'center');
//   }
// }

function partialApply(fn, args) {
  return fn.bind.apply(fn, [null].concat(args));
}

function partialf() {
  return partialApply(arguments[0], Array.prototype.slice.call(arguments, 1));
}

function f() {
  var args = arguments,
      fn = arguments[0];
  return function () {
    fn.apply(fn, Array.prototype.slice.call(args, 1));
  };
}

function playerName(player, withRating) {
  if (player.username || player.user) {
    var name = player.username || player.user.username;
    return name;
  }
  if (player.ai) {
    return aiName(player.ai);
  }

  if (player.side) {
    return (0, _i18n2.default)(player.side);
  }

  return (0, _i18n2.default)('anonymous');
}

function aiName(level) {
  return (0, _i18n2.default)('aiBot', level);
}

function backHistory() {
  setViewSlideDirection('bwd');
  if (window.navigator.app && window.navigator.app.backHistory) {
    window.navigator.app.backHistory();
  } else window.history.go(-1);
}

// simple way to determine views animation direction
var viewSlideDirection = 'fwd';
function setViewSlideDirection(d) {
  viewSlideDirection = d;
}
function getViewSlideDirection() {
  return viewSlideDirection;
}

function getBoardBounds(viewportDim, isPortrait, isIpadLike, mode) {
  var vh = viewportDim.vh,
      vw = viewportDim.vw;

  var top = 50;

  if (isPortrait) {
    // const contentHeight = vh - 50;
    // const pTop = 50 + (mode === 'game' ? ((contentHeight - vw - 40) / 2) : 0);
    var contentHeight = vh;
    var pTop = 0;
    return {
      top: pTop,
      right: vw,
      bottom: pTop + vw,
      left: 0,
      width: vw,
      height: vw
    };
  } else {
    // const lSide = vh - top;
    var lSide = vh - 5;
    var lWidth = vw - 5; // lSide * (4/3);
    var spaceCenter = vw - lWidth;
    return {
      top: top,
      right: lSide,
      bottom: top + lSide,
      left: spaceCenter / 2,
      width: lWidth,
      height: lSide
    };
  }
}

// export function autoredraw(action) {
//   m.startComputation();
//   try {
//     return action();
//   } finally {
//     m.endComputation();
//   }
// }

var perfIconsMap = {
  yuzbir: 'T',
  duzokey: '+'
};

function gameIcon(perf) {
  return perfIconsMap[perf] || '8';
}

function formatMasaDuration(rounds, scores) {
  return rounds ? rounds + (0, _i18n2.default)('hands') : scores + (0, _i18n2.default)('scores')[0];
}

function pad(num, size) {
  var s = num + '';
  while (s.length < size) {
    s = '0' + s;
  }return s;
}

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function safeStringToNum(s) {
  var n = Number(s);
  return isNaN(n) ? undefined : n;
}

},{"../i18n":138,"./redraw":212}],211:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.buildQueryString = buildQueryString;
// from https://github.com/Gozala/querystring

function stringifyPrimitive(v) {
  switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
}

function buildQueryString(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    return Object.keys(obj).map(function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
}

},{}],212:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redrawSync = undefined;
exports.default = redraw;

var _signals = require('../signals');

var _signals2 = _interopRequireDefault(_signals);

var _batchRAF = require('./batchRAF');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var redrawSync = exports.redrawSync = _signals2.default.redraw.dispatch;

function redraw() {
  // console.trace();
  (0, _batchRAF.batchRequestAnimationFrame)(redrawSync);
}

},{"../signals":149,"./batchRAF":209}],213:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keepAwake = keepAwake;
exports.allowSleepAgain = allowSleepAgain;
var IDLE_TIMER_DELAY = 15 * 60 * 1000;
var SLEEP_DELAY = 60 * 60 * 1000;

var sleepAgainTimeoutId = void 0;
var cancelTimer = void 0;

function keepAwake() {
  window.plugins.insomnia.keepAwake();
  if (cancelTimer !== undefined) {
    cancelTimer();
  }
  cancelTimer = idleTimer(IDLE_TIMER_DELAY, function () {
    sleepAgainTimeoutId = setTimeout(function () {
      window.plugins.insomnia.allowSleepAgain();
    }, SLEEP_DELAY);
  }, function () {
    clearTimeout(sleepAgainTimeoutId);
  });
}

function allowSleepAgain() {
  if (cancelTimer !== undefined) {
    cancelTimer();
    cancelTimer = undefined;
  }
  window.plugins.insomnia.allowSleepAgain();
}

function idleTimer(delay, onIdle, onWakeUp) {
  var events = ['touchstart'];
  var listening = false;
  var active = true;
  var lastSeenActive = Date.now();
  var intervalID = void 0;
  var onActivity = function onActivity() {
    if (!active) {
      // console.log('Wake up')
      onWakeUp();
    }
    active = true;
    lastSeenActive = Date.now();
    stopListening();
  };
  var startListening = function startListening() {
    if (!listening) {
      events.forEach(function (e) {
        document.addEventListener(e, onActivity);
      });
      listening = true;
    }
  };
  var stopListening = function stopListening() {
    if (listening) {
      events.forEach(function (e) {
        document.removeEventListener(e, onActivity);
      });
      listening = false;
    }
  };
  var cancel = function cancel() {
    clearInterval(intervalID);
    stopListening();
  };
  intervalID = setInterval(function () {
    if (active && Date.now() - lastSeenActive > delay) {
      // console.log('Idle mode')
      onIdle();
      active = false;
    }
    startListening();
  }, 30 * 1000);

  return cancel;
}

},{}],214:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tellWorker = tellWorker;
exports.askWorker = askWorker;
function tellWorker(worker, topic, payload) {
  if (payload !== undefined) {
    worker.postMessage({ topic: topic, payload: payload });
  } else {
    worker.postMessage({ topic: topic });
  }
}

function askWorker(worker, msg) {
  return new Promise(function (resolve, reject) {
    function listen(e) {
      if (e.data.topic === msg.topic && (msg.reqid === undefined || e.data.reqid === msg.reqid)) {
        worker.removeEventListener('message', listen);
        resolve(e.data.payload);
      } else if (e.data.topic === 'error' && e.data.payload.callerTopic === msg.topic && (msg.reqid === undefined || e.data.reqid === msg.reqid)) {
        worker.removeEventListener('message', listen);
        reject(e.data.payload.error);
      }
    }
    worker.addEventListener('message', listen);
    worker.postMessage(msg);
  });
}

},{}],215:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.game = game;
exports.seekGame = seekGame;
exports.setServerLang = setServerLang;

var _http = require('./http');

var _utils = require('./utils');

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _session = require('./session');

var _session2 = _interopRequireDefault(_session);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// export let cachedPools = [];

// export function newGame() {
//   const config = settings.gameSetup.human;

//   const data = {
//     variant: config.variant(),
//     rounds: config.rounds(),
//     mode: session.isConnected() ? config.mode() : '0',
//     membersOnly: session.isConnected() ? config.membersOnly() : false
//   };

//   return request('/masa/new', {
//     method: 'POST',
//     data
//   }, true);
// }

// export function lobby(feedback) {
//   return request('/', null, feedback);
// }

// export function game(id, background) {
//   var url = '/' + id;
//   return request(url, { background }, true);
// }

function game(id) {
  var url = '/' + id;
  return (0, _http.fetchJSON)(url);
}

function seekGame(setup) {
  var rest = _objectWithoutProperties(setup, []);

  var body = void 0;

  body = JSON.stringify(_extends({}, rest));

  return (0, _http.fetchJSON)('/masa/new', {
    method: 'POST',
    body: body
  }, true);
}

function setServerLang(lang) {
  if (_session2.default.isConnected()) {
    // return request('/translation/select', {
    //   method: 'POST',
    //   data: { lang }
    // });
    return Promise.resolve();
  } else {
    return Promise.resolve();
  }
}

},{"./http":137,"./session":147,"./settings":148,"./utils":210}]},{},[139])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
